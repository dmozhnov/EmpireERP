var AccountingPriceList_AddArticleAccountingPriceSet = {
    Init: function () {
        $(function () {

            $("#OnlyAvailability").prev(".yes_no_toggle").change(function () {
                if ($("#OnlyAvailability").val() == "0") {
                    $(".OnlyAvailabilityContainer").hide();
                }
                else {
                    $(".OnlyAvailabilityContainer").show();
                }
            });

            $("#btnBack").live("click", function () {
                window.location = $("#BackURL").val();
            });

            $('#btnAddArticleAccountingPriceSet').live('click', function () {
                if (IsFalse($("#multipleSelectorArticleGroups").CheckSelectedEntitiesCount("Не выбрано ни одной группы товаров.", "Выберите все группы товаров или не больше ", "messageAddArticleAccountingPriceSet"))) {
                    scroll(0, $("#messageAddArticleAccountingPriceSet").offset().top - 10);
                    return false;
                }
                if ($("#OnlyAvailability").val() == "1") {
                    if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.", "Выберите все места хранения или не больше ", "messageAddArticleAccountingPriceSet"))) {
                        scroll(0, $("#messageAddArticleAccountingPriceSet").offset().top - 10);
                        return false;
                    }
                }
                SetMultipleSelectorSelectedValues("multipleSelectorArticleGroups", "ArticleGroupsIDs", "AllArticleGroups");
                SetMultipleSelectorSelectedValues("multipleSelectorStorages", "StorageIDs", "AllStorages");
            });
        });
    },

    OnFailAddArticleAccountingPriceSet: function (ajaxContext) {
        scroll(0, $("#messageAddArticleAccountingPriceSet").offset().top - 10);
        ShowErrorMessage(ajaxContext.responseText, "messageAddArticleAccountingPriceSet");
    },

    OnSuccessAddArticleAccountingPriceSet: function (ajaxContext) {
            window.location = $("#BackURL").val();
    }
};﻿var AccountingPriceList_AddStorage = {
    Init: function () {
        $(document).ready(function () {
            DisableButton("btnSaveStorage");

            $('#StorageId').change(function () {
                if ($('#StorageId').val() == "") {
                    DisableButton("btnSaveStorage");
                }
                else {
                    EnableButton("btnSaveStorage");
                }
            });
        });
    },

    OnSuccessStorageAdd: function (ajaxContext) {
        $("#StorageId").clearSelect();
        DisableButton("btnSaveStorage");

        RefreshGrid('gridAccountingPriceStorages');
        RefreshGrid("gridAccountingPriceArticles");
        AccountingPriceList_Shared.RefreshMainDetails(ajaxContext);
        var priceListId = $('#AccountingPriceListId').val();

        $.ajax({
            type: "POST",
            url: "/AccountingPriceList/GetListOfStorages/",
            data: { priceListId: priceListId },
            success: function (result) {
                $("#StorageId").fillSelect(result);
            }
        });

        ShowSuccessMessage("Место хранения добавлено.", 'messageAccountingPriceListStorageForm');
    },

    OnFailStorageAdd: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, 'messageAccountingPriceListStorageForm');
    }
};﻿var AccountingPriceList_ArticlesGrid = {
    Init: function () {
        $(document).ready(function () {
            // Добавить элемент реестра (товар). Вызов первого модального окна
            $("#btnAddArticle").click(function () {
                var priceListId = $('#MainDetails_Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/AccountingPriceList/AddArticle",
                    data: { accountingPriceListId: priceListId },
                    success: function (result) {
                        $('#articleSelectList').hide().html(result);
                        $.validator.unobtrusive.parse($("#articleSelectList"));
                        ShowModal("articleSelectList");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetailsArticleList");
                    }
                });
            });

            // Удаление товара из грида по ссылке
            $('#gridAccountingPriceArticles .delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var articlePrice_id = $(this).parent("td").parent("tr").find(".articlePriceId").text();
                    var priceListId = $('#MainDetails_Id').val();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/AccountingPriceList/DeleteArticle/",
                        data: { articleAccountingPriceId: articlePrice_id, accountingPriceListId: priceListId },
                        success: function (result) {
                            RefreshGrid("gridAccountingPriceArticles");
                            AccountingPriceList_Shared.RefreshMainDetails(result);
                            ShowSuccessMessage("Товар удален.", "messageAccountingPriceListDetailsArticleList");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetailsArticleList");
                        }
                    });
                }
            });

            // Редактирование товара из грида по ссылке
            $("#gridAccountingPriceArticles .edit_link, #gridAccountingPriceArticles .details_link").click(function () {
                var articlePriceId = $(this).parent("td").parent("tr").find(".articlePriceId").text();
                var priceListId = $('#MainDetails_Id').val();

                $.ajax({
                    type: "GET",
                    url: "/AccountingPriceList/EditArticle",
                    data: { accountingPriceListId: priceListId, articleAccountingPriceId: articlePriceId },
                    success: function (result) {
                        $('#articleSelectList').hide().html(result);
                        $.validator.unobtrusive.parse($("#articleSelectList"));
                        ShowModal("articleSelectList");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetailsArticleList");
                    }
                });
            });

            $('#btnAddArticleAccountingPriceSet').live("click", function () {
                var id = $('#MainDetails_Id').val();
                window.location = "/AccountingPriceList/AddArticleAccountingPriceSet?id=" + id + GetBackUrl();
            });

        });             // document ready
    }
};﻿var AccountingPriceList_Details = {
    Init: function () {
        $(document).ready(function () {

            // Вызов окна параметров для печатных форм
            $('#lnkAccountingPriceListPrintingFormExpanded').click(function () {
                var accountingPriceListId = $('#MainDetails_Id').val();
                window.open("/AccountingPriceList/ShowAccountingPriceListPrintingForm?expMode=true&accountingPriceListId=" + accountingPriceListId);
            });

            $('#lnkAccountingPriceListPrintingForm').click(function () {
                var accountingPriceListId = $('#MainDetails_Id').val();
                window.open("/AccountingPriceList/ShowAccountingPriceListPrintingForm?expMode=false&accountingPriceListId=" + accountingPriceListId);
            });

            // Назад к списку
            $('#btnAccountingPriceListBack').click(function () {
                window.location = $('#BackURL').val();
            });

            // Редактировать
            $('#btnEditAccountingPriceList').click(function () {
                var priceListId = $('#MainDetails_Id').val();
                window.location = "/AccountingPriceList/Edit?accountingPriceListId=" + priceListId + GetBackUrl();
            });

            // Удалить
            $('#btnDeleteAccountingPriceList').click(function () {
                if (confirm('Вы уверены?')) {
                    var priceListId = $('#MainDetails_Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/AccountingPriceList/Delete/",
                        data: { id: priceListId },
                        success: function () {
                            window.location = "/AccountingPriceList/List";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetails");
                        }
                    });
                }
            });

            // Провести реестр цен
            $('#btnAccept').click(function () {
                var priceListId = $('#MainDetails_Id').val();
                var backURL = $('#BackURL').val();

                var rowCount = $('#priceListDetailsRowCount').text();
                if ((rowCount == "0") || (rowCount == "")) {
                    ShowErrorMessage("Невозможно провести реестр без товаров.", "messageAccountingPriceListDetails");

                    return;
                }

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/AccountingPriceList/Accept/",
                    data: { id: priceListId },
                    success: function (result) {
                        ShowSuccessMessage("Проведено. Ждите загрузки страницы.", "messageAccountingPriceListDetails");
                        window.location = "/AccountingPriceList/Details?id=" + priceListId + GetBackUrlFromString(backURL);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetails");
                    }
                });

            });

            // Отменить проводку реестра цен
            $('#btnCancelAcceptance').click(function () {
                var priceListId = $('#MainDetails_Id').val();
                var backURL = $('#BackURL').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/AccountingPriceList/CancelAcceptance/",
                    data: { id: priceListId },
                    success: function (result) {
                        ShowSuccessMessage("Проводка отменена. Ждите загрузки страницы.", "messageAccountingPriceListDetails");
                        window.location = "/AccountingPriceList/Details?id=" + priceListId + GetBackUrlFromString(backURL);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountingPriceListDetails");
                    }
                });
            });

        });    // document ready
    }
};﻿var AccountingPriceList_Edit = {
    Init: function () {
        $(document).ready(function () {

            $('#LastDigitCalcRuleNumber, #LastDigitCalcRulePenny').bind("change disable submit", function () {
                ValidatePair('LastDigitCalcRuleNumber', 'LastDigitCalcRulePenny', function (x, y) { return ($('#rbLastDigitCalcRuleType_4:checked').val() == undefined || x != "" || y != "" || $('#rbLastDigitCalcRuleType_4:disabled').val() == "disabled"); }, 'Заполните хотя бы одно поле', "LastDigitCalcRuleError")
            });

            $('#EndDate').change(function () {
                var elem = $(this);
                if (elem.val() == "") {
                    $('#EndTime').val("");
                }
                else {
                    $('#EndTime').val("23:59:59");
                }
            });


            $(':input, select').bind('disable', function () {
                $(this).ValidationValid();
            });

            $('#form0').live('submit', function () {
                if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
                "Выберите все места хранения или не больше ", "messageAccountingPriceListEdit"))) {
                    scroll(0, $("#messageAccountingPriceListEdit").offset().top - 10);
                    return false;
                }
            });

            //  инициализация элементов формы
            if (IsTrue($("#AllowToEdit").val())) {
                if ($('#form0 input[name=AccountingPriceCalcRuleType]:checked').val() == 1) {
                    rbAccountingPriceCalcRuleType1();
                }
                else {
                    rbAccountingPriceCalcRuleType2();
                }
                var lastDigitRuleType = $('#form0 input[name=LastDigitCalcRuleType]:checked').val()
                AccountingPriceList_Edit.LastDigitCalcRuleType(lastDigitRuleType);
            }


            $('#Number').change(function () {

                // TODO: при редактировании готового надо-  где-то хранить значение номера до редактирования,
                // и если вводимый номер равен старому, считать его верным, а если отличается - вызывать IsNumberUnique все равно.
                // (сейчас просто проверка - редактируем или создаем)

                if ($('#AccountingPriceListId').val() == "00000000-0000-0000-0000-000000000000") {

                    var num = $('#Number').val();
                    $.ajax({
                        type: "GET",
                        url: "/AccountingPriceList/IsNumberUnique",
                        data: { number: num },
                        success: function (result) {
                            if (result == "False") {
                                $('#Number').addClass('input-validation-error');
                                $('#NumberIsUnique_validationMessage').removeClass('field-validation-valid').addClass('field-validation-error').text('Введите уникальный номер');
                                $('#NumberIsUnique').val(0);
                            }
                            else {
                                $('#NumberIsUnique_validationMessage').addClass('field-validation-valid').removeClass('field-validation-error').text('');
                                $('#NumberIsUnique').val(1);
                            }
                        }
                    });

                } // if
            });

            $('#btnClosePriceList').click(function () {
                window.location = $('#BackURL').val();
            });

            $('#rbAccountingPriceCalcRuleType_1').click(function () {
                rbAccountingPriceCalcRuleType1();
            });

            $('#rbAccountingPriceCalcRuleType_2').click(function () {
                rbAccountingPriceCalcRuleType2();
            });

            $('#rbMarkupPercentDeterminationRuleType_1, #rbMarkupPercentDeterminationRuleType_2').click(function () {
                $('#CustomMarkupValue').attr('disabled', 'disabled').trigger('disable');
            });

            $('#rbMarkupPercentDeterminationRuleType_3').click(function () {
                $('#CustomMarkupValue').removeAttr('disabled');
            });

            $('#rbAccountingPriceDeterminationRuleType_1').click(function () {
                $('#listAccountingPriceDeterminationRuleType1').removeAttr('disabled');
                $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
            });

            $('#rbAccountingPriceDeterminationRuleType_2').click(function () {
                $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType2').removeAttr('disabled');
                $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
            });

            $('#rbAccountingPriceDeterminationRuleType_3').click(function () {
                $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType3').removeAttr('disabled');
                $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
            });

            $('#rbAccountingPriceDeterminationRuleType_4').click(function () {
                $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                $('#listAccountingPriceDeterminationRuleType4').removeAttr('disabled');
            });

            $('#rbMarkupValueRuleType_1').click(function () {
                $('#MarkupValuePercent').removeAttr('disabled');
                $('#DiscountValuePercent').attr('disabled', 'disabled').trigger('disable');
            });

            $('#rbMarkupValueRuleType_2').click(function () {
                $('#MarkupValuePercent').attr('disabled', 'disabled').trigger('disable');
                $('#DiscountValuePercent').removeAttr('disabled');
            });

            $('#rbLastDigitCalcRuleType_1, #rbLastDigitCalcRuleType_2').click(function () {
                AccountingPriceList_Edit.LastDigitCalcRuleType(1);
            });

            $('#rbLastDigitCalcRuleType_3').click(function () {
                AccountingPriceList_Edit.LastDigitCalcRuleType(3);
            });

            $('#rbLastDigitCalcRuleType_4').click(function () {
                AccountingPriceList_Edit.LastDigitCalcRuleType(4);
            });

            function rbAccountingPriceCalcRuleType1() {
                $("#divPurchaseCostDeterminationRuleType *").removeAttr("disabled");
                $("#divMarkupPercentDeterminationRuleType *").removeAttr("disabled");
                if ($("#divMarkupPercentDeterminationRuleType input:checked").attr("value") != 3) {
                    $('#CustomMarkupValue').attr("disabled", "disabled").trigger('disable');
                }

                $("#divAccountingPriceDeterminationRuleType *").attr("disabled", "disabled").trigger('disable');
                $("#divMarkupValueRuleType *").attr("disabled", "disabled").trigger('disable');
            }

            function rbAccountingPriceCalcRuleType2() {
                $("#divPurchaseCostDeterminationRuleType *").attr("disabled", "disabled").trigger('disable');
                $("#divMarkupPercentDeterminationRuleType *").attr("disabled", "disabled").trigger('disable');

                $("#divAccountingPriceDeterminationRuleType *").removeAttr("disabled");
                $("#divMarkupValueRuleType *").removeAttr("disabled");

                var value = $("#divAccountingPriceDeterminationRuleType input:checked").attr("value");

                switch (value) {
                    case "1":
                        $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
                        break;
                    case "2":
                        $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
                        break;
                    case "3":
                        $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType4').attr('disabled', 'disabled').trigger('disable');
                        break;
                    case "4":
                        $('#listAccountingPriceDeterminationRuleType1').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType2').attr('disabled', 'disabled').trigger('disable');
                        $('#listAccountingPriceDeterminationRuleType3').attr('disabled', 'disabled').trigger('disable');
                        break;
                }

                value = $("#divMarkupValueRuleType input:checked").attr("value");
                switch (value) {
                    case "1":
                        $('#DiscountValuePercent').attr('disabled', 'disabled').trigger('disable');
                        break;
                    case "2":
                        $('#MarkupValuePercent').attr('disabled', 'disabled').trigger('disable');
                        break;
                }
            }
        });               // document ready        

        function ValidateInputWithRadioButton(input_id, radio_id, predicate, message, validationMessageId) {
            var input = $('#' + input_id);
            input.Validate(function (x) { return !($('#' + radio_id + ':checked').val() != undefined && !predicate(x) && ($('#' + radio_id + ':disabled').val() == undefined)); }, message, validationMessageId);
        }

        function BindValidateInputWithRadioButton(input_id, radio_id, predicate, message, validationMessageId) {
            $('#' + input_id).bind("change disable submit", function () { ValidateInputWithRadioButton(input_id, radio_id, predicate, message, validationMessageId); });
            $('#' + radio_id).bind('disable submit', function () { ValidateInputWithRadioButton(input_id, radio_id, predicate, message, validationMessageId); });
        }
    },

    OnFailCreatePriceList: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageAccountingPriceListEdit");
    },

    OnSuccessCreatePriceList: function (ajaxContext) {
        ShowSuccessMessage("Сохранено. Ждите загрузки страницы.", "messageAccountingPriceListEdit");
        var id = ajaxContext.Id;
        var url = "/AccountingPriceList/Details?id=" + id + GetBackUrlFromString($("#BackURL").val());
        window.location = url;
    },

    LastDigitCalcRuleType: function (value) {
        value = parseInt(value);
        switch (value) {
            case 1:
            case 2:
                $('#listLastDigitCalcRuleType, #LastDigitCalcRuleNumber, #LastDigitCalcRulePenny').attr('disabled', 'disabled').trigger('disable');
                break;
            case 3:
                $('#listLastDigitCalcRuleType').removeAttr('disabled');
                $('#LastDigitCalcRuleNumber, #LastDigitCalcRulePenny').attr('disabled', 'disabled').trigger('disable');
                break;
            case 4:
                $('#listLastDigitCalcRuleType').attr('disabled', 'disabled').trigger('disable');
                $('#LastDigitCalcRuleNumber, #LastDigitCalcRulePenny').removeAttr('disabled');
                break;
        }
    }
};﻿var AccountingPriceList_List_AcceptedGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridAcceptedAccountingPriceList table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/AccountingPriceList/Details?id=" + id + "&backURL=" + currentUrl);

                var receiptId = $(this).find(".ReceiptWaybillId").text();
                $(this).find("a.Reason").attr("href", "/ReceiptWaybill/Details?id=" + receiptId + GetBackUrl());
            });
        });
    }
};﻿var AccountingPriceList_List_NewGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridNewAccountingPriceList table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/AccountingPriceList/Details?id=" + id + GetBackUrl());

                var receiptId = $(this).find(".ReceiptWaybillId").text();
                $(this).find("a.Reason").attr("href", "/ReceiptWaybill/Details?id=" + receiptId + GetBackUrl());
            });

            $('#btnCreateAccountingPriceListRevaluation').click(function () {
                window.location = "/AccountingPriceList/Create?reasonCode=2" + GetBackUrl();
            });
        });
    }
};﻿var AccountingPriceList_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            
            if (IsTrue($("#AllowToViewReceiptWaybillDetails").val())) {
                var waybillId = $("#ReasonReceiptWaybillId").val();
                $("#ReasonDescription").attr("href", "/ReceiptWaybill/Details?id=" + waybillId + "&backURL=" + currentUrl);
            }
            else {
                $("#ReasonDescription").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewCuratorDetails").val())) {
                var userId = $("#CuratorId").val();
                $("#CuratorName").attr("href", "/User/Details?id=" + userId + "&backURL=" + currentUrl);
            }
            else {
                $("#CuratorName").addClass("disabled");
            }
        });
    }
}; ﻿var AccountingPriceList_PriceEdit = {
    Init: function () {
        $(document).ready(function () {
            $('#tbAccountingPrice').change(function () {
                $('#lblDefaultRuleError').removeClass('field-validation-error').addClass('field-validation-valid');
            });
        });           // document ready

        $("span#ArticleName.select_link").bind('click', function () {
            $.ajax({
                type: "GET",
                url: "/Article/SelectArticle/",
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    AccountingPriceList_PriceEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleAccountingPriceEdit");
                }
            });
        });
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live('click', function () {
            // Установка полей с информацией о выбранном товаре
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#ArticleIdForDisplay").text($(this).parent("td").parent("tr").find(".articleId").text());
            $("#ArticleNumber").text($(this).parent("td").parent("tr").find(".articleNumber").text());

            var accountingPriceListId = $('#AccountingPriceListId').val();
            var articleId = $('#ArticleId').val();
            $.ajax({
                type: "GET",
                url: "/AccountingPriceList/GetTipsForArticle/",
                data: { accountingPriceListId: accountingPriceListId, articleId: articleId },
                success: function (result) {
                    $('#AveragePurchaseCost').text(result.AveragePurchaseCost);
                    $('#MinPurchaseCost').text(result.MinPurchaseCost);
                    $('#MaxPurchaseCost').text(result.MaxPurchaseCost);
                    $('#LastPurchaseCost').text(result.LastPurchaseCost);
                    $('#AverageAccountingPrice').text(result.AverageAccountingPrice);
                    $('#MinAccountingPrice').text(result.MinAccountingPrice);
                    $('#MaxAccountingPrice').text(result.MaxAccountingPrice);
                    $('#DefaultMarkupPercent').text(result.DefaultMarkupPercent);
                    $("#AccountingPriceRule").text(result.AccountingPriceRule);

                    if (result.CalculatedAccountingPrice != "") {
                        var accPrice = result.CalculatedAccountingPrice.replaceAll(" ", "");
                        $('input#AccountingPrice').val(ValueForEdit(accPrice)).prev("span").text(ValueForDisplay(accPrice));
                    }
                    else {
                        $('input#AccountingPrice').val(0).prev("span").text(0);
                    }

                    $('#CalculatedAccountingPrice').prev("span").text(result.CalculatedAccountingPrice);
                    $('#CalculatedAccountingPrice').val(result.CalculatedAccountingPrice);

                    $('#AccountingPrice').focus();


                    var defaultRule = result.UsedDefaultRule;
                    if (defaultRule != 0) $('#lblDefaultRuleError').removeClass('field-validation-valid').addClass('field-validation-error')
                    else $('#lblDefaultRuleError').removeClass('field-validation-error').addClass('field-validation-valid');
                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleSelectList");
                }
            });
        });
    },


    // при неудачной попытке добавления/редактирования товара в реестре цен
    OnFailArticlePriceEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageArticleAccountingPriceEdit");
    },

    OnSuccessArticlePriceEdit: function (ajaxContext) {
        RefreshGrid("gridAccountingPriceArticles", function () {
            AccountingPriceList_Shared.RefreshMainDetails(ajaxContext);

            // после редактирования мы закрываем модальную форму
            if ($('#articleSelectList #Id').val() != "00000000-0000-0000-0000-000000000000") {
                HideModal(function () {
                    ShowSuccessMessage("Сохранено.", "messageAccountingPriceListDetailsArticleList");
                });
            }
            // а после добавления мы оставляем модальную форму, но очищаем ее, чтобы она была готова к новому добавлению
            else {
                $("#articleSelectList #ArticleId").val("0");
                $("#articleSelectList #ArticleIdForDisplay").text("");
                $("#ArticleName").text("Выберите товар");
                $("#articleSelectList #ArticleNumber").text("");
                $("#articleSelectList input#AccountingPrice").val("0").prev("span").text("---");
                $("#articleSelectList input#CalculatedAccountingPrice").val("0").prev("span").text("---");

                $('#AveragePurchaseCost').text("---");
                $('#MinPurchaseCost').text("---");
                $('#MaxPurchaseCost').text("---");
                $('#LastPurchaseCost').text("---");
                $('#AverageAccountingPrice').text("---");
                $('#MinAccountingPrice').text("---");
                $('#MaxAccountingPrice').text("---");
                $('#DefaultMarkupPercent').text("---");
                $("#AccountingPriceRule").text("---");

                ShowSuccessMessage("Товар добавлен.", "messageArticleAccountingPriceEdit");
            }
        });
    }
};﻿var AccountingPriceList_Shared = {
        RefreshMainDetails:function(details) {
            $('#priceListDetailsPurchaseCostSum').text(details.PurchaseCostSum);
            $('#priceListDetailsOldAccountingPriceSum').text(details.OldAccountingPriceSum);
            $('#priceListDetailsNewAccountingPriceSum').text(details.NewAccountingPriceSum);
            $('#priceListDetailsAccountingPriceDifPercent').text(details.AccountingPriceDifPercent);
            $('#priceListDetailsAccountingPriceDifSum').text(details.AccountingPriceDifSum);
            $('#priceListDetailsPurchaseMarkupPercent').text(details.PurchaseMarkupPercent);
            $('#priceListDetailsPurchaseMarkupSum').text(details.PurchaseMarkupSum);
            $('#priceListDetailsRowCount').text(details.RowCount);
            $('#priceListDetailsDistribution').text(details.DistributionName);

            UpdateButtonAvailability("btnAccept", details.AllowToAccept);
            UpdateElementVisibility("btnAccept", details.AllowToAccept);
     }
};﻿var AccountingPriceList_StoragesGrid = {
    Init: function () {
        $(document).ready(function () {
            $('#btnAddOne').click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/AccountingPriceList/StoragesList",
                    data: { priceListId: $('#MainDetails_Id').val() },
                    success: function (result) {
                        $('#storageSelectList').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageSelectList"));
                        ShowModal("storageSelectList");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, 'messageAccountingPriceListDetailsStorageList');
                    }
                });
            });

            $('#btnAddAll').click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/AccountingPriceList/StoragesAddAll",
                    data: { priceListId: $('#MainDetails_Id').val() },
                    success: function (result) {
                        RefreshGrid("gridAccountingPriceStorages", function () {
                            AccountingPriceList_Shared.RefreshMainDetails(result);
                            ShowSuccessMessage('Места хранения добавлены.', 'messageAccountingPriceListDetailsStorageList');
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, 'messageAccountingPriceListDetailsStorageList');
                    }
                });
            });

            $('#btnAddTradePoint').click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/AccountingPriceList/StoragesAddTradePoint",
                    data: { priceListId: $('#MainDetails_Id').val() },
                    success: function (result) {
                        RefreshGrid("gridAccountingPriceStorages", function () {
                            AccountingPriceList_Shared.RefreshMainDetails(result);
                            ShowSuccessMessage('Торговые точки добавлены.', 'messageAccountingPriceListDetailsStorageList');
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, 'messageAccountingPriceListDetailsStorageList');
                    }
                });
            });

            $('#gridAccountingPriceStorages .delFromList_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var storage_id = $(this).parent("td").parent("tr").find(".storageId").text();
                    var priceListId = $('#MainDetails_Id').val();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/AccountingPriceList/DeleteStorage/",
                        data: { storageId: storage_id, accPriceListId: priceListId },
                        success: function (result) {
                            RefreshGrid("gridAccountingPriceStorages", function () {
                                AccountingPriceList_Shared.RefreshMainDetails(result);
                                RefreshGrid("gridAccountingPriceArticles");
                                ShowSuccessMessage('Место хранения удалено.', 'messageAccountingPriceListDetailsStorageList');
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, 'messageAccountingPriceListDetailsStorageList');
                        }
                    });
                }
            });
        });         // document ready
    }
};﻿var AccountOrganization_Details = {
    Init: function () {
        $(document).ready(function () {
            $('#btnBack').click(function () {
                window.location = $('#BackURL').val();
            });

            var currentUrl = $("#currentUrl").val();
            $("#gridStorage table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $('#btnAddRussianBankAccount').live("click", function () {
                StartButtonProgress($("#btnAddRussianBankAccount"));

                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/AddRussianBankAccount",
                    data: { accountOrganizationId: $('#AccountOrganizationId').val() },
                    success: function (result) {
                        $('#accountOrganizationBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationBankAccountDetailsForEdit"));
                        ShowModal("accountOrganizationBankAccountDetailsForEdit");
                        $('#accountOrganizationBankAccountDetailsForEdit #BankAccountNumber').focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            $('#btnAddForeignBankAccount').live("click", function () {
                StartButtonProgress($("#btnAddForeignBankAccount"));

                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/AddForeignBankAccount",
                    data: { accountOrganizationId: $('#AccountOrganizationId').val() },
                    success: function (result) {
                        $('#accountOrganizationForeignBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationForeignBankAccountDetailsForEdit"));
                        ShowModal("accountOrganizationForeignBankAccountDetailsForEdit");
                        $('#accountOrganizationForeignBankAccountDetailsForEdit #BankAccountNumber').focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            // Редактирование счета
            $('#gridRussianBankAccounts .edit_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();
                var accountOrganizationId = $('#AccountOrganizationId').val();
                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/EditRussianBankAccount",
                    data: { accountOrganizationId: accountOrganizationId, bankAccountId: accountId },
                    success: function (result) {
                        $('#accountOrganizationBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationBankAccountDetailsForEdit"));
                        ShowModal("accountOrganizationBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            // Редактирование счета в иностранном банке
            $('#gridForeignBankAccounts .edit_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();
                var accountOrganizationId = $('#AccountOrganizationId').val();
                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/EditForeignBankAccount",
                    data: { accountOrganizationId: accountOrganizationId, bankAccountId: accountId },
                    success: function (result) {
                        $('#accountOrganizationForeignBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationForeignBankAccountDetailsForEdit"));
                        ShowModal("accountOrganizationForeignBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            // Удаление счета
            $('#gridRussianBankAccounts .delete_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();
                var accountOrganizationId = $('#AccountOrganizationId').val();

                if (confirm('Вы уверены?')) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/AccountOrganization/RemoveRussianBankAccount",
                        data: { accountOrganizationId: accountOrganizationId, bankAccountId: accountId },
                        success: function (result) {
                            RefreshGrid("gridRussianBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageRussianBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                        }
                    });
                }
            });
            // Удаление счета в иностранном банке
            $('#gridForeignBankAccounts .delete_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();
                var accountOrganizationId = $('#AccountOrganizationId').val();

                if (confirm('Вы уверены?')) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/AccountOrganization/RemoveForeignBankAccount",
                        data: { accountOrganizationId: accountOrganizationId, bankAccountId: accountId },
                        success: function (result) {
                            RefreshGrid("gridForeignBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageForeignBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                        }
                    });
                }
            });


            $('#btnAddLinkedStorage').live('click', function () {
                StartButtonProgress($("#btnAddLinkedStorage"));

                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/StoragesList",
                    data: { orgId: $('#AccountOrganizationId').val() },
                    success: function (result) {
                        $('#storageSelectList').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageSelectList"));
                        ShowModal("storageSelectList");
                    }
                });
            });

            // редактирование организации
            $('#btnEditAccountOrganization').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/Edit",
                    data: { accountOrganizationId: $('#AccountOrganizationId').val() },
                    success: function (result) {
                        $('#organizationEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#organizationEdit"));
                        ShowModal("organizationEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationEdit");
                    }
                });
            });

            $('#btnDeleteAccountOrganization').click(function () {
                if (confirm("Вы уверены?")) {

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/AccountOrganization/Delete",
                        data: { accountOrganizationId: $('#AccountOrganizationId').val() },
                        success: function (result) {
                            window.location = "/AccountOrganization/List";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationEdit");
                        }
                    });
                }
            });
        });
    },

    OnSuccessAccountOrganizationEdit: function (ajaxContext) {
        HideModal();
        $.ajax({
            type: "GET",
            url: "/AccountOrganization/ShowMainDetails",
            data: { accountOrganizationId: $('#AccountOrganizationId').val() },
            success: function (result) {
                $('#accountOrganizationMainDetails').html(result);
                $('.page_title_item_name').text($('#OrganizationName').val());
                ShowSuccessMessage("Сохранено.", "messageAccountOrganizationEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationEdit");
            }
        });
    },

    OnSuccessStorageAdd: function () {
        HideModal();
        RefreshGrid("gridStorage", function () {
            ShowSuccessMessage("Место хранения добавлено.", "messageStorageList");
        });
    },

    OnSuccessRussianBankAccountEdit: function (ajaxContext) {
        HideModal();
        RefreshGrid("gridRussianBankAccounts", function () {
            ShowSuccessMessage('Сохранено.', 'messageRussianBankAccountList');
        });
    },

    OnSuccessForeignBankAccountEdit: function (ajaxContext) {
        HideModal();
        RefreshGrid("gridForeignBankAccounts", function () {
            ShowSuccessMessage('Сохранено.', 'messageForeignBankAccountList');
        });
    }
};﻿var AccountOrganization_List_AccountOrganizationGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridAccountOrganization table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".accountOrganizationId").text();
                $(this).find("a.ShortName").attr("href", "/AccountOrganization/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
}; ﻿var AccountOrganization_List = {
    Init: function () {
        $('#btnCreateAccountOrganization').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/AccountOrganization/Create",
                success: function (result) {
                    $('#economicAgentEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#economicAgentEdit"));
                    ShowModal("economicAgentEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationList");
                }
            });
        });

        $('#gridAccountOrganization .delete_link').live('click', function () {
            var accountId = $(this).parent('td').parent('tr').find('.accountOrganizationId').text();
                        
            if (confirm("Вы уверены?")) {
                StartGridProgress($(this).closest(".grid"));
                
                $.ajax({
                    type: "POST",
                    url: "/AccountOrganization/Delete",
                    data: { accountOrganizationId: accountId },
                    success: function (result) {
                        RefreshGrid("gridAccountOrganization", function () {
                            ShowSuccessMessage("Собственная организация удалена.", "messageAccountOrganizationList");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationList");
                    }
                });
            }
        });
    },

     OnSuccessAccountOrganizationEdit:function(ajaxContext) {
            RefreshGrid("gridAccountOrganization", function () {
                HideModal();
                ShowSuccessMessage("Организация добавлена.", "messageAccountOrganizationList");
            });
        },

        OnSuccessEconomicAgentTypeSelect:function(ajaxContext) {
            HideModal(function () {
                $("#economicAgentEdit").html(ajaxContext);
                $.validator.unobtrusive.parse($("#economicAgentEdit"));
                ShowModal("economicAgentEdit");
            });
        },
  };﻿var AccountOrganization_SelectGrid = {
    Init: function () {
        $(document).ready(function () {
            // Действия после выбора организации из грида (ссылка "Выбрать")
            $(".linkAccountOrganizationSelect").click(function () {
                var accountOrganizationId = $(this).parent("td").parent("tr").find(".accountOrganizationId").text();
                var accountOrganizationShortName = $(this).parent("td").parent("tr").find(".accountOrganizationShortName").text();
                OnAccountOrganizationSelectLinkClick(accountOrganizationId, accountOrganizationShortName);
            });
        });
     }
};﻿var AccountOrganization_StorageGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridStorage table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#gridStorage .delete_link").click(function () {
                if (confirm('Вы уверены?')) {
                    var storage_id = $(this).parent("td").parent("tr").find(".Id").text();
                    var accountOrganizationId = $("#AccountOrganizationId").val();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/AccountOrganization/DeleteStorage/",
                        data: { storageId: storage_id, accountOrganizationId: accountOrganizationId },
                        success: function () {
                            RefreshGrid("gridStorage", function () {
                                ShowSuccessMessage("Место хранения удалено.", "messageStorageList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageList");
                        }
                    });
                };
            });            
        });
    }
};﻿var AccountOrganization_StorageSelectList = {
    Init: function () {
        $(document).ready(function () {
            DisableButton("btnSaveLinkedStorage");

            $('#StorageId').change(function () {
                if ($('#StorageId').val() == "") {
                    DisableButton("btnSaveLinkedStorage");
                }
                else {
                    EnableButton("btnSaveLinkedStorage");
                }
            });
        });
    },

    OnFailStorageAdd: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageSelectStorage");
    }
};﻿var Article_AddRowsByList = {
    Init: function () {
        $(document).ready(function () {
            $("#ArticleGroup").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ArticleGroup/SelectArticleGroup/",
                    success: function (result) {
                        $('#articleGroupFilterSelector').hide().html(result);
                        ShowModal("articleGroupFilterSelector");
                        $('#articleGroupFilterSelector .attention').hide();
                        $("#articleGroupFilterSelector").css("top", "50px");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $("#articleGroupFilterSelector .tree_node_title").live('click', function () {
                var articleGroupId = $(this).next("input.value").val();
                $("#ArticleGroup").attr("selected_id", articleGroupId);
                $("#ArticleGroup").text($(this).text());
                HideModal();
            });

            $("#btnBack").live('click', function () {
                window.location = $('#BackURL').val();
            });
        });
    }
};
﻿var Article_Edit = {
    Init: function () {
        $(document).ready(function () {
            $('#IsSalaryPercentFromGroup').bind("modify", function () {
                UpdateButtonAvailability("SalaryPercent", $("#IsSalaryPercentFromGroup").val() != "1");
                if ($("#IsSalaryPercentFromGroup").val() == "1") {
                    $("#SalaryPercent").val($("#SalaryPercentFromGroup").val());
                } else {
                    $("#SalaryPercent").val("");
                    $("#SalaryPercent").focus();
                }
            });

            if ($("#PackHeight").val() > 0 || $("#PackWidth").val() > 0 || $("#PackLength").val() > 0) {
                $("#PackVolume").attr("disabled", "disabled");
            }

            SetFieldScale("#PackSize", 6, $("#MeasureUnitScale").val(), "#articleEdit", true);

            $('#IsSalaryPercentFromGroup').bind('click', function () { Article_Edit.CheckIfSalaryPercentCorrect(); });

            $('#SalaryPercent').live('change', function () { Article_Edit.CheckIfSalaryPercentCorrect(); });

            $('#FullArticleName').change(function () {
                var fullName = $('#FullArticleName').val();
                var articleId = $("#articleEdit #Id").val();
                if ($("#ShortName").val().length == 0) {
                    $("#ShortName").val($(this).val());
                }
            });

            $("#IsCurrentArticleGroupLevelCorrect").val(1);

            // Очистка сертификата товара
            $("#clearCertificate").click(function () {
                if (confirm('Вы уверены?')) {
                    $("#selectCertificate").text("Выбрать сертификат товара");
                    $("#CertificateId").val(0);
                    UpdateElementVisibility("clearCertificate", false);
                }
            });

            $("#AddCountry").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Country/Create/",
                    success: function (result) {
                        $("#countryAdd").hide().html(result);
                        $.validator.unobtrusive.parse($("#countryAdd"));
                        ShowModal("countryAdd");
                        $("#countryAdd #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                    }
                });
            });
        });

        // Обработка выбора торговой марки
        $("#trademarkSelector .select_link").live("click", function () {
            var trademarkName = $(this).parent("td").parent("tr").find(".Name").text();
            var trademarkId = $(this).parent("td").parent("tr").find(".Id").text();

            $("#selectTrademark").text(trademarkName);
            $("#TrademarkId").val(trademarkId);

            HideModal();
        });

        // Обработка выбора единицы измерения
        $("#gridMeasureUnit .measureUnit_select_link").live("click", function () {
            var measureUnitName = $(this).parent("td").parent("tr").find(".FullName").text();
            var measureUnitShortName = $(this).parent("td").parent("tr").find(".ShortName").text();
            var measureUnitId = $(this).parent("td").parent("tr").find(".Id").text();

            var measureUnitScale = $(this).parent("td").parent("tr").find(".Scale").text();
            SetFieldScale("#PackSize", 6, measureUnitScale, "#articleEdit", true);

            $("#MeasureUnitShortName").text(measureUnitShortName);
            $("#selectMeasureUnit").text(measureUnitName);
            $("#MeasureUnitId").val(measureUnitId);

            HideModal();
        });

        // Обработка выбора сертификата товара
        $("#gridArticleCertificate .articleCertificate_select_link").live("click", function () {
            var articleCertificateName = $(this).parent("td").parent("tr").find(".Name").text();
            var articleCertificateId = $(this).parent("td").parent("tr").find(".Id").text();

            $("#selectCertificate").text(articleCertificateName);
            $("#CertificateId").val(articleCertificateId);
            UpdateElementVisibility("clearCertificate", true);

            HideModal();
        });

        $("#ArticleGroupName").click(function () {
            $.ajax({
                type: "GET",
                url: "/ArticleGroup/SelectArticleGroup/",
                success: function (result) {
                    $('#articleGroupSelector').hide().html(result);
                    ShowModal("articleGroupSelector");
                    $("#articleGroupSelector").css("top", "50px");

                    Article_Edit.BindArticleGroupSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                }
            });
        });

        $("#ManufacturerName.select_link").click(function () {
            $.ajax({
                type: "GET",
                url: "/Manufacturer/SelectManufacturer/",
                success: function (result) {
                    $('#manufacturerAdd').hide().html(result);
                    $.validator.unobtrusive.parse($("#manufacturerAdd"));
                    ShowModal("manufacturerAdd");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                }
            });
        });

        // Открытие окна выбора торговой марки
        $("#selectTrademark.select_link").click(function () {
            $.ajax({
                type: "GET",
                url: "/Trademark/SelectTrademark/",
                success: function (result) {
                    $('#trademarkSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#trademarkSelector"));
                    ShowModal("trademarkSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                }
            });
        });

        // Открытие окна выбора единицы измерения
        $("#selectMeasureUnit.select_link").click(function () {
            $.ajax({
                type: "GET",
                url: "/MeasureUnit/SelectMeasureUnit/",
                success: function (result) {
                    $('#measureUnitSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#measureUnitSelector"));
                    ShowModal("measureUnitSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                }
            });
        });

        // Открытие окна выбора сертификата товара
        $("#selectCertificate.select_link").click(function () {
            $.ajax({
                type: "GET",
                url: "/ArticleCertificate/SelectArticleCertificate/",
                success: function (result) {
                    $('#articleCertificateSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleCertificateSelector"));
                    ShowModal("articleCertificateSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                }
            });
        });

        $("#PackHeight, #PackLength, #PackWidth").live("change", function () {
            var height = parseFloat($("#PackHeight").val());
            var width = parseFloat($("#PackWidth").val());
            var length = parseFloat($("#PackLength").val());

            if ((isNaN(height) || height == 0) || (isNaN(width) || width == 0) || (isNaN(length) || length == 0)) {
                $("#PackVolume").removeAttr("disabled");
            }
            else {
                $("#PackVolume").attr("disabled", "disabled");
                var volume = height * width * length / 1000000000;

                if (volume < 0.000001) volume = 0; //если объем меньше 0.000001, то значение volume становится 1е-7 и ValueForDisplay на нем неверно срабатывает

                if (!isNaN(volume)) {
                    $("#PackVolume").val(ValueForEdit(volume));
                }
            }
        });

        //Обрабатываем выбор фабрики-изготовителя
        $("#manufacturerAdd .select").live("click", function () {
            var manufacturerId = $(this).parent("td").parent("tr").find(".Id").text();
            var manufactureName = $(this).parent("td").parent("tr").find(".ManufacturerName").text();

            $("#ManufacturerName").text(manufactureName);
            $("#ManufacturerId").val(manufacturerId);

            HideModal();
        });
    },

    OnSuccessCountrySave: function (ajaxContext) {
        HideModal();
        $.ajax({
            type: "GET",
            url: "/Country/GetList/",
            success: function (result) {
                $("#ProductionCountryId").fillSelect(result);
                $("#ProductionCountryId").val(ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
            }
        });
    },

    // обработка создания торговой марки
    OnSuccessTrademarkSave: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#selectTrademark").text(ajaxContext.Name);
                $("#TrademarkId").val(ajaxContext.Id);
            });
        });
    },

    // обработка создания единицы измерения
    OnSuccessMeasureUnitSave: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#selectMeasureUnit").text(ajaxContext.Name);

                SetFieldScale("#PackSize", 12, ajaxContext.Scale, "#articleEdit", true);

                $("#MeasureUnitId").val(ajaxContext.Id);
            });
        });
    },

    // обработка создания сертификата товара
    OnSuccessArticleCertificateSave: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#selectCertificate").text(ajaxContext.Name);
                $("#CertificateId").val(ajaxContext.Id);
                UpdateElementVisibility("clearCertificate", true);
            });
        });
    },

    OnFailArticleSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageArticleEdit");
    },

    CheckIfSalaryPercentCorrect: function () {
        var regexp = /^[0-9]{1,2}([,.][0-9]{1,2})?$/;

        if ($("#IsSalaryPercentFromGroup").val() != "1") {
            var correctValue = (regexp.test($('#SalaryPercent').val()));
            if (!correctValue) { $('#isSalaryPercentCorrect').val(1); }
            else { $('#isSalaryPercentCorrect').val(0); }
        }
        else { $('#isSalaryPercentCorrect').val(0); }
    },

    BindArticleGroupSelection: function () {
        $(".tree_node_title").bind('click', function () {
            var articleGroupId = $(this).next("input.value").val();
            var level = $(this).closest(".tree_node").attr("level");

            // товар можно добавить только в группы 2 уровня
            if (level > 1) {
                $("#ArticleGroupId").val(articleGroupId);
                $("#ArticleGroupName").text($(this).text());
                HideModal();

                $.ajax({
                    type: "GET",
                    url: "/ArticleGroup/GetArticleGroupInfo/",
                    data: { id: articleGroupId },
                    success: function (result) {
                        $("#SalaryPercentFromGroup").val(result.SalaryPercent);
                        if ($("#IsSalaryPercentFromGroup").val() == "1") {
                            $("#SalaryPercent").val(result.SalaryPercent);
                        }
                        if ($("#articleEdit #Id").val() == "0") {
                            $("#MarkupPercent").val(result.MarkupPercent);
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleEdit");
                    }
                });
            }
        });
    }
};﻿var Article_Grid = {
    Init: function () {
        $(document).ready(function () {
            $('#btnCreateArticle').click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Article/Create/",
                    success: function (result) {
                        $("#articleEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#articleEdit"));
                        ShowModal("articleEdit");
                        $("#articleEdit #number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $('.copy_link').click(function () {
                var articleId = $(this).parent("td").parent("tr").find(".Id").text();
                Article_Grid.ShowArticleDetailsForCopy(articleId);
            });

            $('.edit_link').click(function () {
                var articleId = $(this).parent("td").parent("tr").find(".Id").text();
                Article_Grid.ShowArticleForEdit(articleId);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    StartGridProgress($(this).closest(".grid"));

                    var articleId = $(this).parent("td").parent("tr").find(".Id").text();
                    Article_Grid.DeleteArticle(articleId);
                }
            });
        });
    },

    ShowArticleDetailsForCopy: function (id) {
        $.ajax({
            type: "GET",
            url: "/Article/Copy/",
            data: { articleId: id },
            success: function (result) {
                $("#articleEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#articleEdit"));
                ShowModal("articleEdit");
                $("#articleEdit #number").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
            }
        });
    },

    ShowArticleForEdit: function (id) {
        $.ajax({
            type: "GET",
            url: "/Article/Edit/",
            data: { id: id },
            success: function (result) {
                $("#articleEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#articleEdit"));
                ShowModal("articleEdit");
                $("#articleEdit #number").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
            }
        });
    },

    DeleteArticle: function (id) {
        $.ajax({
            type: "POST",
            url: "/Article/Delete/",
            data: { id: id },
            success: function (result) {
                RefreshGrid("gridArticles", function () {
                    ShowSuccessMessage("Товар удален.", "messageArticleList");
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
            }
        });
    }
};﻿var Article_List = {
    Init: function () {
        $(document).ready(function () {

            $("#ArticleGroup").live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ArticleGroup/SelectArticleGroup/",
                    success: function (result) {
                        $('#articleGroupFilterSelector').hide().html(result);
                        ShowModal("articleGroupFilterSelector");
                        $('#articleGroupFilterSelector .attention').hide();
                        $("#articleGroupFilterSelector").css("top", "50px");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $("#articleGroupFilterSelector .tree_node_title").live("click", function () {
                var articleGroupId = $(this).next("input.value").val();
                $("#ArticleGroup").attr("selected_id", articleGroupId);
                $("#ArticleGroup").text($(this).text());
                HideModal();
            });

            $("#btnCreateArticle").live("click", function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Article/Create/",
                    success: function (result) {
                        $("#articleEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#articleEdit"));
                        ShowModal("articleEdit");
                        $("#articleEdit #number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $("#gridActualArticles .edit_link, #gridObsoleteArticles .edit_link").live("click", function () {
                var articleId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/Article/Edit/",
                    data: { id : articleId },
                    success: function (result) {
                        $("#articleEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#articleEdit"));
                        ShowModal("articleEdit");
                        $("#articleEdit #number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $("#gridActualArticles .copy_link, #gridObsoleteArticles .copy_link").live("click", function () {
                var articleId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/Article/Copy/",
                    data: { articleId : articleId },
                    success: function (result) {
                        $("#articleEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#articleEdit"));
                        ShowModal("articleEdit");
                        $("#articleEdit #number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleList");
                    }
                });
            });

            $("#gridActualArticles .delete_link").live("click", function () {
                if (confirm("Вы уверены?")) {
                    var articleId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Article/Delete/",
                        data: { id : articleId },
                        success: function (result) {
                            RefreshGrid("gridActualArticles", function () { ShowSuccessMessage("Товар удален.", "messageActualArticleList"); });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageActualArticleList");
                        }
                    });
                }
            });

            $("#gridObsoleteArticles .delete_link").live("click", function () {
                if (confirm("Вы уверены?")) {
                    var articleId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Article/Delete/",
                        data: { id : articleId },
                        success: function (result) {
                            RefreshGrid("gridObsoleteArticles", function () { ShowSuccessMessage("Товар удален.", "messageObsoleteArticleList"); });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageObsoleteArticleList");
                        }
                    });
                }
            });
        });
    },

    OnSuccessSaveArticle: function (ajaxContext) {
        if (!ajaxContext.IsObsolete) {
            RefreshGrid("gridActualArticles", function () {
                RefreshGrid("gridObsoleteArticles", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageActualArticleList");
                    });
                });
            });
        }
        else {
            RefreshGrid("gridActualArticles", function () {
                RefreshGrid("gridObsoleteArticles", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageObsoleteArticleList");
                    });
                });
            });
        }
    }
}; 
﻿var Article_Selector = {
    Init: function () {
        $("#ArticleGroup").click(function () {
            $.ajax({
                type: "GET",
                url: "/ArticleGroup/SelectArticleGroup/",
                success: function (result) {
                    $('#articleGroupFilterSelector').hide().html(result);
                    ShowModal("articleGroupFilterSelector");
                    $('#articleGroupFilterSelector .attention').hide();
                    $("#articleGroupFilterSelector").css("top", "50px");

                    $("#articleGroupFilterSelector .tree_node_title").bind('click', function () {
                        var articleGroupId = $(this).next("input.value").val();
                        $("#ArticleGroup").attr("selected_id", articleGroupId);
                        $("#ArticleGroup").text($(this).text());
                        HideModal();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleSelectList");
                }
            });
        });
    }
};﻿var ArticleCertificate_ArticleCertificateGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateArticleCertificate').click(function () {
                StartButtonProgress($(this));

                var id = 0;
                ArticleCertificate_ArticleCertificateGrid.ShowArticleCertificateDetailsForEdit(id);
            });

            $('#gridArticleCertificates .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ArticleCertificate_ArticleCertificateGrid.ShowArticleCertificateDetailsForEdit(id);
            });

            $('#gridArticleCertificates .delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ArticleCertificate/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridArticleCertificates", function () {
                                ShowSuccessMessage("Сертификат товара удален.", "messageArticleCertificateList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleCertificateList");
                        }
                    });
                }
            });
        });
    },

    ShowArticleCertificateDetailsForEdit: function (id) {
        var method = IsDefaultOrEmpty(id) ? "Create" : "Edit";

        $.ajax({
            type: "GET",
            url: "/ArticleCertificate/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#articleCertificateEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#articleCertificateEdit"));
                ShowModal("articleCertificateEdit");
                $("#articleCertificateEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleCertificateList");
            }
        });
    }
};
﻿var ArticleCertificate_ArticleCertificateSelector = {
    Init: function () {
        $(document).ready(function () {
            $("#createArticleCertificate").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ArticleCertificate/Create/",
                    success: function (result) {
                        $("#articleCertificateEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#articleCertificateEdit"));
                        ShowModal("articleCertificateEdit");
                        $("#articleCertificateEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageSelectArticleCertificate");
                    }
                });
            });
        });
    }
};﻿var ArticleCertificate_Edit = {    
    OnFailArticleCertificateSave : function (ajaxContext) {        
        ShowErrorMessage(ajaxContext.responseText, "messageArticleCertificateEdit");        
    }
};
﻿var ArticleCertificate_List = {
    OnSuccessArticleCertificateSave: function () {
        HideModal();
        RefreshGrid("gridArticleCertificates", function () {
            ShowSuccessMessage("Сертификат товара сохранен.", "messageArticleCertificateList");
        });
    }
};
﻿var ArticleGroup_DetailsForEdit = {
    Init: function() {
        $(document).ready(function () {
            $("#Name").bind('blur', function () {
                if ($("#NameFor1C").val() == '') {
                    var name = $("#Name").val();
                    $("#NameFor1C").val(name);
                 }
            });
        });
    },
    OnFailArticleGroupEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageArticleGroupEdit");
    }
};
﻿var ArticleGroup_List = {
    Init: function () {
        $(document).ready(function () {
            scrollBy(50, 50);
        });

        // добавление группы товаров
        $("#btnAddToFirstLevel").live('click', function () {
            StartButtonProgress($(this));

            ShowArticleGroupDetailsForCreation(null);
        });

        $("#btnCreateSubGroup").live('click', function () {
            StartButtonProgress($(this));

            var parentId = $("#Id").val();

            ShowArticleGroupDetailsForCreation(parentId);
        });

        // выбор элемента дерева групп товаров
        $("#treeArticleGroups .tree_node_title").live('click', function () {
            var artGroup_id = $(this).next("input.value").val();
            var x = $(this).offset().left + $(this).width() + 50;
            var y = $(this).offset().top;

            StartLinkProgress($(this));

            $.ajax({
                type: "GET",
                url: "/ArticleGroup/Details/",
                data: { id: artGroup_id },
                success: function (result) {
                    $('#articleGroupDetails').hide().html(result);
                    ShowPopup("articleGroupDetails", x, y);

                    // запрет добавления в 3 уровень
                    if ($("#treeArticleGroups .tree_table input[value='" + artGroup_id + "']").closest(".tree_node").attr("level") < 2) {
                        EnableButton("btnCreateSubGroup");
                    }
                    else {
                        DisableButton("btnCreateSubGroup");
                    }
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleGroupList");

                    if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
                        scroll(0, $("#messageArticleGroupList").offset().top - 7);
                    }
                }
            });
        });

        $("#btnEditArticleGroup").live('click', function () {
            StartButtonProgress($(this));

            var artGroup_id = $("#Id").val();

            HidePopup();
            ShowArticleGroupDetailsForEdit(artGroup_id);
        });

        // получение информации о группе товаров для редактирования
        function ShowArticleGroupDetailsForEdit(artGroup_id) {
            $.ajax({
                type: "GET",
                url: "/ArticleGroup/Edit/",
                data: { id: artGroup_id },
                success: function (result) {
                    $('#articleGroupDetailsForEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleGroupDetailsForEdit"));
                    ShowModal("articleGroupDetailsForEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleGroupList");

                    if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
                        scroll(0, $("#messageArticleGroupList").offset().top - 7);
                    }
                }
            });
        }

        function ShowArticleGroupDetailsForCreation(parentGroupId) {
            HidePopup();

            $.ajax({
                type: "GET",
                url: "/ArticleGroup/Create/",
                data: { parentGroupId: parentGroupId },
                success: function (result, textStatus, XMLHttpRequest) {
                    $('#articleGroupDetailsForEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleGroupDetailsForEdit"));
                    ShowModal("articleGroupDetailsForEdit");
                    $('#articleGroupDetailsForEdit #Name').focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleGroupList");

                    if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
                        scroll(0, $("#messageArticleGroupList").offset().top - 7);
                    }
                }
            });
        }

        // удаление группы товаров
        $("#btnDeleteArticleGroup").live("click", function () {                        
            var id = $("#Id").val();

            if (confirm('Вы уверены?')) {
                StartButtonProgress($(this));
                
                $.ajax({
                    type: "POST",
                    url: "/ArticleGroup/Delete/",
                    data: { id: id },
                    success: function (result) {
                        var node = $("#treeArticleGroups .tree_table input[value='" + id + "']").closest(".tree_node");
                        var parentNode = node.parent(".tree_node_childs").prev(".tree_node");

                        node.next(".tree_node_childs").remove();
                        node.remove();

                        // если у родителя больше не осталось дочерних элементов, то удаляем экспандер
                        if (parentNode.next(".tree_node_childs").find(".tree_node").length == 0) {
                            parentNode.find(".tree_node_expander").remove();
                            parentNode.css("padding-left", ((parentNode.attr("level") - 1) * 40 + 32) + "px");
                            parentNode.addClass("selected");
                        }

                        // если в списке не осталось ни одного элемента
                        if ($("#treeArticleGroups .tree_table .tree_node").length == 0) {
                            $("#treeArticleGroups .tree_table").append("<div class='no_data_row'>нет данных</div>");
                        }

                        ShowSuccessMessage("Группа товаров удалена.", "messageArticleGroupList");
                        HidePopup();

                        if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
                            scroll(0, $("#messageArticleGroupList").offset().top - 7);
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageArticleGroupList");

                        if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
                            scroll(0, $("#messageArticleGroupList").offset().top - 7);
                        }
                    }
                });
            }
        });
    },

    OnSuccessArticleGroupEdit: function (ajaxContext) {
        HideModal();
        ShowSuccessMessage("Сохранено.", "messageArticleGroupList");

        if ($(document).scrollTop() > $("#messageArticleGroupList").offset().top) {
            scroll(0, $("#messageArticleGroupList").offset().top - 7);
        }

        if ($("#treeArticleGroups .tree_table .no_data_row").length != 0) {
            $("#treeArticleGroups .tree_table .no_data_row").remove();
        }

        // если элемент был добавлен
        if (ajaxContext.IsNewArticleGroup.toString() == 'true') {
            $("#treeArticleGroups .tree_table").find(".selected").removeClass("selected");

            // если это элемент первого уровня
            if (ajaxContext.ParentId == null) {
                $("#treeArticleGroups .tree_table").append(
                    "<div class='tree_node selected' level='1' style='padding-left: 32px'>" +
                    "<span class='tree_node_title'>" + ajaxContext.Name + "</span>" +
                    "<input type='hidden' class='value' value='" + ajaxContext.Id + "'></div>" +
                    "<div class='tree_node_childs hidden'></div>");

                scroll(0, $("#treeArticleGroups .tree_table").find(".selected").offset().top);
            }
            else {
                // поиск родительского элемента
                var parentNode = $("#treeArticleGroups .tree_table input[value='" + ajaxContext.ParentId + "']").closest(".tree_node");
                var parentLevel = parentNode.attr("level");
                var parentChilds = parentNode.next(".tree_node_childs");

                parentChilds.append(
                    "<div class='tree_node selected' level='" + (parseInt(parentLevel) + 1) + "' style='padding-left: " + (parentLevel * 40 + 32) + "px'>" +
                    "<span class='tree_node_title'>" + ajaxContext.Name + "</span>" +
                    "<input type='hidden' class='value' value='" + ajaxContext.Id + "'></div>" +
                    "<div class='tree_node_childs hidden'></div>");

                scroll(0, $("#treeArticleGroups .tree_table").find(".selected").offset().top);

                // добавление экспандера
                if (parentNode.find(".tree_node_expander").length == 0) {
                    parentNode.find(".tree_node_title").before("<span class='tree_node_expander expanded'>&#9660;</span>");
                    parentNode.css("padding-left", ((parentNode.attr("level") - 1) * 40 + 10) + "px");
                }
                // если он есть - раскрываем его
                else {
                    parentNode.find(".tree_node_expander").addClass("expanded").html("&#9660;");
                }

                parentNode.next(".tree_node_childs").removeClass("hidden");
            }
        }
        // если элемент был отредактирован
        else {
            $("#treeArticleGroups .tree_table input[value='" + ajaxContext.Id + "']").closest("div").find(".tree_node_title").text(ajaxContext.Name);
        }
    }
};﻿var ArticleGroup_Selector = {
    Init: function () {
        $(document).ready(function () {
            $(".tree_table").css("max-height", "420px").css("overflow", "auto");
        });
    }
};﻿var Bank_List_ForeignBankGrid = {
    Init: function () {
        $(document).ready(function () {
            $(".editForeignBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();

                $.ajax({
                    type: "GET",
                    url: "/Bank/EditForeignBank/",
                    data: { id: bankId },
                    success: function (result) {
                        $("#bankForeignBankEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#bankForeignBankEdit"));
                        ShowModal("bankForeignBankEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBank");
                    }
                });
            });

            $(".deleteForeignBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();
                
                if (confirm("Вы действительно хотите удалить банк?")) {
                    StartGridProgress($(this).closest(".grid"));
                    
                    $.ajax({
                        type: "GET",
                        url: "/Bank/DeleteForeignBank/",
                        data: { id: bankId },
                        success: function (result) {
                            RefreshGrid("gridForeignBank", function () {
                                ShowSuccessMessage("Банк удален.", "messageForeignBank");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBank");
                        }
                    });
                }
            });


            $("#btnCreateForeignBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Bank/AddForeignBank/",
                    data: { id: bankId },
                    success: function (result) {
                        $("#bankForeignBankEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#bankForeignBankEdit"));
                        ShowModal("bankForeignBankEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBank");
                    }
                });
            });
        });
    },

    OnSuccessForeignBankEdit: function (ajaxContext) {
        RefreshGrid("gridForeignBank", function () {
            ShowSuccessMessage("Банк сохранен.", "messageForeignBank");
            HideModal();
        });
    }
};﻿var Bank_List_RussianBankGrid = {
    Init: function () {
        $(document).ready(function () {
            $(".editRussianBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();

                $.ajax({
                    type: "GET",
                    url: "/Bank/EditRussianBank/",
                    data: { id: bankId },
                    success: function (result) {
                        $("#bankRussianBankEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#bankRussianBankEdit"));
                        ShowModal("bankRussianBankEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBank");
                    }
                });
            });

            $(".deleteRussianBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();

                if (confirm("Вы действительно хотите удалить банк?")) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "GET",
                        url: "/Bank/DeleteRussianbank/",
                        data: { id: bankId },
                        success: function (result) {
                            RefreshGrid("gridRussianBank", function () {
                                ShowSuccessMessage("Банк удален.", "messageRussianBank");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBank");
                        }
                    });
                }
            });


            $("#btnCreateRussianBank").click(function () {
                var bankId = $(this).parent("td").parent("tr").find(".Id").html();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Bank/AddRussianBank/",
                    data: { id: bankId },
                    success: function (result) {
                        $("#bankRussianBankEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#bankRussianBankEdit"));
                        ShowModal("bankRussianBankEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBank");
                    }
                });
            });
        });
    },

    OnSuccessRussianBankEdit: function (ajaxContext) {
        RefreshGrid("gridRussianBank", function () {
            ShowSuccessMessage("Банк сохранен.", "messageRussianBank");
            HideModal();
        });
    }
};﻿var ChangeOwnerWaybill_AddRowsByList = {
    Init: function () {
        $(document).ready(function () {
            Article_AddRowsByList.Init();

            Waybill_ForWaybillRowsAdditionByListGrid.actionName = "/ChangeOwnerWaybill/AddRowSimply/";
            Waybill_ForWaybillRowsAdditionByListGrid.gridId = "gridChangeOwnerWaybillRow";
            Waybill_ForWaybillRowsAdditionByListGrid.messageId = "messageChangeOwnerWaybillRowList"            
        });
    }
};
﻿var ChangeOwnerWaybill_Details = {
    Init: function () {
        $(document).ready(function () {

            $('#btnAddRowsByList').live("click", function () {
                var id = $('#Id').val();
                window.location = "/ChangeOwnerWaybill/AddRowsByList?id=" + id + GetBackUrl();
            });

            $("#btnEdit").click(function () {
                window.location = "/ChangeOwnerWaybill/Edit?id=" + $("#Id").val() + "&backURL=" + $('#currentUrl').val();
            });

            $("#btnDelete").click(function () {
                if (confirm('Вы действительно хотите удалить накладную?')) {
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/ChangeOwnerWaybill/Delete",
                        data: { id: $("#Id").val() },
                        success: function (result) {
                            window.location = "/ChangeOwnerWaybill/List";
                        },
                        error: function (XMLHttpRequest) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                        }
                    });
                }
            });

            // счет-фактура
            $('#invoicePrintingForm').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/ShowInvoicePrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#changeOwnerWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#changeOwnerWaybillPrintingForm"));
                        ShowModal("changeOwnerWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                    }
                });
            });

            $('#cashMemoPrintingForm').live('click', function () {
                var id = $('#Id').val();

                window.open("/ChangeOwnerWaybill/ShowCashMemoPrintingForm?" + "WaybillId=" + id);
            });

            // ТОРГ-12
            $('#printingFormTORG12').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/ShowTORG12PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#changeOwnerWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#changeOwnerWaybillPrintingForm"));
                        ShowModal("changeOwnerWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                    }
                });
            });

            // T-1 (TTH)
            $('#printingFormT1').live('click', function () {
                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/GetT1PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#changeOwnerWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#changeOwnerWaybillPrintingForm"));
                        ShowModal("changeOwnerWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                    }
                });
            });

            $('#printingFormAllCost').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/ShowPrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#changeOwnerWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#changeOwnerWaybillPrintingForm"));
                        ShowModal("changeOwnerWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                    }
                });
            });

            // Изменить куратора
            $("#linkChangeCurator").click(function () {
                var storageId = $("#StorageId").val();
                Waybill_Edit.ShowCuratorSelectorForm(5/*waybillTypeId*/, storageId, "", null, "messageChangeOwnerWaybillDetails");
            });

            // обработка выбора куратора
            $(".select_user").live("click", function () {
                Waybill_Details.HandlerForSelectCurator(5/*waybillTypeId*/, $(this));
            });


        }); //$(document).ready

        $("#btnBackTo").live("click", function () {
            window.location = $('#BackURL').val();
        });

        //Изменение получателя
        $("#linkChangeRecipient").live("click", function () {
            $.ajax({
                type: "GET",
                url: "/ChangeOwnerWaybill/ChangeRecipient",
                data: { id: $("#Id").val() },
                success: function (result) {
                    $('#changeOwnerWaybillChangeRecipient').hide().html(result);
                    $.validator.unobtrusive.parse($("#changeOwnerWaybillChangeRecipient"));
                    ShowModal("changeOwnerWaybillChangeRecipient");
                },
                error: function (XMLHttpRequest) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                }
            });
        });

        // подготовка к проводке
        $("#btnPrepareToAccept").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "POST",
                url: "/ChangeOwnerWaybill/PrepareToAccept",
                data: { id: $("#Id").val() },
                success: function (result) {
                    RefreshGrid("gridChangeOwnerWaybillRow", function () {
                        ChangeOwnerWaybill_Details.RefreshMainDetails(result);
                        ChangeOwnerWaybill_Details.RefreshPermissions(result);

                        ShowSuccessMessage("Накладная подготовлена к проводке.", "messageChangeOwnerWaybillDetails");
                    });
                },
                error: function (XMLHttpRequest) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                }
            });
        });

        // отмена готовности к проводке
        $("#btnCancelReadinessToAccept").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "POST",
                url: "/ChangeOwnerWaybill/CancelReadinessToAccept",
                data: { id: $("#Id").val() },
                success: function (result) {
                    RefreshGrid("gridChangeOwnerWaybillRow", function () {
                        ChangeOwnerWaybill_Details.RefreshMainDetails(result);
                        ChangeOwnerWaybill_Details.RefreshPermissions(result);

                        ShowSuccessMessage("Готовность к проводке отменена.", "messageChangeOwnerWaybillDetails");
                    });
                },
                error: function (XMLHttpRequest) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                }
            });
        });

        // проводка
        $("#btnAccept").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "POST",
                url: "/ChangeOwnerWaybill/Accept",
                data: { id: $("#Id").val() },
                success: function (result) {
                    RefreshGrid("gridChangeOwnerWaybillRow", function () {
                        ChangeOwnerWaybill_Details.RefreshMainDetails(result);
                        ChangeOwnerWaybill_Details.RefreshPermissions(result);

                        ShowSuccessMessage("Накладная проведена.", "messageChangeOwnerWaybillDetails");
                    });
                },
                error: function (XMLHttpRequest) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                }
            });
        });


        // отмена проводки
        $("#btnCancelAcceptance").live("click", function () {
            if (confirm('Вы действительно хотите отменить проводку накладной?')) {
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/ChangeOwnerWaybill/CancelAcceptance",
                    data: { id: $("#Id").val() },
                    success: function (result) {
                        RefreshGrid("gridChangeOwnerWaybillRow", function () {
                            ChangeOwnerWaybill_Details.RefreshMainDetails(result);
                            ChangeOwnerWaybill_Details.RefreshPermissions(result);

                            ShowSuccessMessage("Отмена проводки произведена.", "messageChangeOwnerWaybillDetails");
                        });
                    },
                    error: function (XMLHttpRequest) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillDetails");
                    }
                });
            }
        });
    },

    OnSuccessChangeOwnerWaybillRowEdit: function (ajaxContext) {
        if ($('#changeOwnerWaybillRowForEdit #ChangeOwnerWaybillRowId').val() != "00000000-0000-0000-0000-000000000000") {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridChangeOwnerWaybillRow", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        HideModal(function () {
                            ShowSuccessMessage("Сохранено.", "messageChangeOwnerWaybillRowList");
                        });
                    });
                });
            });
        }
        else {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridChangeOwnerWaybillRow", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        ChangeOwnerWaybill_Shared.ClearForm();
                        ShowSuccessMessage("Сохранено.", "messageChangeOwnerWaybillRowEdit");
                    });
                });
            });
        }
        ChangeOwnerWaybill_Details.RefreshMainDetails(ajaxContext);
        ChangeOwnerWaybill_Details.RefreshPermissions(ajaxContext);
    },

    // обновление основной информации о накладной и состояний кнопок
    RefreshMainDetails: function (details) {
        var mainDetails = details.MainDetails;

        $("#StateName").text(mainDetails.StateName);
        $("#PurchaseCostSum").text(mainDetails.PurchaseCostSum);
        $("#AccountingPriceSum").text(mainDetails.AccountingPriceSum);
        $("#RowCount").text(mainDetails.RowCount);
        $("#ShippingPercent").text(mainDetails.ShippingPercent);
        $("#ShippingReceiptDateString").text(mainDetails.ShippingReceiptDateString);
        $("#StorageName").text(mainDetails.StorageName);
        $("#RecipientName").text(mainDetails.RecipientName);
        $("#ValueAddedTaxString").text(mainDetails.ValueAddedTaxString);
        $("#TotalWeight").text(mainDetails.TotalWeight);
        $("#TotalVolume").text(mainDetails.TotalVolume);

        $("#AcceptedByName").text(mainDetails.AcceptedByName);
        $("#AcceptedById").val(mainDetails.AcceptedById);
        $("#AcceptanceDate").text(mainDetails.AcceptanceDate);
        $("#ChangedOwnerByName").text(mainDetails.ChangedOwnerByName);
        $("#ChangedOwnerById").val(mainDetails.ChangedOwnerById);
        $("#ChangeOwnerDate").text(mainDetails.ChangeOwnerDate);

        $("#AllowToViewAcceptedByDetails").val(mainDetails.AllowToViewAcceptedByDetails);
        $("#AllowToViewChangedOwnerByDetails").val(mainDetails.AllowToViewChangedOwnerByDetails);

        $("#AcceptedByContainer").css("display", mainDetails.AcceptedById != "" ? "inline" : "none");
        $("#ChangedOwnerByContainer").css("display", mainDetails.ChangedOwnerById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewChangedOwnerByDetails', 'ChangedOwnerByName', 'User', 'ChangedOwnerById');
    },

    OnSuccessChangeOwnerWaybillChangeRecipient: function (ajaxContext) {
        $("#mainDetailsRecipientLink").text(ajaxContext.Name);
        $("#mainDetailsRecipientLink").attr("href", "/AccountOrganization/Details?id=" + ajaxContext.Id + "&backURL=" + $("#currentUrl").val());
        HideModal(function () {
            ShowSuccessMessage("Получатель сменен.", "messageChangeOwnerWaybillDetails");
        });
    },

    RefreshPermissions: function (details) {
        var permission = details.MainDetails;

        UpdateButtonAvailability("btnPrepareToAccept", details.AllowToPrepareToAccept);
        UpdateButtonAvailability("btnCancelReadinessToAccept", details.AllowToCancelReadinessToAccept);
        UpdateButtonAvailability("btnAccept", details.AllowToAccept);
        UpdateButtonAvailability("btnCancelAcceptance", details.AllowToCancelAcceptance);
        UpdateButtonAvailability("btnEdit", details.AllowToEdit);
        UpdateButtonAvailability("btnDelete", details.AllowToDelete);
        UpdateButtonAvailability("btnAddRowsByList", details.AllowToEdit);

        UpdateElementVisibility("btnPrepareToAccept", details.IsPossibilityToPrepareToAccept);
        UpdateElementVisibility("btnCancelReadinessToAccept", details.AllowToCancelReadinessToAccept);
        UpdateElementVisibility("btnAccept", details.IsPossibilityToAccept);
        UpdateElementVisibility("btnCancelAcceptance", details.AllowToCancelAcceptance);
        UpdateElementVisibility("btnEdit", details.AllowToEdit);
        UpdateElementVisibility("btnDelete", details.AllowToDelete);

        UpdateElementVisibility("linkChangeRecipient", permission.AllowToChangeRecipient);
        UpdateElementVisibility("feature_menu_box", details.AllowToPrintForms);
        UpdateElementVisibility("btnAddRowsByList", details.AllowToEdit);

        UpdateElementVisibility("linkChangeCurator", permission.AllowToChangeCurator);
    },

    OnFailChangeOwnerWaybillChangeRecipient: function (result) {
        ShowErrorMessage(result.responseText, "messageChangeOwnerWaybillChangeRecipient");
    }
};﻿var ChangeOwnerWaybill_Details_RowGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#btnAddChangeOwnerWaybillRow").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/AddRow/",
                    data: { id: $("#Id").val() },
                    success: function (result) {
                        $('#changeOwnerWaybillRowForEdit').hide().html(result);
                        ShowModal("changeOwnerWaybillRowForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowList");
                    }
                });
            });

            $(".edit_link").click(function () {
                var rowId = $(this).parent("td").parent("tr").find(".Id").html();

                $.ajax({
                    type: "GET",
                    url: "/ChangeOwnerWaybill/EditRow/",
                    data: { id: $("#Id").val(), rowId: rowId },
                    success: function (result) {
                        $('#changeOwnerWaybillRowForEdit').hide().html(result);
                        ShowModal("changeOwnerWaybillRowForEdit");

                        if ($("#changeOwnerWaybillRowForEdit #ManualSourcesInfo").val() == "") {
                            $("#BatchLink").show();
                        }
                        else {
                            $("#ManualSourcesLink").show();
                        }

                        $("#changeOwnerWaybillRowForEdit #MovingCount").focus();
                        ChangeOwnerWaybill_Shared.CheckSaveButtonAvailability();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowList");
                    }
                });
            });

            //просмотр источников позиции накладной
            $(".source_link").click(function () {
                var WaybillRowId = $(this).parent("td").parent("tr").find(".Id").html();
                var articleName = $(this).parent("td").parent("tr").find(".ArticleName").text();
                var batchName = $(this).parent("td").parent("tr").find(".Batch").text();

                $.ajax({
                    type: "POST",
                    url: "/OutgoingWaybillRow/GetSourceWaybill/",
                    data: { type: "ChangeOwnerWaybill", id: WaybillRowId, articleName: articleName, batchName: batchName },
                    success: function (result) {
                        $("#changeOwnerWaybillSourceLink").hide().html(result);
                        ShowModal("changeOwnerWaybillSourceLink");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowList");
                    }
                });
            });

            $(".delete_link").click(function () {
                if (confirm("Вы уверены?")) {
                    var rowId = $(this).parent("td").parent("tr").find(".Id").html();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "GET",
                        url: "/ChangeOwnerWaybill/DeleteRow/",
                        data: { id: $("#Id").val(), rowId: rowId },
                        success: function (result) {
                            // грид для формы добавления товаров списком
                            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                                RefreshGrid("gridChangeOwnerWaybillRow", function () {
                                    RefreshGrid("gridArticleGroups", function () {
                                        ChangeOwnerWaybill_Details.RefreshMainDetails(result);
                                        ChangeOwnerWaybill_Details.RefreshPermissions(result);
                                        ShowSuccessMessage("Позиция удалена.", "messageChangeOwnerWaybillRowList");
                                    });              
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowList");
                        }
                    });
                }
            });
        });
    }
};﻿var ChangeOwnerWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {
            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");
            }

            $("#btnEdit").click(function () {
                window.location = "/ChangeOwnerWaybill/Edit?id=" + $("#Id").val() + "&backURL=" + $('#currentUrl').val();
            });

            //Обработчик выбора места хранения
            $("#StorageId").change(function () {
                var storageId = $(this).val();
                if (storageId != "") {
                    StartComboBoxProgress($("#SenderId"));
                    StartComboBoxProgress($("#RecipientId"));

                    $.ajax({
                        type: "POST",
                        url: "/ChangeOwnerWaybill/GetOrganizationList",
                        data: { storageId: storageId },
                        success: function (result) {
                            $("#SenderId").removeAttr("disabled");
                            $("#RecipientId").removeAttr("disabled");

                            $("#SenderId").fillSelect(result);
                            $("#RecipientId").fillSelect(result);

                            StopComboBoxProgress($("#SenderId"));
                            StopComboBoxProgress($("#RecipientId"));
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillEdit");
                            StopComboBoxProgress($("#SenderId"));
                            StopComboBoxProgress($("#RecipientId"));
                        }
                    });
                }
                else {
                    $("#SenderId").attr("disabled", "disabled");
                    $("#RecipientId").attr("disabled", "disabled");
                }
            });

            $("#CuratorName").click(function () {
                var storageId = $("#StorageId").val();
                if (storageId != "") {
                    Waybill_Edit.ShowCuratorSelectorForm(5/*WaybillTypeId*/, storageId, "", $(this), "messageChangeOwnerWaybillEdit");
                }
                else {
                    $("#StorageId").ValidationError("Укажите место хранения.");
                }
            });
        });

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });
    },

    OnSuccessChangeOwnerWaybillEdit: function (ajaxContext) {
        window.location = "/ChangeOwnerWaybill/Details?id=" + ajaxContext + "&backURL=" + $("#BackURL").val();
    },

    OnFailChangeOwnerWaybillEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageChangeOwnerWaybillEdit");
    }
};﻿var ChangeOwnerWaybill_List_AcceptedGrid = {
    Init: function () {
        $(document).ready(function () {

            var currentUrl = $("#currentUrl").val();
            $("#gridChangeOwnerWaybillAcceptedWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ChangeOwnerWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".SenderId").text();
                $(this).find("a.SenderName").attr("href", "/AccountOrganization/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var ChangeOwnerWaybill_List_NewGrid = {
    Init: function () {
        $(document).ready(function () {

            var currentUrl = $("#currentUrl").val();
            $("#gridChangeOwnerWaybillNewWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ChangeOwnerWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".SenderId").text();
                $(this).find("a.SenderName").attr("href", "/AccountOrganization/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });

            //Добавление накладной
            $("#btnCreateChangeOwnerWaybill").click(function () {
                window.location = "/ChangeOwnerWaybill/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var ChangeOwnerWaybill_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            SetEntityDetailsLink(null, 'SenderName', 'AccountOrganization', 'SenderId');

            SetEntityDetailsLink(null, 'mainDetailsRecipientLink', 'AccountOrganization', 'RecipientId');

            SetEntityDetailsLink(null, 'RecipientStorageName', 'Storage', 'StorageId');

            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewChangedOwnerByDetails', 'ChangedOwnerByName', 'User', 'ChangedOwnerById');

            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');
        });
    }
};﻿var ChangeOwnerWaybill_RowForEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#MovingCount", 12, $("#MeasureUnitScale").val(), "#changeOwnerWaybillRowForEdit", true);
        });

        $("span#ArticleName.select_link").bind('click', function () {
            var storageId = $('#StorageId').val();
            var senderId = $('#SenderId').val();

            $.ajax({
                type: "GET",
                url: "/Article/SelectArticleFromStorage/",
                data: { storageId: storageId, senderId: senderId },
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    ChangeOwnerWaybill_RowForEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowEdit");
                }
            });
        });

        if ($("#changeOwnerWaybillRowForEdit #ManualSourcesInfo").val() != "") {
            $("#changeOwnerWaybillRowForEdit #MovingCount").disableInput();
        }

        $("#BatchLink.select_link").click(function () {
            var currentArticleBatchId = null;
            if ($("#changeOwnerWaybillRowForEdit #CurrentReceiptWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                currentArticleBatchId = $("#changeOwnerWaybillRowForEdit #CurrentReceiptWaybillRowId").val();
            }
            ChangeOwnerWaybill_RowForEdit.SelectArticleBatch(currentArticleBatchId);
        });

        $("#ManualSourcesLink.select_link").click(function () {
            ChangeOwnerWaybill_RowForEdit.SelectSourceWaybillRows();
        });

        $("#MovingCount").bind("keyup change paste cut", function () {
            ChangeOwnerWaybill_RowForEdit.UpdateValueAddedTaxSum();
            ChangeOwnerWaybill_Shared.CheckSaveButtonAvailability();
        });

        // При изменении ставки НДС
        $("#changeOwnerWaybillRowForEdit #ValueAddedTaxId").live("change", function () {
            ChangeOwnerWaybill_RowForEdit.UpdateValueAddedTaxSum();
        });
    },

    OnFailChangeOwnerWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageChangeOwnerWaybillRowEdit");
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live('click', function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());

            if (IsTrue($("#ArticleSelector, #SelectSources").attr('checked'))) {
                HideModal(function () { ChangeOwnerWaybill_RowForEdit.SelectSourceWaybillRows(); });
            }
            else {
                HideModal(function () {                    
                    ChangeOwnerWaybill_RowForEdit.SelectArticleBatch();
                });
            }
        });
    },

    BindArticleBatchSelection: function () {
        $("#gridSelectArticleBatch .articleBatch_select_link").die("click");
        $("#gridSelectArticleBatch .articleBatch_select_link").live("click", function () {
            var availableToReserveCount = $(this).parent("td").parent("tr").find(".AvailableToReserveCount").text().replaceAll(' ', '');

            $("#changeOwnerWaybillRowForEdit #BatchName").text($(this).parent("td").parent("tr").find(".batchName").text());

            var purchaseCostCell = $(this).parent("td").parent("tr").find(".purchaseCost");

            $("#changeOwnerWaybillRowForEdit #PurchaseCost").text(purchaseCostCell.length ? purchaseCostCell.text() : "---");
            $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromStorageCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromStorageCount").text());
            $("#changeOwnerWaybillRowForEdit #AvailableToReserveCount").text(availableToReserveCount);
            $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromPendingCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromPendingCount").text());

            $("#changeOwnerWaybillRowForEdit #AccountingPrice").text($(this).closest("#articleBatchSelector").find("#RecipientAccountingPrice").text());
            $("#changeOwnerWaybillRowForEdit #AccountingPriceValue").val($(this).closest("#articleBatchSelector").find("#RecipientAccountingPriceValue").val());

            $("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val($(this).parent("td").parent("tr").find(".ReceiptWaybillRowId").text());

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#MovingCount", 12, measureUnitScale, "#changeOwnerWaybillRowForEdit", true);

            $("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val($(this).findCell(".ReceiptWaybillRowId").text());

            $("#changeOwnerWaybillRowForEdit #ManualSourcesInfo").val("");

            HideModal(function () {
                $("#BatchLink").show();
                $("#ManualSourcesLink").hide();

                $("#changeOwnerWaybillRowForEdit #MovingCount").enableInput().val("").focus().removeAttr("disabled");
                ChangeOwnerWaybill_RowForEdit.UpdateValueAddedTaxSum();
            });
        });
    },

    BindManualSourcesSelection: function () {
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").die("click");
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "GET",
                url: "/ChangeOwnerWaybill/GetRowInfo/",
                data: { waybillId: $("#Id").val(),
                    batchId: $("#sourceWaybillRowSelector #SelectedBatchId").val()
                },
                success: function (result) {
                    $("#ManualSourcesInfo").val($("#sourceWaybillRowSelector #SelectedSources").val());

                    var movingCount = 0;
                    var selectedSourcesInfo = $("#ManualSourcesInfo").val().split(";");
                    $.each(selectedSourcesInfo, function (i, val) {
                        var fields = val.split("_");
                        var count = TryGetDecimal(fields[1]);

                        if (!isNaN(count)) {
                            movingCount += count;
                        }
                    });
                    
                    $("#changeOwnerWaybillRowForEdit #MovingCount").disableInput().val(ValueForEdit(movingCount));
                    $("#BatchLink").hide();
                    $("#ManualSourcesLink").show();
                    $("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val($("#SelectedBatchId").val());
                    $("#changeOwnerWaybillRowForEdit #BatchName").text($("#SelectedBatchName").val());

                    ChangeOwnerWaybill_Shared.CheckSaveButtonAvailability();

                    $("#changeOwnerWaybillRowForEdit #PurchaseCost").text(result.PurchaseCost);
                    $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromStorageCount").text(result.AvailableToReserveFromStorageCount);
                    $("#changeOwnerWaybillRowForEdit #AvailableToReserveCount").text(result.AvailableToReserveCount);
                    $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromPendingCount").text(result.AvailableToReserveFromPendingCount);

                    $("#changeOwnerWaybillRowForEdit #AccountingPrice").text(result.AccountingPriceString);
                    $("#changeOwnerWaybillRowForEdit #AccountingPriceValue").val(result.AccountingPriceValue);

                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageOutgoingWaybillRow");
                }
            });
        });
    },

    SelectArticleBatch: function (articleBatchToExcludeId) {
        var storageId = $("#StorageId").val();
        var senderId = $('#SenderId').val();

        $.ajax({
            type: "GET",
            url: "/Article/SelectArticleBatch/",
            data: { articleId: $("#ArticleId").val(), senderStorageId: storageId, senderId: senderId,
                recipientStorageId: storageId, date: $("#ChangeOwnerWaybillDate").val(), articleBatchToExcludeId: articleBatchToExcludeId
            },
            success: function (result) {
                $('#articleBatchSelector').hide().html(result);
                $.validator.unobtrusive.parse($("#articleBatchSelector"));
                ShowModal("articleBatchSelector");

                var availableToReserveCount = 0;

                $("#articleBatchSelector .AvailableToReserveCount").each(function () {
                    availableToReserveCount += parseFloat($(this).text().replaceAll(' ', ''));
                });

                $("#articleBatchSelector #AvailableToMoveTotalCount").text(availableToReserveCount);

                ChangeOwnerWaybill_RowForEdit.BindArticleBatchSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                if (IsDefaultOrEmpty($("#changeOwnerWaybillRowForEdit #CurrentReceiptWaybillRowId").val())) {
                    ChangeOwnerWaybill_Shared.ClearForm();
                }
                ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowEdit");
            }
        });
    },

    SelectSourceWaybillRows: function () {
        $.ajax({
            type: "GET",
            url: "/OutgoingWaybillRow/GetAvailableToReserveWaybillRows/",
            data: { type: "ChangeOwnerWaybill",
                articleId: $("#changeOwnerWaybillRowForEdit #ArticleId").val(),
                storageId: $("#changeOwnerWaybillRowForEdit #StorageId").val(),
                organizationId: $("#changeOwnerWaybillRowForEdit #SenderId").val(),
                selectedSourcesInfo: $("#ManualSourcesInfo").val(),
                waybillRowId: $("#changeOwnerWaybillRowForEdit #ChangeOwnerWaybillRowId").val()
            },
            success: function (result) {
                $('#sourceWaybillRowSelector').hide().html(result);

                var selectedBatchId = $("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val();

                if (selectedBatchId != "00000000-0000-0000-0000-000000000000" && $("#ManualSourcesInfo").val() != "") {
                    $("#SelectedBatchId").val($("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val());
                    $("#SelectedBatchName").val($("#changeOwnerWaybillRowForEdit #BatchName").text());
                }

                var selectedBatch = $("#SelectedBatchId").val();
                OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(selectedBatch);

                $.validator.unobtrusive.parse($("#sourceWaybillRowSelector"));
                ShowModal("sourceWaybillRowSelector");
                                
                ChangeOwnerWaybill_RowForEdit.BindManualSourcesSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageChangeOwnerWaybillRowEdit");
            }
        });
    },

    // Перерасчет суммы НДС по позиции
    UpdateValueAddedTaxSum: function () {
        var sum = TryGetDecimal($("#changeOwnerWaybillRowForEdit #AccountingPriceValue").val());
        var count = TryGetDecimal($("#changeOwnerWaybillRowForEdit #MovingCount").val());
        var vatPercent = TryGetDecimal($("#changeOwnerWaybillRowForEdit #ValueAddedTaxId option:selected").attr("param"));
        var vatSum = CalculateVatSum(sum * count, vatPercent);

        if (!isNaN(vatSum)) {
            $("#changeOwnerWaybillRowForEdit #ValueAddedTaxSum").text(ValueForDisplay(vatSum, 2));
        } else {
            $("#changeOwnerWaybillRowForEdit #ValueAddedTaxSum").text("0");
        }
    }

};﻿var ChangeOwnerWaybill_Shared = {
    ClearForm: function () {

        $("#ArticleName").text("Выберите товар");
        $("#ArticleId").val("");
        $("#changeOwnerWaybillRowForEdit #BatchName").text("не выбрана");
        $("#changeOwnerWaybillRowForEdit #PurchaseCost").text("---");
        $("#changeOwnerWaybillRowForEdit #AccountingPrice").text("---");
        $("#changeOwnerWaybillRowForEdit #AccountingPriceValue").val("");
        $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromStorageCount").text("---");
        $("#changeOwnerWaybillRowForEdit #AvailableToReserveCount").text("---");
        $("#changeOwnerWaybillRowForEdit #AvailableToReserveFromPendingCount").text("---");
        $("#changeOwnerWaybillRowForEdit #ReceiptWaybillRowId").val("00000000-0000-0000-0000-000000000000");
        $("#changeOwnerWaybillRowForEdit #MeasureUnitName").text("");

        $("#changeOwnerWaybillRowForEdit #MovingCount").val("");
        $("#changeOwnerWaybillRowForEdit #MovingCount").removeClass("input-validation-error");
        $("#changeOwnerWaybillRowForEdit #MovingCount_validationMessage").hide();
        $("#changeOwnerWaybillRowForEdit #ManualSourcesInfo").val("");
        $("#changeOwnerWaybillRowForEdit #ManualSourcesLink").hide();

        SetFieldScale("#MovingCount", 12, 0, "#changeOwnerWaybillRowForEdit", true);
        ChangeOwnerWaybill_RowForEdit.UpdateValueAddedTaxSum();

        DisableButton("btnSaveChangeOwnerWaybillRow");
        $("#BatchLink").hide();
    },

    CheckSaveButtonAvailability: function () {
        var movingCount = TryGetDecimal($("#changeOwnerWaybillRowForEdit #MovingCount").val());
        var availableToReserveCount = TryGetDecimal($("#changeOwnerWaybillRowForEdit #AvailableToReserveCount").text().replaceAll(' ', ''));

        var manualSourcesInfo = $("#ManualSourcesInfo").val();
        if (((manualSourcesInfo != "" && manualSourcesInfo != undefined) || (!isNaN(movingCount) && !isNaN(availableToReserveCount) && (movingCount <= availableToReserveCount))) && (movingCount > 0)) {
            EnableButton("btnSaveChangeOwnerWaybillRow");
        }
        else {
            DisableButton("btnSaveChangeOwnerWaybillRow");
        }
    }
};﻿var Client_ClientOrganizationGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridClientOrganization table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".ClientOrganizationId").text();
                $(this).find("a.ShortName").attr("href", "/ClientOrganization/Details?id=" + id + GetBackUrl());
            });

            $('#btnAddOrganization').click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClientOrganization/",
                    data: { clientId: $("#Id").val(), mode: "excludeclient" },
                    success: function (result) {
                        $("#contractorOrganizationSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#contractorOrganizationSelector"));
                        ShowModal("contractorOrganizationSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationList");
                    }
                });
            });
        });
    }
};﻿var Client_ClientSalesGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridClientSales table.grid_table tr").each(function (i, el) {
                var saleId = $(this).find(".SaleId").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?Id=" + saleId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?Id=" + dealId + GetBackUrl());

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?Id=" + storageId + GetBackUrl());
            });

            //Новая реализация товаров
            $("#btnCreateSaleWaybill").click(function () {
                window.location = "/ExpenditureWaybill/Create?clientId=" + $("#Id").val() + GetBackUrl();
            });
        });
    }
};﻿var Client_DealGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridClientDeal table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

                var clientOrgId = $(this).find(".ClientOrganizationId").text();
                $(this).find("a.ClientOrganizationName").attr("href", "/ClientOrganization/Details?id=" + clientOrgId + GetBackUrl());

                var accountOrgId = $(this).find(".AccountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrgId + GetBackUrl());
            });

            $('#btnCreateDeal').click(function () {
                window.location = "/Deal/Create?ClientId=" + $('#Id').val() + GetBackUrl();
            });
        });
    }
};﻿var Client_Details_DealInitialBalanceCorrectionGrid = {
    Init: function () {
        $(document).ready(function () {

            DealPaymentDocument_DealInitialBalanceCorrection_Grid.Init("gridDealInitialBalanceCorrection");

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionEdit").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealInitialBalanceCorrection/SelectDestinationDocumentsForDealCreditInitialBalanceCorrectionRedistribution",
                    data: {
                        dealCreditInitialBalanceCorrectionId: correctionId,
                        destinationDocumentSelectorControllerName: "Client",
                        destinationDocumentSelectorActionName: "SaveDealCreditInitialBalanceCorrection"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution"));
                        ShowModal("destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealCreditInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Client/DeleteDealCreditInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridClientSales", function () {
                                        Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealDebitInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Client/DeleteDealDebitInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridClientSales", function () {
                                        Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealCreditInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Client/CreateDealCreditInitialBalanceCorrection",
                    data: { clientId: $("#Id").val() },
                    success: function (result) {
                        $("#dealCreditInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealCreditInitialBalanceCorrectionEdit"));
                        ShowModal("dealCreditInitialBalanceCorrectionEdit");
                        $("#dealCreditInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealDebitInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Client/CreateDealDebitInitialBalanceCorrection",
                    data: { clientId: $("#Id").val() },
                    success: function (result) {
                        $("#dealDebitInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealDebitInitialBalanceCorrectionEdit"));
                        ShowModal("dealDebitInitialBalanceCorrectionEdit");
                        $("#dealDebitInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });
        });
    }
}; ﻿var Client_Details_DealPaymentGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridDealPayment table.grid_table tr").each(function () {
                var id = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + id + GetBackUrl());
            });

            // добавление оплаты
            $("#gridDealPayment #btnCreateDealPaymentFromClient").click(function () {
                var clientId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Client/CreateDealPaymentFromClient",
                    data: { clientId: clientId },
                    success: function (result) {
                        $("#dealPaymentFromClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentFromClientEdit"));
                        ShowModal("dealPaymentFromClientEdit");
                        $("#dealPaymentFromClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment #btnCreateDealPaymentToClient").click(function () {
                var clientId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Client/CreateDealPaymentToClient",
                    data: { clientId: clientId },
                    success: function (result) {
                        $("#dealPaymentToClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentToClientEdit"));
                        ShowModal("dealPaymentToClientEdit");
                        $("#dealPaymentToClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentFromClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentToClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentToClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Client/DeleteDealPaymentFromClient",
                        data: { paymentId: paymentId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridClientSales", function () {
                                        Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentToClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Client/DeleteDealPaymentToClient",
                        data: { paymentId: paymentId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridClientSales", function () {
                                        Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentFromClientEdit").click(function () {
                var paymentId = $(this).findCell(".PaymentId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealPayment/SelectDestinationDocumentsForDealPaymentFromClientRedistribution",
                    data: { dealPaymentFromClientId: paymentId,
                        destinationDocumentSelectorControllerName: "Client",
                        destinationDocumentSelectorActionName: "SaveDealPaymentFromClient"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealPaymentFromClientDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealPaymentFromClientDistribution"));
                        ShowModal("destinationDocumentSelectorForDealPaymentFromClientDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });
        });
    }
}; ﻿var Client_Details = {
    Init: function () {
        $(document).ready(function () {
            // Редактирование клиента
            $('#btnEdit').click(function () {
                window.location = "/Client/Edit?id=" + $('#Id').val() + GetBackUrl();
            });

            // Возврат на прежнюю страницу
            $('#btnBack').click(function () {
                window.location = $('#BackURL').val();
            });

            // Удалить клиента
            $("#btnDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/Client/Delete/",
                        data: { clientId: $("#Id").val() },
                        success: function () {
                            window.location = $("#BackURL").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
                        }
                    });
                }
            });

            $(".yes_no_toggle").live("click", function () {
                var toggle = $(this);
                if ($(this).next("input").attr("id") == "IsBlockedManually") {
                    var isBlockedManually = $(this).next("input").val();
                    $.ajax({
                        type: "POST",
                        url: "/Client/SetClientBlockingValue/",
                        data: { id: $("#Id").val(), isBlockedManually: isBlockedManually },
                        success: function (result) {
                            ShowSuccessMessage(isBlockedManually == 1 ?
                                "Клиент «" + $("#Name").text() + "» заблокирован." :
                                "Ручная блокировка клиента «" + $("#Name").text() + "» снята.",
                                "messageClientEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ChangeYesNoToggleValue(toggle);
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
                        }
                    });
                }
            });

            $(".removeClientOrganization").live("click", function () {
                if (confirm('Вы уверены?')) {
                    var clientOrganizationId = $(this).parent("td").parent("tr").find(".ClientOrganizationId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Client/RemoveClientOrganization/",
                        data: { clientId: $("#Id").val(), clientOrganizationId: clientOrganizationId },
                        success: function (result) {
                            RefreshGrid("gridClientOrganization", function () {
                                ShowSuccessMessage("Организация удалена из списка.", "messageClientOrganizationList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationList");
                        }
                    });
                }
            });

            // Вызов окна параметров печатной формы кнопкой
            $('#btnDivergenceActPrintingForm').click(function () {
                StartButtonProgress($(this));
                Client_Details.OnShowDivergenceActPrintingFormSettings();
            });

            // Вызов окна параметров печатной формы ссылкой
            $('#divergenceActPrintingForm').click(function () {
                Client_Details.OnShowDivergenceActPrintingFormSettings();
            });
        });
    },

    OnShowDivergenceActPrintingFormSettings: function () {
        var id = $('#Id').val();
        $.ajax({
            type: "GET",
            url: "/Report/Report0006PrintingFormSettings/",
            data: { clientId: id, clientOrganizationId: "" },
            success: function (result) {
                $('#report0006PrintingFormSettings').hide().html(result);
                $.validator.unobtrusive.parse($("#report0006PrintingFormSettings"));
                ShowModal("report0006PrintingFormSettings");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
            }
        });
    },
    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора организаций контрагента
    OnContractorOrganizationSelectLinkClick: function (organizationId, organizationShortName) {
        var clientId = $("#Id").val();
        $.ajax({
            type: "POST",
            url: "/Client/AddClientOrganization/",
            data: { clientId: clientId, organizationId: organizationId },
            success: function (result) {
                RefreshGrid("gridClientOrganization", function () {
                    ShowSuccessMessage("Организация добавлена в список.", "messageClientOrganizationList");
                    HideModal();
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageOrganizationSelectList");
            }
        });
    },

    // после успешного создания новой организации и добавления ее клиенту
    OnSuccessOrganizationEdit: function (result) {
        RefreshGrid("gridClientOrganization", function () {
            HideModal(function () {
                HideModal();
                ShowSuccessMessage("Организация создана и добавлена в список организаций клиента.", "messageClientOrganizationList");
            });
        });
    },

    OnSuccessEconomicAgentTypeSelect: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#economicAgentEdit").html(ajaxContext);
                $.validator.unobtrusive.parse($("#economicAgentEdit"));
                ShowModal("economicAgentEdit");
            });
        });
    },

    OnSuccessDealPaymentFromClientSave: function (ajaxContext) {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridClientSales", function () {
                    Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                    HideModal(function () {
                        HideModal(function () {
                            ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealPaymentToClientSave: function (ajaxContext) {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridClientSales", function () {
                    Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                    HideModal(function () {
                        ShowSuccessMessage("Возврат оплаты сохранен.", "messageDealPaymentList");
                    });
                });
            });
        });
    },

    OnSuccessDealCreditInitialBalanceCorrectionSave: function (ajaxContext) {
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridClientSales", function () {
                    HideModal(function () {
                        HideModal(function () {
                            Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                            ShowSuccessMessage("Кредитовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealDebitInitialBalanceCorrectionSave: function (ajaxContext) {
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridClientSales", function () {
                    HideModal(function () {
                        Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                        ShowSuccessMessage("Дебетовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                    });
                });
            });
        });
    },

    OnDealPaymentFromClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentFromClient"));

            $.ajax({
                type: "POST",
                url: "/Client/DeleteDealPaymentFromClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridClientSales", function () {
                                HideModal(function () {
                                    Client_Details.RefreshMainDetails(result.MainDetails);
                                    ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientDetails");
                }
            });
        }
    },

    OnDealPaymentToClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentToClient"));

            $.ajax({
                type: "POST",
                url: "/Client/DeleteDealPaymentToClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridClientSales", function () {
                                HideModal(function () {
                                    Client_Details.RefreshMainDetails(result.MainDetails);
                                    ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientDetails");
                }
            });
        }
    },

    OnDealDebitInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealDebitInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/Client/DeleteDealDebitInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridClientSales", function () {
                                HideModal(function () {
                                    Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealDebitInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnDealCreditInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealCreditInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/Client/DeleteDealCreditInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridClientSales", function () {
                                HideModal(function () {
                                    Client_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealCreditInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    RefreshMainDetails: function (details) {
        $("#PaymentSum").text(details.PaymentSum);
        $("#Balance").text(details.Balance);
        $("#InitialBalance").text(details.InitialBalance);
    }
};﻿var Client_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();
        });

        $('#btnCancel').live('click', function () {
            window.location = $('#BackURL').val();
        });

        $('#AddRegion').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ClientRegion/Create",
                success: function (result) {
                    $('#regionEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#regionEdit"));
                    ShowModal("regionEdit");
                    $("#regionEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
                }
            });
        });

        $('#AddServiceProgram').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ClientServiceProgram/Create",
                success: function (result) {
                    $('#clientServiceProgramEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#clientServiceProgramEdit"));
                    ShowModal("clientServiceProgramEdit");
                    $("#clientServiceProgramEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
                }
            });
        });

        $('#AddType').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ClientType/Create",
                success: function (result) {
                    $('#clientTypeEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#clientTypeEdit"));
                    ShowModal("clientTypeEdit");
                    $("#clientTypeEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
                }
            });
        });
    },

    OnSuccessClientTypeSave: function (ajaxContext) {
        $.ajax({
            type: "POST",
            url: "/Client/GetClientTypeList",
            success: function (result) {
                $('#TypeId').fillSelect(result);
                $('#TypeId').val(ajaxContext.Id);
                ShowSuccessMessage("Тип клиента добавлен.", "messageClientEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
            }
        });

        HideModal();
    },

    OnSuccessClientServiceProgramEdit: function (ajaxContext) {
        $.ajax({
            type: "POST",
            url: "/Client/GetClientServiceProgramList",
            success: function (result) {
                $('#ServiceProgramId').fillSelect(result);
                $('#ServiceProgramId').val(ajaxContext.Id);
                ShowSuccessMessage("Программа обслуживания клиента добавлена.", "messageClientEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
            }
        });

        HideModal();
    },

    OnSuccessClientRegionSave: function (ajaxContext) {
        $.ajax({
            type: "POST",
            url: "/Client/GetClientRegionList",
            success: function (result) {
                $('#RegionId').fillSelect(result);
                $('#RegionId').val(ajaxContext.Id);
                ShowSuccessMessage("Регион клиента добавлен.", "messageClientEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientEdit");
            }
        });

        HideModal();
    },

    OnFailClientSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageClientEdit");
    },

    OnSuccessClientSave: function (ajaxContext) {
        window.location = "/Client/Details?id=" + ajaxContext.Id + "&backURL=" + ajaxContext.BackURL;
    }
};﻿var Client_List_ClientGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridClient table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Client/Details?id=" + id + GetBackUrl());
            });

            $('#btnCreateClient').click(function () {
                window.location = "/Client/Create?" + GetBackUrl(true);
            });
        });
    }
};﻿var Client_ReturnFromClientGrid = {
    Init: function () {
        $(document).ready(function () {
            
            $("#gridReturnFromClient table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReturnFromClientWaybill/Details?id=" + id + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var recipientStorageId = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + recipientStorageId + GetBackUrl());

                var recipientId = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + recipientId + GetBackUrl());                                
            });

            $("#btnCreateReturnFromClientWaybill").click(function () {
                window.location = "/ReturnFromClientWaybill/Create?clientId=" + $("#Id").val() + GetBackUrl();
            });
        });
    }
};﻿var ClientContract_SelectGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridSelectClientContract table.grid_table tr").each(function (i, el) {
                var accountOrganizationId = $(this).find(".AccountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + GetBackUrl());

                var clientOrganizationId = $(this).find(".ClientOrganizationId").text();
                $(this).find("a.ClientOrganizationName").attr("href", "/ClientOrganization/Details?id=" + clientOrganizationId + GetBackUrl());
            });

            $("#clientContractSelector .linkClientContractSelect").click(function () {
                var contractName = $(this).findCell(".Name").text();
                var contractId = $(this).findCell(".Id").text();
                var accountOrganizationId = $(this).findCell(".AccountOrganizationId").text();
                var clientOrganizationId = $(this).findCell(".ClientOrganizationId").text();
                var accountOrganizationName = $(this).findCell(".AccountOrganizationName").text();
                var clientOrganizationName = $(this).findCell(".ClientOrganizationName").text();

                OnClientContractSelectLinkClick(contractName, contractId, accountOrganizationName, accountOrganizationId, clientOrganizationName, clientOrganizationId);
            });
        });
    }
};﻿var ClientContract_Selector = {
    Init: function () {
        $(document).ready(function () {
            $("#linkCreateClientContract").click(function () {
                var dealId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Deal/CreateContract",
                    data: { dealId : dealId },
                    success: function (result) {
                        $('#clientContractEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#clientContractEdit"));
                        ShowModal("clientContractEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientContractSelectList");
                    }
                });
            });
        });
    }
};﻿var ClientOrganization_Details_ClientContractGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridClientContract table.grid_table tr").each(function (i, el) {
                var accountOrganizationId = $(this).find(".AccountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + GetBackUrl());
            });

            $("#gridClientContract .linkClientContractEdit").click(function () {    
                var contractId = $(this).findCell(".Id").text();            
                $.ajax({
                    type: "GET",
                    url: "/ClientContract/EditContract",
                    data: { contractId: contractId },
                    success: function (result) {
                        $("#clientContractEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientContractEdit"));
                        ShowModal("clientContractEdit");
                        $("#clientContractEdit #Number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientContractList");
                    }
                });
            });
            
        });
    }
}; ﻿var ClientOrganization_Details_DealInitialBalanceCorrectionGrid = {
    Init: function () {
        $(document).ready(function () {

            DealPaymentDocument_DealInitialBalanceCorrection_Grid.Init("gridDealInitialBalanceCorrection");

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionEdit").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealInitialBalanceCorrection/SelectDestinationDocumentsForDealCreditInitialBalanceCorrectionRedistribution",
                    data: {
                        dealCreditInitialBalanceCorrectionId: correctionId,
                        destinationDocumentSelectorControllerName: "ClientOrganization",
                        destinationDocumentSelectorActionName: "SaveDealCreditInitialBalanceCorrection"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution"));
                        ShowModal("destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealCreditInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/DeleteDealCreditInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridSaleWaybill", function () {
                                        ClientOrganization_Details.RefreshMainDetails();
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealDebitInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/DeleteDealDebitInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridSaleWaybill", function () {
                                        ClientOrganization_Details.RefreshMainDetails();
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealCreditInitialBalanceCorrection").click(function () {
                var clientOrganizationId = $("#Id").val();

                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/CreateDealCreditInitialBalanceCorrection",
                    data: { clientOrganizationId: clientOrganizationId },
                    success: function (result) {
                        $("#dealCreditInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealCreditInitialBalanceCorrectionEdit"));
                        ShowModal("dealCreditInitialBalanceCorrectionEdit");
                        $("#dealCreditInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealDebitInitialBalanceCorrection").click(function () {
                var clientOrganizationId = $("#Id").val();

                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/CreateDealDebitInitialBalanceCorrection",
                    data: { clientOrganizationId: clientOrganizationId },
                    success: function (result) {
                        $("#dealDebitInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealDebitInitialBalanceCorrectionEdit"));
                        ShowModal("dealDebitInitialBalanceCorrectionEdit");
                        $("#dealDebitInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });
        });
    }
}; ﻿var ClientOrganization_Details_DealPaymentGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridDealPayment table.grid_table tr").each(function () {
                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());
            });

            $("#btnCreateClientOrganizationPaymentFromClient").click(function () {
                var clientOrganizationId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/CreateClientOrganizationPaymentFromClient",
                    data: { clientOrganizationId: clientOrganizationId },
                    success: function (result) {
                        $("#clientOrganizationPaymentFromClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientOrganizationPaymentFromClientEdit"));
                        ShowModal("clientOrganizationPaymentFromClientEdit");
                        $("#clientOrganizationPaymentFromClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#btnCreateDealPaymentToClient").click(function () {
                var clientOrganizationId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/CreateDealPaymentToClient",
                    data: { clientOrganizationId: clientOrganizationId },
                    success: function (result) {
                        $("#dealPaymentToClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentToClientEdit"));
                        ShowModal("dealPaymentToClientEdit");
                        $("#dealPaymentToClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentFromClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentToClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentToClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/DeleteDealPaymentFromClient",
                        data: { paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridSaleWaybill", function () {
                                        ClientOrganization_Details.RefreshMainDetails(function () {
                                            ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                        });
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentToClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/DeleteDealPaymentToClient",
                        data: { paymentId: paymentId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridSaleWaybill", function () {
                                        ClientOrganization_Details.RefreshMainDetails(function () {
                                            ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                        });
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentFromClientEdit").click(function () {
                var paymentId = $(this).findCell(".PaymentId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealPayment/SelectDestinationDocumentsForDealPaymentFromClientRedistribution",
                    data: { dealPaymentFromClientId: paymentId,
                        destinationDocumentSelectorControllerName: "ClientOrganization",
                        destinationDocumentSelectorActionName: "SaveDealPaymentFromClient"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealPaymentFromClientDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealPaymentFromClientDistribution"));
                        ShowModal("destinationDocumentSelectorForDealPaymentFromClientDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });
        });
    }
}; ﻿var ClientOrganization_Details = {
    Init: function () {
        $(document).ready(function () {
            $('#btnBack').click(function () {
                window.location = $('#BackURL').val();
            });

            $('#btnAddRussianBankAccount').live("click", function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/AddRussianBankAccount/",
                    data: { organizationId: $('#Id').val() },
                    success: function (result) {
                        $('#RussianBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#RussianBankAccountEdit"));
                        ShowModal("RussianBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            //Добавление расчетного счета в иностранном банке
            $('#btnAddForeignBankAccount').live("click", function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/AddForeignBankAccount/",
                    data: { organizationId: $('#Id').val() },
                    success: function (result) {
                        $('#ForeignBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#ForeignBankAccountEdit"));
                        ShowModal("ForeignBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $(".russianBankAccountEdit").live("click", function () {
                var bankAccId = $(this).parent("td").parent("tr").find(".bankAccountId").text();
                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/EditRussianBankAccount/",
                    data: { organizationId: $('#Id').val(), bankAccountId: bankAccId },
                    success: function (result) {
                        $('#RussianBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#RussianBankAccountEdit"));
                        ShowModal("RussianBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            //редактирование счета в иностранном банке
            $(".foreignBankAccountEdit").live("click", function () {
                var bankAccId = $(this).parent("td").parent("tr").find(".bankAccountId").text();
                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/EditForeignBankAccount/",
                    data: { organizationId: $('#Id').val(), bankAccountId: bankAccId },
                    success: function (result) {
                        $('#ForeignBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#ForeignBankAccountEdit"));
                        ShowModal("ForeignBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $(".russianBankAccountRemove").live("click", function () {
                var bankAccId = $(this).parent("td").parent("tr").find(".bankAccountId").text();

                if (confirm("Вы уверены?")) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/RemoveRussianBankAccount/",
                        data: { organizationId: $('#Id').val(), bankAccountId: bankAccId },
                        success: function (result) {
                            RefreshGrid("gridRussianBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageRussianBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                        }
                    });
                }
            });

            //Удаление счета в иностранном банке
            $(".foreignBankAccountRemove").live("click", function () {
                var bankAccId = $(this).parent("td").parent("tr").find(".bankAccountId").text();

                if (confirm("Вы уверены?")) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/RemoveForeignBankAccount/",
                        data: { organizationId: $('#Id').val(), bankAccountId: bankAccId },
                        success: function (result) {
                            RefreshGrid("gridForeignBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageForeignBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                        }
                    });
                }
            });

            // редактирование организации
            $("#btnEditClientOrganization").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ClientOrganization/Edit",
                    data: { organizationId: $('#Id').val() },
                    success: function (result) {
                        $('#organizationEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#organizationEdit"));
                        ShowModal("organizationEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationEdit");
                    }
                });
            });

            // удаление организации
            $("#btnDeleteClientOrganization").click(function () {
                if (confirm('Вы уверены?')) {
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ClientOrganization/Delete/",
                        data: { clientOrganizationId: $('#Id').val() },
                        success: function () {
                            window.location = $("#BackURL").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationEdit");
                        }
                    });
                }
            });

            // Вызов окна параметров печатной формы кнопкой
            $('#btnDivergenceActPrintingForm').click(function () {
                StartButtonProgress($(this));
                ClientOrganization_Details.OnShowDivergenceActPrintingFormSettings();
            });

            // Вызов окна параметров печатной формы ссылкой
            $('#divergenceActPrintingForm').click(function () {
                ClientOrganization_Details.OnShowDivergenceActPrintingFormSettings();
            });
        });

    },


    OnShowDivergenceActPrintingFormSettings: function () {
        var id = $('#Id').val();
        $.ajax({
            type: "GET",
            url: "/Report/Report0006PrintingFormSettings/",
            data: { clientId: "", clientOrganizationId: id },
            success: function (result) {
                $('#report0006PrintingFormSettings').hide().html(result);
                $.validator.unobtrusive.parse($("#report0006PrintingFormSettings"));
                ShowModal("report0006PrintingFormSettings");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationEdit");
            }
        });
    },

    OnSuccessRussianBankAccountAdd: function (ajaxContext) {
        RefreshGrid("gridRussianBankAccounts", function () {
            HideModal(function () {
                ShowSuccessMessage("Расчетный счет добавлен.", "messageRussianBankAccountList");
            });
        });
    },

    OnSuccessForeignBankAccountAdd: function (ajaxContext) {
        RefreshGrid("gridForeignBankAccounts", function () {
            HideModal(function () {
                ShowSuccessMessage("Расчетный счет добавлен.", "messageForeignBankAccountList");
            });
        });
    },

    OnSuccessRussianBankAccountEdit: function (ajaxContext) {
        RefreshGrid("gridRussianBankAccounts", function () {
            HideModal(function () {
                ShowSuccessMessage("Расчетный счет сохранен.", "messageRussianBankAccountList");
            });
        });
    },

    OnSuccessForeignBankAccountEdit: function (ajaxContext) {
        RefreshGrid("gridForeignBankAccounts", function () {
            HideModal(function () {
                ShowSuccessMessage("Расчетный счет сохранен.", "messageForeignBankAccountList");
            });
        });
    },

    OnSuccessClientOrganizationPaymentFromClientSave: function () {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridSaleWaybill", function () {
                    HideModal(function () {
                        HideModal(function () {
                            ClientOrganization_Details.RefreshMainDetails();
                            ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealPaymentFromClientSave: function () {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridSaleWaybill", function () {
                    HideModal(function () {
                        HideModal(function () {
                            ClientOrganization_Details.RefreshMainDetails();
                            ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealPaymentToClientSave: function () {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridSaleWaybill", function () {
                    HideModal(function () {
                        ClientOrganization_Details.RefreshMainDetails();
                        ShowSuccessMessage("Возврат оплаты сохранен.", "messageDealPaymentList");
                    });
                });
            });
        });
    },

    OnSuccessDealCreditInitialBalanceCorrectionSave: function () {
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridSaleWaybill", function () {
                    HideModal(function () {
                        HideModal(function () {
                            ClientOrganization_Details.RefreshMainDetails();
                            ShowSuccessMessage("Кредитовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealDebitInitialBalanceCorrectionSave: function () {
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridSaleWaybill", function () {
                    HideModal(function () {
                        ClientOrganization_Details.RefreshMainDetails();
                        ShowSuccessMessage("Дебетовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                    });
                });
            });
        });
    },

    OnDealPaymentFromClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentFromClient"));

            $.ajax({
                type: "POST",
                url: "/ClientOrganization/DeleteDealPaymentFromClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridSaleWaybill", function () {
                                // TODO Не так надо, а чтобы с сервера возвращались MainDetails! Сейчас же идет второй запрос. Все вызовы функции обработать
                                ClientOrganization_Details.RefreshMainDetails(function () {
                                    HideModal(function () {
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                    });
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientDetails");
                }
            });
        }
    },

    OnDealPaymentToClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentToClient"));

            $.ajax({
                type: "POST",
                url: "/ClientOrganization/DeleteDealPaymentToClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridSaleWaybill", function () {
                                ClientOrganization_Details.RefreshMainDetails(function () {
                                    HideModal(function () {
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                    });
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientDetails");
                }
            });
        }
    },

    OnDealDebitInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealDebitInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/ClientOrganization/DeleteDealDebitInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridSaleWaybill", function () {
                                HideModal(function () {
                                    ClientOrganization_Details.RefreshMainDetails();
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealDebitInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnDealCreditInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealCreditInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/ClientOrganization/DeleteDealCreditInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridSaleWaybill", function () {
                                HideModal(function () {
                                    ClientOrganization_Details.RefreshMainDetails();
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealCreditInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnSuccessContractEdit: function (ajaxContext) {
        RefreshGrid("gridClientContract", function () {
            HideModal(function () {
                ShowSuccessMessage("Договор по сделке сохранен.", "messageClientContractList");
            });
        });
    },

    RefreshMainDetails: function (onComplete) {
        $.ajax({
            type: "GET",
            url: "/ClientOrganization/ShowMainDetails",
            data: { organizationId: $('#Id').val() },
            success: function (result) {
                $('#clientOrganizationMainDetails').html(result);
                $.validator.unobtrusive.parse($("#clientOrganizationMainDetails"));
                $(".page_title_item_name").text($("#clientOrganizationMainDetails #ShortName").text());
                if (onComplete != undefined)
                    onComplete();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationEdit");
            }
        });
    },

    OnSuccessClientOrganizationEdit: function (ajaxContext) {
        ClientOrganization_Details.RefreshMainDetails(function () {
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageClientOrganizationEdit");
            });
        });
    }
};﻿var ClientOrganization_Details_SalesGrid = {
    Init: function () {
        $(document).ready(function () {
            
            $("#gridSaleWaybill table.grid_table tr").each(function (i, el) {
                var saleId = $(this).find(".SaleId").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?Id=" + saleId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?Id=" + dealId + GetBackUrl());

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?Id=" + storageId + GetBackUrl());
            });

            //Новая реализация товаров
            $("#btnCreateSaleWaybill").click(function () {
                window.location = "/ExpenditureWaybill/Create?clientOrganizationId=" + $("#Id").val() + GetBackUrl();
            });
        });
    }
};﻿var ClientRegion_ClientRegionGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateClientRegion').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ClientRegion_ClientRegionGrid.ShowClientRegionDetailsForEdit(id);
            });

            $('#gridClientRegion .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ClientRegion_ClientRegionGrid.ShowClientRegionDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ClientRegion";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridClientRegion", function () {
                                ShowSuccessMessage("Удалено.", "messageClientRegionList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientRegionList");
                        }
                    });
                }
            });
        });
    },

    ShowClientRegionDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ClientRegion";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#clientRegionEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#clientRegionEdit"));
                ShowModal("clientRegionEdit");
                $("#clientRegionEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientRegionList");
            }
        });
    }
};
﻿var ClientRegion_Edit = {
    OnBeginClientRegionSave: function () {
        StartButtonProgress($("#btnSaveClientRegion"));
    },

    OnFailClientRegionSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageClientRegionEdit");
    }
};
﻿var ClientRegion_List = {
    OnSuccessClientRegionSave: function () {
        HideModal();
        RefreshGrid("gridClientRegion", function () {
            ShowSuccessMessage("Сохранено.", "messageClientRegionList");
        });
    }
};
﻿var ClientServiceProgram_ClientServiceProgramGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateClientServiceProgram').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ClientServiceProgram_ClientServiceProgramGrid.ShowClientServiceProgramDetailsForEdit(id);
            });

            $('#gridClientServiceProgram .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ClientServiceProgram_ClientServiceProgramGrid.ShowClientServiceProgramDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ClientServiceProgram";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridClientServiceProgram", function () {
                                ShowSuccessMessage("Удалено.", "messageClientServiceProgramList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientServiceProgramList");
                        }
                    });
                }
            });
        });
    },

    ShowClientServiceProgramDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ClientServiceProgram";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#clientServiceProgramEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#clientServiceProgramEdit"));
                ShowModal("clientServiceProgramEdit");
                $("#clientServiceProgramEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientServiceProgramList");
            }
        });
    }
};
﻿var ClientServiceProgram_Edit = {
    OnBeginClientServiceProgramSave: function () {
        StartButtonProgress($("#btnSaveClientServiceProgram"));
    },

    OnFailClientServiceProgramSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageClientServiceProgramEdit");
    }
};
﻿var ClientServiceProgram_List = {
    OnSuccessClientServiceProgramSave: function () {
        HideModal();
        RefreshGrid("gridClientServiceProgram", function () {
            ShowSuccessMessage("Сохранено.", "messageClientServiceProgramList");
        });
    }
};
﻿var ClientType_ClientTypeGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateClientType').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ClientType_ClientTypeGrid.ShowClientTypeDetailsForEdit(id);
            });

            $('#gridClientType .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ClientType_ClientTypeGrid.ShowClientTypeDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ClientType";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridClientType", function () {
                                ShowSuccessMessage("Удалено.", "messageClientTypeList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageClientTypeList");
                        }
                    });
                }
            });
        });
    },

    ShowClientTypeDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ClientType";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#clientTypeEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#clientTypeEdit"));
                ShowModal("clientTypeEdit");
                $("#clientTypeEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientTypeList");
            }
        });
    }
};
﻿var ClientType_Edit = {
    OnBeginClientTypeSave: function () {
        StartButtonProgress($("#btnSaveClientType"));
    },

    OnFailClientTypeSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageClientTypeEdit");
    }
};
﻿var ClientType_List = {
    OnSuccessClientTypeSave: function () {
        HideModal();
        RefreshGrid("gridClientType", function () {
            ShowSuccessMessage("Сохранено.", "messageClientTypeList");
        });
    }
};
﻿var ContractorOrganization_Grid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridContractorOrganization table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                var typeId = $(this).find(".TypeId").text();
                var controllerName = "";

                if (typeId == "2") {
                    controllerName = "ProviderOrganization";
                }
                if (typeId == "3") {
                    controllerName = "ClientOrganization";
                }

                $(this).find("a.ShortName").attr("href", "/" + controllerName + "/Details?id=" + id + GetBackUrl());
            });
        });
    }
};﻿var ContractorOrganization_SelectGrid = {
    Init: function () {
        $(document).ready(function () {
            // Действия после выбора организации из грида (ссылка "Выбрать")
            $("#contractorOrganizationSelector .linkOrganizationSelect").click(function () {
                var organizationId = $(this).parent("td").parent("tr").find(".organizationId").text();
                var organizationShortName = $(this).parent("td").parent("tr").find(".organizationShortName").text();
                OnContractorOrganizationSelectLinkClick(organizationId, organizationShortName);
            });
        });
    }
};﻿var ContractorOrganization_Selector = {
    Init: function () {
        $(document).ready(function () {
            $("#linkAddOrganization").click(function () {
                var contractorId = $("#ContractorId").val();
                var url = "/" + $("#contractorOrganizationSelector #controllerName").val() + "/" + $("#contractorOrganizationSelector #actionName").val();

                $.ajax({
                    type: "GET",
                    url: url,
                    data: { contractorId: contractorId },
                    success: function (result) {
                        $('#economicAgentEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#economicAgentEdit"));
                        ShowModal("economicAgentEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageOrganizationSelectList");
                    }
                });
            });
        });
    }
};﻿var Country_CountryGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateCountry').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                Country_CountryGrid.ShowCountryDetailsForEdit(id);
            });

            $('#gridCountry .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                Country_CountryGrid.ShowCountryDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "Country";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridCountry", function () {
                                ShowSuccessMessage("Удалено.", "messageCountryList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageCountryList");
                        }
                    });
                }
            });
        });
    },

    ShowCountryDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "Country";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#countryEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#countryEdit"));
                ShowModal("countryEdit");
                $("#countryEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageCountryList");
            }
        });
    }
};
﻿var Country_Edit = {
    OnBeginCountrySave: function () {
        StartButtonProgress($("#btnSaveCountry"));
    },

    OnFailCountrySave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageCountryEdit");
    }
};
﻿var Country_List = {
    OnSuccessCountrySave: function () {
        HideModal();
        RefreshGrid("gridCountry", function () {
            ShowSuccessMessage("Сохранено.", "messageCountryList");
        });
    }
};
﻿var Currency_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();
            Currency_Edit.CheckEnabledCurrencyRateGrid();
        });
    },

    CheckEnabledCurrencyRateGrid: function () {
        if ($("#IsNew").val() == "True") {
            DisableButton("btnCreateCurrencyRate");
            DisableButton("btnImportRate");
            $("#currentRateGrid .page_size").attr("disabled", "disabled");
        }
        else {
            EnableButton("btnCreateCurrencyRate");
            EnableButton("btnImportRate");
            $("#currentRateGrid .page_size").removeAttr("disabled");
        }
    },

    OnSuccessCurrencyEdit: function (ajaxContext) {
        $("#gridCurrencyRate .parameters").val("CurrencyId=" + ajaxContext.Id);
        RefreshGrid("gridCurrency", function () {
            ShowSuccessMessage("Валюта сохранена.", "messageCurrencyEdit");
            $("#CurrencyId").val(ajaxContext.Id);
            $("#IsNew").val("False");
            Currency_Edit.CheckEnabledCurrencyRateGrid();
        });
    },

    OnFailCurrencyEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageCurrencyEdit");
    }
};﻿var Currency_ListGrid = {
    Init: function () {
        $(document).ready(function () {
            $(".edit, .details").click(function () {
                var currencyId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "GET",
                    url: "/Currency/Edit",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#currencyEdit").addClass("hidden");
                        $("#currencyEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyEdit"));
                        $("#currencyEdit").removeClass("hidden");
                        ShowModal("currencyEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyList");
                    }
                });
            });

            $("#btnCreateCurrency").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Currency/Create",
                    success: function (result) {
                        $('#currencyEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyEdit"));
                        ShowModal("currencyEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyList");
                    }
                });
            });

            $(".delete").click(function () {
                if (confirm("Вы уверены?")) {
                    var currencyId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "GET",
                        url: "/Currency/Delete",
                        data: { currencyId: currencyId },
                        success: function (result) {
                            RefreshGrid("gridCurrency", function () {
                                ShowSuccessMessage("Валюта удалена.", "messageCurrencyList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyList");
                        }
                    });
                }
            });
        }); // document.ready
    }
};﻿var CurrencyRate_Edit = {
    OnSuccessCurrencyRateEdit: function (ajaxContext) {
        RefreshGrid("gridCurrencyRate", function () {
            HideModal(function () {
                ShowSuccessMessage("Курс сохранен.", "messageCurrentRateGrid");
            });
        });
    },

    OnFailCurrencyRateEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageCurrencyRateEdit");
    }
};﻿var CurrencyRate_Grid = {
    Init: function () {
        $("#btnCreateCurrencyRate").click(function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "GET",
                url: "/Currency/CreateRate",
                data: { currencyId: $("#CurrencyId").val() },
                success: function (result) {
                    $('#currencyRateEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#currencyRateEdit"));
                    ShowModal("currencyRateEdit");
                    $('#currencyRateEdit #Rate').focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrentRateGrid");
                }
            });
        });

        $("#btnImportRate").click(function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "GET",
                url: "/Currency/ImportCurrencyRate",
                data: { currencyId: $("#CurrencyId").val() },
                success: function (result) {
                    $('#currencyRateEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#currencyRateEdit"));
                    ShowModal("currencyRateEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrentRateGrid");
                }
            });
        });

        // Редактирование курса валюты
        $("#gridCurrencyRate .edit").click(function () {
            var rateId = $(this).parent("td").parent("tr").find(".CurrencyRateId").text();

            $.ajax({
                type: "GET",
                url: "/Currency/EditRate",
                data: { currencyRateId: rateId },
                success: function (result) {
                    $('#currencyRateEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#currencyRateEdit"));
                    ShowModal("currencyRateEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrentRateGrid");
                }
            });
        });

        // Удаление курса валюты
        $("#gridCurrencyRate .delete").click(function () {
            if (confirm("Вы уверены?")) {
                var rateId = $(this).parent("td").parent("tr").find(".CurrencyRateId").text();

                $.ajax({
                    type: "GET",
                    url: "/Currency/DeleteRate",
                    data: { currencyRateId: rateId },
                    success: function (result) {
                        RefreshGrid("gridCurrencyRate", function () {
                            ShowSuccessMessage("Курс валюты удален.", "messageCurrentRateGrid");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrentRateGrid");
                    }
                });
            }
        });
    }
};﻿var CurrencyRate_Selector = {
    Init: function () {
        $(document).ready(function () {
            $("#currencyRateSelector .selectCurrentRate").click(function () {
                var currencyId = $("#CurrencyId").val();
                window[$("#SelectFunctionName").val()](currencyId, "", "", "", "");
            });
        });

        // Действия после выбора курса валюты из грида (ссылка "Выбрать")
        $("#currencyRateSelector .selectCurrencyRate").die("click");
        $("#currencyRateSelector .selectCurrencyRate").live("click", function () {
            var currencyId = $("#CurrencyId").val();
            var currencyRateId = $(this).parent("td").parent("tr").find(".Id").text();
            var currencyRate = $(this).parent("td").parent("tr").find(".Rate").text();
            var currencyRateForEdit = $(this).parent("td").parent("tr").find(".RateForEdit").text();
            var currencyRateStartDate = $(this).parent("td").parent("tr").find(".StartDate").text();
            window[$("#SelectFunctionName").val()](currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate);
        });

    }
};﻿var Deal_ChangeStage = {
    Init: function (ajaxContext) {
        $(document).ready(function () {
            $("#btnMoveToNextStage").click(function () {
                var dealId = $("#Id").val();
                var currentStageId = $("#dealChangeStage #CurrentStageId").val();
                StartButtonProgress($("#btnMoveToNextStage"));
                $.ajax({
                    type: "POST",
                    url: "/Deal/MoveToNextStage",
                    data: { dealId: dealId, currentStageId: currentStageId },
                    success: Deal_ChangeStage.OnSuccessChangeStage,
                    error: Deal_ChangeStage.OnFailChangeStage
                });
            });

            $("#btnMoveToPreviousStage").click(function () {
                if (confirm("Вы уверены?")) {
                    var dealId = $("#Id").val();
                    var currentStageId = $("#dealChangeStage #CurrentStageId").val();

                    StartButtonProgress($("#btnMoveToPreviousStage"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/MoveToPreviousStage",
                        data: { dealId: dealId, currentStageId: currentStageId },
                        success: Deal_ChangeStage.OnSuccessChangeStage,
                        error: Deal_ChangeStage.OnFailChangeStage
                    });
                }
            });

            $("#btnMoveToUnsuccessfulClosingStage").click(function () {
                if (confirm("Вы уверены?")) {
                    var dealId = $("#Id").val();
                    var currentStageId = $("#dealChangeStage #CurrentStageId").val();

                    StartButtonProgress($("#btnMoveToUnsuccessfulClosingStage"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/MoveToUnsuccessfulClosingStage",
                        data: { dealId: dealId, currentStageId: currentStageId },
                        success: Deal_ChangeStage.OnSuccessChangeStage,
                        error: Deal_ChangeStage.OnFailChangeStage
                    });
                }
            });

            $("#btnMoveToDecisionMakerSearchStage").click(function () {
                if (confirm("Вы уверены?")) {
                    var dealId = $("#Id").val();
                    var currentStageId = $("#dealChangeStage #CurrentStageId").val();

                    StartButtonProgress($("#btnMoveToDecisionMakerSearchStage"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/MoveToDecisionMakerSearchStage",
                        data: { dealId: dealId, currentStageId: currentStageId },
                        success: Deal_ChangeStage.OnSuccessChangeStage,
                        error: Deal_ChangeStage.OnFailChangeStage
                    });
                }
            });
        });
    },

    OnSuccessChangeStage: function (ajaxContext) {
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridDealQuota", function () {
                    Deal_Details.RefreshMainDetailsAndPermissions(ajaxContext);
                    HideModal(function () {
                        ShowSuccessMessage("Этап сделки изменен.", "messageDealEdit");
                    });
                });
            });
        });
    },

    OnFailChangeStage: function (XMLHttpRequest, textStatus, thrownError) {
        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealStageChange");
    }
};﻿var Deal_ClientContractEdit = {
    Init: function () {
        $(document).ready(function () {
            // Вывод модальной формы "Добавление собственной организации"
            $("#linkAccountOrganizationSelector").click(function () {
                if (IsTrue($("#clientContractEdit #AllowToEditOrganization").val())) {
                    $.ajax({
                        type: "GET",
                        url: "/AccountOrganization/SelectAccountOrganization",
                        success: function (result) {
                            $("#accountOrganizationSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#accountOrganizationSelector"));
                            ShowModal("accountOrganizationSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageContractEdit");
                        }
                    });
                }
            });

            // Вывод модальной формы "Добавление связанной организации"
            $("#linkClientOrganizationSelector").click(function () {
                var clientId = $('#ClientId').val();
                if (IsTrue($("#clientContractEdit #AllowToEditOrganization").val())) {
                    $.ajax({
                        type: "GET",
                        url: "/Client/SelectClientOrganization",
                        data: { clientId: clientId, mode: "includeclient" },
                        success: function (result) {
                            $("#contractorOrganizationSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#contractorOrganizationSelector"));
                            ShowModal("contractorOrganizationSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageContractEdit");
                        }
                    });
                }
            });
        });
    },
    
    OnFailContractEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageContractEdit");
    },

    OnSuccessOrganizationEdit: function (result) {
        $('#clientContractEdit #ClientOrganizationId').val(result.organizationId).ValidationValid();
        $('#clientContractEdit #ClientOrganizationName').text(result.organizationShortName);
        HideModal(function () {
            ShowSuccessMessage("Организация создана и добавлена в список организаций клиента.", "messageClientOrganizationList");
        });
    },

    OnSuccessEconomicAgentTypeSelect: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#economicAgentEdit").html(ajaxContext);
                $.validator.unobtrusive.parse($("#economicAgentEdit"));
                ShowModal("economicAgentEdit");
            });
        });
    },
    
    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора собственных организаций  (при создании договора)
    OnAccountOrganizationSelectLinkClick: function (accountOrganizationId, accountOrganizationShortName) {
        $("#clientContractEdit #AccountOrganizationId").val(accountOrganizationId).ValidationValid();
        $("#clientContractEdit #AccountOrganizationName").text(accountOrganizationShortName);
        HideModal();
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора организаций контрагента
    // Грид может быть вызван для добавления организации поставщику (как 1 уровень) и для выбора организации в договор (как 2 уровень)
    OnContractorOrganizationSelectLinkClick: function (organizationId, organizationShortName) {
        $("#clientContractEdit #ClientOrganizationId").val(organizationId).ValidationValid();
        $("#clientContractEdit #ClientOrganizationName").text(organizationShortName);
        HideModal();
    }
};﻿var Deal_Details_DealInitialBalanceCorrectionGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionEdit").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealInitialBalanceCorrection/SelectDestinationDocumentsForDealCreditInitialBalanceCorrectionRedistribution",
                    data: {
                        dealCreditInitialBalanceCorrectionId: correctionId,
                        destinationDocumentSelectorControllerName: "Deal",
                        destinationDocumentSelectorActionName: "SaveDealCreditInitialBalanceCorrection"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution"));
                        ShowModal("destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealCreditInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/DeleteDealCreditInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridDealSales", function () {
                                        Deal_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealDebitInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/DeleteDealDebitInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (ajaxContext) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                RefreshGrid("gridDealPayment", function () {
                                    RefreshGrid("gridDealSales", function () {
                                        Deal_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealCreditInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Deal/CreateDealCreditInitialBalanceCorrection",
                    data: { dealId: $("#Id").val() },
                    success: function (result) {
                        $("#dealCreditInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealCreditInitialBalanceCorrectionEdit"));
                        ShowModal("dealCreditInitialBalanceCorrectionEdit");
                        $("#dealCreditInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealDebitInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/Deal/CreateDealDebitInitialBalanceCorrection",
                    data: { dealId: $("#Id").val() },
                    success: function (result) {
                        $("#dealDebitInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealDebitInitialBalanceCorrectionEdit"));
                        ShowModal("dealDebitInitialBalanceCorrectionEdit");
                        $("#dealDebitInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });
        });
    }
}; ﻿var Deal_Details_DealPaymentGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridDealPayment #btnCreateDealPaymentFromClient").click(function () {
                var dealId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Deal/CreateDealPaymentFromClient",
                    data: { dealId: dealId },
                    success: function (result) {
                        $("#dealPaymentFromClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentFromClientEdit"));
                        ShowModal("dealPaymentFromClientEdit");
                        $("#dealPaymentFromClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment #btnCreateDealPaymentToClient").click(function () {
                var dealId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Deal/CreateDealPaymentToClient",
                    data: { dealId: dealId },
                    success: function (result) {
                        $("#dealPaymentToClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentToClientEdit"));
                        ShowModal("dealPaymentToClientEdit");
                        $("#dealPaymentToClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            // Детали платежа клиента
            $("#gridDealPayment .linkPaymentFromClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentFromClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentToClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentToClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/DeleteDealPaymentFromClient",
                        data: { paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridDealSales", function () {
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                        Deal_Details.RefreshMainDetailsAndPermissions(result);
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentToClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".PaymentId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/DeleteDealPaymentToClient",
                        data: { paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridDealPayment", function () {
                                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                    RefreshGrid("gridDealSales", function () {
                                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                        Deal_Details.RefreshMainDetailsAndPermissions(result);
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentFromClientEdit").click(function () {
                var paymentId = $(this).findCell(".PaymentId").text();
                $.ajax({
                    type: "POST",
                    url: "/DealPayment/SelectDestinationDocumentsForDealPaymentFromClientRedistribution",
                    data: { dealPaymentFromClientId: paymentId,
                        destinationDocumentSelectorControllerName: "Deal",
                        destinationDocumentSelectorActionName: "SaveDealPaymentFromClient"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealPaymentFromClientDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealPaymentFromClientDistribution"));
                        ShowModal("destinationDocumentSelectorForDealPaymentFromClientDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });
        });
    }
}; ﻿var Deal_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#btnEdit").click(function () {
                window.location = "/Deal/Edit?id=" + $("#Id").val() + GetBackUrl();
            });

            // Возврат на прежнюю страницу
            $("#btnBack").click(function () {
                window.location = $("#BackURL").val();
            });
        });

        $("#gridDealQuotaSelect .dealQuota_select_link").live('click', function () {
            var dealQuotaId = $(this).parent("td").parent("tr").find(".quotaId").text();
            Deal_Details.OnDealQuotaSelectLinkClick(dealQuotaId);
        });        
    },

    OnSuccessContractEdit: function (result) {
        Deal_Details.RefreshClientContract(result.ClientContractName, result.ClientContractId, result.AccountOrganizationName, result.AccountOrganizationId, result.ClientOrganizationName, result.ClientOrganizationId);

        HideModal(function () {
            HideModal(function () {
                ShowSuccessMessage("Договор добавлен.", "messageDealEdit");
            });
        });
    },

    OnSuccessDealPaymentFromClientSave: function (ajaxContext) {
        Deal_Details.RefreshMainDetailsAndPermissions(ajaxContext);
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridDealSales", function () {
                    HideModal(function () {
                        HideModal(function () {
                            ShowSuccessMessage("Оплата добавлена.", "messageDealPaymentList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealPaymentToClientSave: function (ajaxContext) {
        Deal_Details.RefreshMainDetailsAndPermissions(ajaxContext);
        RefreshGrid("gridDealPayment", function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                RefreshGrid("gridDealSales", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Оплата добавлена.", "messageDealPaymentList");
                    });
                });
            });
        });
    },

    OnSuccessDealCreditInitialBalanceCorrectionSave: function (ajaxContext) {
        Deal_Details.RefreshMainDetailsAndPermissions(ajaxContext);
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridDealSales", function () {
                    HideModal(function () {
                        HideModal(function () {
                            ShowSuccessMessage("Кредитовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                        });
                    });
                });
            });
        });
    },

    OnSuccessDealDebitInitialBalanceCorrectionSave: function (ajaxContext) {
        Deal_Details.RefreshMainDetailsAndPermissions(ajaxContext);
        RefreshGrid("gridDealInitialBalanceCorrection", function () {
            RefreshGrid("gridDealPayment", function () {
                RefreshGrid("gridDealSales", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Дебетовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                    });
                });
            });
        });
    },

    OnDealPaymentFromClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentFromClient"));

            $.ajax({
                type: "POST",
                url: "/Deal/DeleteDealPaymentFromClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridDealSales", function () {
                                HideModal(function () {
                                    Deal_Details.RefreshMainDetailsAndPermissions(result);
                                    ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientDetails");
                }
            });
        }
    },

    OnDealPaymentToClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentToClient"));

            $.ajax({
                type: "POST",
                url: "/Deal/DeleteDealPaymentToClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        RefreshGrid("gridDealInitialBalanceCorrection", function () {
                            RefreshGrid("gridDealSales", function () {
                                HideModal(function () {
                                    Deal_Details.RefreshMainDetailsAndPermissions(result);
                                    ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientDetails");
                }
            });
        }
    },

    OnDealDebitInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealDebitInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/Deal/DeleteDealDebitInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridDealSales", function () {
                                HideModal(function () {
                                    Deal_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealDebitInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnDealCreditInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealCreditInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/Deal/DeleteDealCreditInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (ajaxContext) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        RefreshGrid("gridDealPayment", function () {
                            RefreshGrid("gridDealSales", function () {
                                HideModal(function () {
                                    Deal_Details.RefreshMainDetails(ajaxContext.MainDetails);
                                    ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                                });
                            });
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealCreditInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    RefreshMainDetailsAndPermissions: function (result) {
        Deal_Details.RefreshMainDetails(result.MainDetails);
        Deal_Details.RefreshPermissions(result.Permissions);
    },

    RefreshMainDetails: function (details) {
        $("#Name").text(details.Name);
        $("#SaleSum").text(details.SaleSum);
        $("#ShippingPendingSaleSum").text(details.ShippingPendingSaleSum);
        $("#StageName").text(details.StageName);
        $("#PaymentSum").text(details.PaymentSum);
        $("#Balance").text(details.Balance);
        $("#StageStartDate").text(details.StageStartDate);
        $("#StageDuration").text(details.StageDuration);
        $("#MaxPaymentDelayDuration").text(details.MaxPaymentDelayDuration);
        $("#PaymentDelaySum").text(details.PaymentDelaySum);
        $("#TotalReturnedSum").text(details.TotalReturnedSum);
        $("#TotalReservedByReturnSum").text(details.TotalReservedByReturnSum);
        $("#InitialBalance").text(details.InitialBalance);

        Deal_Details.RefreshClientContract(details.ClientContractName, details.ClientContractId, details.AccountOrganizationName, details.AccountOrganizationId, details.ClientOrganizationName, details.ClientOrganizationId);

        $("#Comment").html(details.Comment);

        UpdateElementVisibility("linkAddContract", details.AllowToAddContract);
        UpdateElementVisibility("linkChangeContract", details.AllowToChangeContract);
        UpdateElementVisibility("AllowToChangeContract", details.AllowToChangeContract);
        UpdateElementVisibility("linkChangeStage", details.AllowToChangeStage);
    },

    RefreshPermissions: function (permissions) {
        UpdateButtonAvailability("btnCreateDealPaymentFromClient", permissions.AllowToCreateDealPaymentFromClient);
        UpdateElementVisibility("btnCreateDealPaymentFromClient", permissions.AllowToCreateDealPaymentFromClient);
        UpdateButtonAvailability("btnCreateDealPaymentToClient", permissions.AllowToCreateDealPaymentToClient);
        UpdateElementVisibility("btnCreateDealPaymentToClient", permissions.AllowToCreateDealPaymentToClient);
        UpdateButtonAvailability("btnCreateDealCreditInitialBalanceCorrection", permissions.AllowToCreateDealCreditInitialBalanceCorrection);
        UpdateElementVisibility("btnCreateDealCreditInitialBalanceCorrection", permissions.AllowToCreateDealCreditInitialBalanceCorrection);
        UpdateButtonAvailability("btnCreateDealDebitInitialBalanceCorrection", permissions.AllowToCreateDealDebitInitialBalanceCorrection);
        UpdateElementVisibility("btnCreateDealDebitInitialBalanceCorrection", permissions.AllowToCreateDealDebitInitialBalanceCorrection);
        UpdateButtonAvailability("btnEdit", permissions.AllowToEdit);
        UpdateElementVisibility("btnEdit", permissions.AllowToEdit);
        UpdateButtonAvailability("btnCreateExpenditureWaybill", permissions.AllowToCreateExpenditureWaybill);
        UpdateElementVisibility("btnCreateExpenditureWaybill", permissions.IsPossibilityToCreateExpenditureWaybill);
        UpdateButtonAvailability("btnCreateReturnFromClientWaybill", permissions.AllowToCreateReturnFromClientWaybill);
        UpdateElementVisibility("btnCreateReturnFromClientWaybill", permissions.IsPossibilityToCreateReturnFromClientWaybill);
        UpdateElementVisibility("btnAddQuota", permissions.AllowToAddQuota);
        UpdateElementVisibility("btnAddAllQuotas", permissions.AllowToAddQuota);
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора собственных организаций (при создании договора)
    OnAccountOrganizationSelectLinkClick: function (accountOrganizationId, accountOrganizationShortName) {
        $("#clientContractEdit #AccountOrganizationId").val(accountOrganizationId).ValidationValid();
        $("#clientContractEdit #AccountOrganizationName").text(accountOrganizationShortName);
        HideModal();
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора организаций контрагента
    // Грид может быть вызван для добавления организации поставщику (как 1 уровень) и для выбора организации в договор (как 2 уровень)
    OnContractorOrganizationSelectLinkClick: function (organizationId, organizationShortName) {
        $("#clientContractEdit #ClientOrganizationId").val(organizationId).ValidationValid();
        $("#clientContractEdit #ClientOrganizationName").text(organizationShortName);
        HideModal();
    },

    RefreshClientContract: function (contractName, contractId, accountOrganizationName, accountOrganizationId, clientOrganizationName, clientOrganizationId) {
        $("#ClientContractName").text(contractName);
        $("#ClientContractId").val(contractId);

        var clientOrganizationLink;
        if (clientOrganizationId != "" && clientOrganizationId != "0") {
            clientOrganizationLink = '<a href="/ClientOrganization/Details?id=' + clientOrganizationId
                + GetBackUrl() + '">' + clientOrganizationName + '</a>';
        }
        else {
            clientOrganizationLink = clientOrganizationName;
        }
        $("#ClientOrganizationLink").html(clientOrganizationLink);

        var accountOrganizationLink;
        if (accountOrganizationId != "" && accountOrganizationId != "0") {
            accountOrganizationLink = '<a href="/AccountOrganization/Details?id=' + accountOrganizationId
                + GetBackUrl() + '">' + accountOrganizationName + '</a>'
        }
        else {
            accountOrganizationLink = accountOrganizationName;
        }
        $("#AccountOrganizationLink").html(accountOrganizationLink);

        UpdateElementVisibility("linkAddContract", false);
        UpdateElementVisibility("linkChangeContract", true);
    },

    OnClientContractSelectLinkClick: function (contractName, contractId, accountOrganizationName, accountOrganizationId, clientOrganizationName, clientOrganizationId) {
        var dealId = $("#Id").val();
        $.ajax({
            type: "POST",
            url: "/Deal/SetContract",
            data: { dealId: dealId, clientContractId: contractId },
            success: function (result) {
                Deal_Details.RefreshClientContract(contractName, contractId, accountOrganizationName, accountOrganizationId, clientOrganizationName, clientOrganizationId);
                HideModal(function () {
                    ShowSuccessMessage("Договор добавлен.", "messageDealEdit");
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageClientContractSelectList");
            }
        });
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора квот
    OnDealQuotaSelectLinkClick: function (dealQuotaId) {
        var dealId = $("#Id").val();
        $.ajax({
            type: "POST",
            url: "/Deal/AddQuota",
            data: { dealId: dealId, dealQuotaId: dealQuotaId },
            success: function (result) {
                RefreshGrid("gridDealQuota", function () {
                    Deal_Details.RefreshPermissions(result.Permissions);
                    HideModal(function () {
                        ShowSuccessMessage("Квота добавлена.", "messageDealQuotaList");
                    });
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageDealQuotaSelectorListGrid");
            }
        });
    }
};﻿var Deal_Details_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            if ($("#ClientOrganizationId").val() != undefined && IsTrue($("#AllowToViewClientOrganizationDetails").val())) {
                $("#ClientOrganizationName").attr("href", "/ClientOrganization/Details?id=" + $("#ClientOrganizationId").val() + GetBackUrl());
            }
            else {
                $("#ClientOrganizationName").addClass("disabled");
            }

            if ($("#AccountOrganizationId").val() != undefined) {
                $("#AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + $("#AccountOrganizationId").val() + GetBackUrl());
            }
            else {
                $("#AccountOrganizationName").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewCuratorDetails").val())) {
                var userId = $("#CuratorId").val();
                $("#CuratorName").attr("href", "/User/Details?id=" + userId + GetBackUrl());
            }
            else {
                $("#CuratorName").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewClientDetails").val())) {
                var clientId = $("#ClientId").val();
                $("#ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());
            }
            else {
                $("#ClientName").addClass("disabled");
            }

            $("#linkChangeStage").click(function () {
                var dealId = $("#Id").val();
                $.ajax({
                    type: "GET",
                    url: "/Deal/ChangeStage",
                    data: { dealId: dealId },
                    success: function (result) {
                        $("#dealChangeStage").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealChangeStage"));
                        ShowModal("dealChangeStage");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                    }
                });
            });

            $("#linkChangeContract").click(function () {
                var dealId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Deal/CheckPossibilityToSetContract",
                    data: { dealId: dealId },
                    success: function (result) {


                        var oldContractId = $("#ClientContractId").val();

                        $.ajax({
                            type: "GET",
                            url: "/ClientContract/IsUsedBySingleDeal",
                            data: { dealId: dealId, clientContractId: oldContractId },
                            success: function (result) {
                                if (IsTrue(result)) {
                                    var oldContractName = $("#ClientContractName").text();
                                    var message = "Так как договор «" + oldContractName +
                                    "» больше не будет использоваться ни одной сделкой, то он будет удален.\n\nВы уверены, что хотите сменить договор?";

                                    if (!confirm(message)) {
                                        StopLinkProgress();
                                        return false;
                                    }
                                }

                                $.ajax({
                                    type: "GET",
                                    url: "/ClientContract/Select",
                                    data: { dealId: dealId },
                                    success: function (result) {
                                        $("#clientContractSelector").hide().html(result);
                                        $.validator.unobtrusive.parse($("#clientContractSelector"));
                                        ShowModal("clientContractSelector");
                                    },
                                    error: function (XMLHttpRequest, textStatus, thrownError) {
                                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                                    }
                                });
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                            }
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                    }
                });
            });

            $("#linkAddContract").click(function () {
                var dealId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Deal/CheckPossibilityToSetContract",
                    data: { dealId: dealId },
                    success: function (result) {

                        $.ajax({
                            type: "GET",
                            url: "/ClientContract/Select",
                            data: { dealId: dealId },
                            success: function (result) {
                                $("#clientContractSelector").hide().html(result);
                                $.validator.unobtrusive.parse($("#clientContractSelector"));
                                ShowModal("clientContractSelector");
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                            }
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                    }
                });
            });
        });
    }
};

﻿var Deal_Details_QuotaGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridDealSales table.grid_table tr").each(function (i, el) {
                var expenditureId = $(this).find(".ExpenditureWaybillId").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?Id=" + expenditureId + "&backURL=" + currentUrl);

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?Id=" + storageId + "&backURL=" + currentUrl);
            });

            $('#btnAddQuota').click(function () {
                var dealId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/DealQuota/SelectDealQuota",
                    data: { dealId: dealId, mode: "Deal" },
                    success: function (result) {
                        $('#dealQuotaSelect').hide().html(result);
                        $.validator.unobtrusive.parse($("#dealQuotaSelect"));
                        ShowModal("dealQuotaSelect");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, 'messageDealQuotaList');
                    }
                });
            });

            $('#btnAddAllQuotas').click(function () {
                var dealId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/Deal/AddAllQuotas",
                    data: { dealId: dealId },
                    success: function (result) {
                        RefreshGrid("gridDealQuota", function () {
                            Deal_Details.RefreshPermissions(result.Indicators.Permissions);
                            ShowSuccessMessage("Добавлено квот: " + result.AddedCount, "messageDealQuotaList");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, 'messageDealQuotaList');
                    }
                });
            });

            $("#gridDealQuota .delete_link").bind("click", function () {
                if (confirm("Вы уверены?")) {
                    var dealId = $("#Id").val();
                    var quotaId = $(this).parent("td").parent("tr").find(".quotaId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Deal/RemoveQuota",
                        data: { dealId: dealId, quotaId: quotaId },
                        success: function (result) {
                            RefreshGrid("gridDealQuota", function () {
                                Deal_Details.RefreshPermissions(result.Permissions);
                                ShowSuccessMessage("Квота удалена.", "messageDealQuotaList"); 
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealQuotaList");
                        }
                    });
                }
            });
        });
    }
}; ﻿var Deal_Details_SalesGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridDealSales table.grid_table tr").each(function (i, el) {
                var expenditureId = $(this).find(".ExpenditureWaybillId").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?Id=" + expenditureId + "&backURL=" + currentUrl);

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?Id=" + storageId + "&backURL=" + currentUrl);
            });

            $("#btnCreateExpenditureWaybill").click(function () {
                var dealId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/ExpenditureWaybill/CheckPosibilityToCreateExpenditureWaybill",
                    data: { id: dealId },
                    success: function (result) {
                        window.location = "/ExpenditureWaybill/Create?Dealid=" + $("#Id").val() + GetBackUrl();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageSalesGrid");
                    }
                });
            });
        });
    }
}; ﻿var Deal_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();

            $("#btnBack").live('click', function () {
                window.location = $('#BackURL').val();
            });

            // Вывод формы выбора клиента
            $("#ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $('#clientSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#clientSelector"));
                        ShowModal("clientSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealEdit");
                    }
                });
            });

            // Обработка выбора клиента
            $(".select_client").live("click", function () {
                var name = $(this).parent("td").parent("tr").find(".Name").text();
                var id = $(this).parent("td").parent("tr").find(".Id").text();

                $("#ClientId").val(id);
                $("#ClientName").text(name);

                HideModal();
            });
        });
    },

    OnSuccessDealEdit: function (ajaxContext) {
        window.location = "/Deal/Details?id=" + ajaxContext + GetBackUrl();
    },

    OnFailDealEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealEdit");
    }
};﻿var Deal_List_ActiveDealGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridActiveDeal table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

                var curatorId = $(this).find(".CuratorId").text();
                $(this).find("a.CuratorName").attr("href", "/User/Details?id=" + curatorId + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());
            });

            $("#btnCreateDeal").click(function () {
                window.location = "/Deal/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var Deal_List_ClosedDealGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridClosedDeal table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

                var curatorId = $(this).find(".CuratorId").text();
                $(this).find("a.CuratorName").attr("href", "/User/Details?id=" + curatorId + GetBackUrl());
                
                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());
            });
        });
    }
};﻿var Deal_PaymentEdit = {
    Init: function () {
        $(document).ready(function () {
            // Убрать данный документ. Перенести проверку в js-файлы по созданию оплат от клиента по 1 сделке.
            // Т.е. будет клиентская проверка на максимальный нал (надо позаботиться, чтобы поле правильно заполнялось -
            // если пока не выбрана сделка, но разнесение будет идти обязательно на 1 сделку, то чтобы там было 100,000).
            // 866
            $("#btnSelectDestinationDocuments").click(function () {
                if (IsTrue($("#DealPaymentForm").val() == "1")) {
                    var maxSum = TryGetDecimal($("#MaxCashPaymentSum").val());

                    if ($("#Sum").val() > maxSum) {
                        ShowErrorMessage("Чтобы не превышать максимально допустимой суммы наличных оплат, сумма оплаты должна быть не больше " + ValueForDisplay(maxSum),
                            "messageDealPaymentFromClientEdit");
                        return false;
                    }
                }
            });
        });
    }
};﻿var Deal_ReturnFromClientGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridReturnFromClient table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReturnFromClientWaybill/Details?id=" + id + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var recipientStorageId = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + recipientStorageId + GetBackUrl());

                var recipientId = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + recipientId + GetBackUrl());                                
            });

            $("#btnCreateReturnFromClientWaybill").click(function () {
                window.location = "/ReturnFromClientWaybill/Create?dealId=" + $("#Id").val() + GetBackUrl();
            });
        });
    }
};﻿var DealPaymentDocument_ClientOrganizationPaymentFromClientEdit = {
    Init: function () {
        $(document).ready(function () {
            // Открытие формы выбора организации
            $("#clientOrganizationPaymentFromClientEdit #ClientOrganizationName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectAllClientOrganization",
                    success: function (result) {
                        $("#contractorOrganizationSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#contractorOrganizationSelector"));
                        ShowModal("contractorOrganizationSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientOrganizationPaymentFromClientEdit");
                    }
                });
            });

            // Обработка выбора организации клиента
            $("#contractorOrganizationSelector .linkOrganizationSelect").live("click", function () {
                var clientOrganizationId = $(this).parent("td").parent("tr").find(".organizationId").text();
                var clientOrganizationName = $(this).parent("td").parent("tr").find(".organizationShortName").text();

                $("#clientOrganizationPaymentFromClientEdit #ClientOrganizationName").text(clientOrganizationName);
                $("#clientOrganizationPaymentFromClientEdit #ClientOrganizationId").val(clientOrganizationId);

                HideModal();
            });
        });
    },

    OnBeginSelectDestinationDocumentsButtonClick: function () {
        StartButtonProgress($("#clientOrganizationPaymentFromClientEdit #btnSelectDestinationDocuments"));
    },

    OnFailSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageClientOrganizationPaymentFromClientEdit");
    },

    OnSuccessSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        $("#destinationDocumentSelectorForClientOrganizationPaymentFromClientDistribution").html(ajaxContext);
        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForClientOrganizationPaymentFromClientDistribution"));
        ShowModal("destinationDocumentSelectorForClientOrganizationPaymentFromClientDistribution");
    }
};﻿var DealPaymentDocument_DealCreditInitialBalanceCorrection_Edit = {
    Init: function () {
        $(document).ready(function () {
            DealPaymentDocument_DealInitialBalanceCorrection_Edit.Init("dealCreditInitialBalanceCorrectionEdit",
                "ForDealCreditInitialBalanceCorrection", "messageDealCreditInitialBalanceCorrectionEdit");
        });

        // Обработка выбора сделки
        $("#dealSelector .select_deal").live("click", function () {
            var dealId = $(this).findCell(".Id").text();
            var dealName = $(this).findCell(".Name").text();

            $("#dealCreditInitialBalanceCorrectionEdit #DealName").text(dealName);
            $("#dealCreditInitialBalanceCorrectionEdit #DealId").val(dealId);

            HideModal();
        });
    },

    OnBeginSelectDestinationDocumentsButtonClick: function () {
        StartButtonProgress($("#dealCreditInitialBalanceCorrectionEdit #btnSelectDestinationDocuments"));
    },

    OnFailSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealCreditInitialBalanceCorrectionEdit");
    },

    OnSuccessSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        $("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution").html(ajaxContext);
        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution"));
        ShowModal("destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution");
    }
};﻿var DealPaymentDocument_DealCreditInitialBalanceCorrectionDetails = {
    Init: function () {
        $(function () {
            var currentUrl = $("#currentUrl").val();

            if (IsTrue($("#AllowToViewDealDetails").val())) {
                var dealId = $("#dealPaymentDocumentDetails #DealId").val();
                $("#DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);
            }
            else {
                $("#DealName").addClass("disabled");
            }
            if (IsTrue($("#AllowToViewTeamDetails").val())) {
                var teamId = $("#dealPaymentDocumentDetails #TeamId").val();
                $("#TeamName").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);
            }
            else {
                $("#TeamName").addClass("disabled");
            }

            $("#dealPaymentDocumentDetails #btnDeleteDealCreditInitialBalanceCorrection").bind("click", function () {
                var correctionId = $("#dealPaymentDocumentDetails #DealCreditInitialBalanceCorrectionId").val();
                OnDealCreditInitialBalanceCorrectionDeleteButtonClick(correctionId);
            });
        });
    }
};﻿var DealPaymentDocument_DealDebitInitialBalanceCorrection_Edit = {
    Init: function () {
        $(document).ready(function () {
            if ($("#DealId").val() == "0") {
                $("#TeamId").attr("disabled", "disabled");  //Блокируем выбор команды до выбора сделки
            }
            DealPaymentDocument_DealInitialBalanceCorrection_Edit.Init("dealDebitInitialBalanceCorrectionEdit",
                "ForDealDebitInitialBalanceCorrection", "messageDealDebitInitialBalanceCorrectionEdit");
        });

        // Обработка выбора сделки
        $("#dealSelector .select_deal").live("click", function () {
            var dealId = $(this).findCell(".Id").text();
            var dealName = $(this).findCell(".Name").text();

            $("#dealDebitInitialBalanceCorrectionEdit #DealName").text(dealName);
            $("#dealDebitInitialBalanceCorrectionEdit #DealId").val(dealId);

            var teamComboBox = $("#TeamId");
            StartComboBoxProgress(teamComboBox)
            $.ajax({
                type: "GET",
                url: "/Deal/GetTeamListForDealDocument",
                data: { dealId: dealId },
                success: function (result) {
                    $("#TeamId").fillSelect(result, true).removeAttr("disabled");
                    StopComboBoxProgress(teamComboBox);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "errorMessageId");
                }
            });
            HideModal();
        });
    },

    OnBeginDealDebitInitialBalanceCorrectionSave: function () {
        StartButtonProgress($("#dealDebitInitialBalanceCorrectionEdit #btnSave"));
    },

    OnFailDealDebitInitialBalanceCorrectionSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealDebitInitialBalanceCorrectionEdit");
    }
};﻿var DealPaymentDocument_DealDebitInitialBalanceCorrectionDetails = {
    Init: function () {
        $(function () {
            var currentUrl = $("#currentUrl").val();

            if (IsTrue($("#AllowToViewDealDetails").val())) {
                var dealId = $("#dealPaymentDocumentDetails #DealId").val();
                $("#DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);
            }
            else {
                $("#DealName").addClass("disabled");
            }
            if (IsTrue($("#AllowToViewTeamDetails").val())) {
                var teamId = $("#dealPaymentDocumentDetails #TeamId").val();
                $("#TeamName").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);
            }
            else {
                $("#TeamName").addClass("disabled");
            }

            $("#dealPaymentDocumentDetails #btnDeleteDealDebitInitialBalanceCorrection").bind("click", function () {
                var correctionId = $("#dealPaymentDocumentDetails #DealDebitInitialBalanceCorrectionId").val();
                OnDealDebitInitialBalanceCorrectionDeleteButtonClick(correctionId);
            });
        });
    }
};﻿var DealPaymentDocument_DealInitialBalanceCorrection_DealInitialBalanceCorrectionGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridDealInitialBalanceCorrection table.grid_table tr").each(function () {
                var clientOrganizationId = $(this).find(".ClientOrganizationId").text();
                $(this).find("a.ClientOrganizationName").attr("href", "/ClientOrganization/Details?id=" + clientOrganizationId + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealCreditInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/CreateDealCreditInitialBalanceCorrection",
                    success: function (result) {
                        $("#dealCreditInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealCreditInitialBalanceCorrectionEdit"));
                        ShowModal("dealCreditInitialBalanceCorrectionEdit");
                        $("#dealCreditInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection #btnCreateDealDebitInitialBalanceCorrection").click(function () {
                StartButtonProgress($(this));
                
                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/CreateDealDebitInitialBalanceCorrection",
                    success: function (result) {
                        $("#dealDebitInitialBalanceCorrectionEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealDebitInitialBalanceCorrectionEdit"));
                        ShowModal("dealDebitInitialBalanceCorrectionEdit");
                        $("#dealDebitInitialBalanceCorrectionEdit #CorrectionReason").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();

                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealCreditInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDetails").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();

                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/DealDebitInitialBalanceCorrectionDetails",
                    data: { correctionId: correctionId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealInitialBalanceCorrection/DeleteDealCreditInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (result) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection .linkDealDebitInitialBalanceCorrectionDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var correctionId = $(this).findCell(".CorrectionId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealInitialBalanceCorrection/DeleteDealDebitInitialBalanceCorrection",
                        data: { correctionId: correctionId },
                        success: function (result) {
                            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                                ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                        }
                    });
                }
            });

            $("#gridDealInitialBalanceCorrection .linkDealCreditInitialBalanceCorrectionEdit").click(function () {
                var correctionId = $(this).findCell(".CorrectionId").text();

                $.ajax({
                    type: "POST",
                    url: "/DealInitialBalanceCorrection/SelectDestinationDocumentsForDealCreditInitialBalanceCorrectionRedistribution",
                    data: {
                        dealCreditInitialBalanceCorrectionId: correctionId,
                        destinationDocumentSelectorControllerName: "DealInitialBalanceCorrection",
                        destinationDocumentSelectorActionName: "SaveDealCreditInitialBalanceCorrection"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution"));
                        ShowModal("destinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealInitialBalanceCorrectionList");
                    }
                });
            });
        });
    }
};
﻿var DealPaymentDocument_DealInitialBalanceCorrection_Edit = {
    Init: function (modalFormId, dealSelectionMode, errorMessageId) {
        $(document).ready(function () {
            // Открытие формы выбора клиента
            $("#" + modalFormId + " #ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $("#clientSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientSelector"));
                        ShowModal("clientSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, errorMessageId);
                    }
                });
            });

            // Обработка выбора клиента
            $("#clientSelector .select_client").live("click", function () {
                var clientId = $(this).findCell(".Id").text();
                var clientName = $(this).findCell(".Name").text();

                $("#" + modalFormId + " #ClientName").text(clientName);
                $("#" + modalFormId + " #ClientId").val(clientId);

                $("#" + modalFormId + " #ClientId").ValidationValid();

                // Сбрасываем сделку
                $("#" + modalFormId + " #DealName").text("Выберите сделку");
                $("#" + modalFormId + " #DealId").val("");

                HideModal();
            });

            // Открытие формы выбора сделки
            $("#" + modalFormId + " #DealName").click(function () {
                var isDealSelectedByClient = $("#" + modalFormId + " #IsDealSelectedByClient").val();

                if (IsTrue(isDealSelectedByClient)) {
                    var clientId = $("#" + modalFormId + " #ClientId").val();

                    if (IsDefaultOrEmpty(clientId)) {
                        StopLinkProgress();
                        $("#" + modalFormId + " #ClientId").ValidationError("Укажите клиента");
                        return false;
                    }

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClient",
                        data: { clientId: clientId, mode: dealSelectionMode },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, errorMessageId);
                        }
                    });
                }
                else {
                    var clientOrganizationId = $("#" + modalFormId + " #ClientOrganizationId").val();

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClientOrganization",
                        data: { clientOrganizationId: clientOrganizationId, mode: dealSelectionMode },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, errorMessageId);
                        }
                    });
                }
            });
        });
    }
};﻿var DealPaymentDocument_DealInitialBalanceCorrection_Grid = {
    Init: function (gridName) {
        $(document).ready(function () {
            var grid = $("#" + gridName);

            grid.find("table.grid_table tr").each(function () {
                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());
            });
        });
    }
};﻿var DealPaymentDocument_DealInitialBalanceCorrection_List = {

    OnDealDebitInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealDebitInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/DealInitialBalanceCorrection/DeleteDealDebitInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (result) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                        HideModal();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealDebitInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnDealCreditInitialBalanceCorrectionDeleteButtonClick: function (correctionId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealCreditInitialBalanceCorrection"));

            $.ajax({
                type: "POST",
                url: "/DealInitialBalanceCorrection/DeleteDealCreditInitialBalanceCorrection",
                data: { correctionId: correctionId },
                success: function (result) {
                    RefreshGrid("gridDealInitialBalanceCorrection", function () {
                        ShowSuccessMessage("Корректировка удалена.", "messageDealInitialBalanceCorrectionList");
                        HideModal();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealCreditInitialBalanceCorrectionDetails");
                }
            });
        }
    },

    OnSuccessDealDebitInitialBalanceCorrectionSave: function () {
        HideModal(function () {
            RefreshGrid("gridDealInitialBalanceCorrection", function () {
                ShowSuccessMessage("Дебетовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
            });
        });
    },

    OnSuccessDealCreditInitialBalanceCorrectionSave: function () {
        HideModal(function () {
            HideModal(function () {
                RefreshGrid("gridDealInitialBalanceCorrection", function () {
                    ShowSuccessMessage("Кредитовая корректировка сальдо сохранена.", "messageDealInitialBalanceCorrectionList");
                });
            });
        });
    }
};﻿var DealPaymentDocument_DealPayment_DealPaymentGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridDealPayment table.grid_table tr").each(function () {
                var clientOrganizationId = $(this).find(".ClientOrganizationId").text();
                $(this).find("a.ClientOrganizationName").attr("href", "/ClientOrganization/Details?id=" + clientOrganizationId + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());
            });

            $("#gridDealPayment #btnCreateClientOrganizationPaymentFromClient").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/DealPayment/CreateClientOrganizationPaymentFromClient",
                    success: function (result) {
                        $("#clientOrganizationPaymentFromClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientOrganizationPaymentFromClientEdit"));
                        ShowModal("clientOrganizationPaymentFromClientEdit");
                        $("#clientOrganizationPaymentFromClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment #btnCreateDealPaymentFromClient").click(function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/DealPayment/CreateDealPaymentFromClient",
                    success: function (result) {
                        $("#dealPaymentFromClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentFromClientEdit"));
                        ShowModal("dealPaymentFromClientEdit");
                        $("#dealPaymentFromClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment #btnCreateDealPaymentToClient").click(function () {
                StartButtonProgress($(this));
                
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/CreateDealPaymentToClient",
                    success: function (result) {
                        $("#dealPaymentToClientEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentToClientEdit"));
                        ShowModal("dealPaymentToClientEdit");
                        $("#dealPaymentToClientEdit #PaymentDocumentNumber").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentFromClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentFromClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealPayment/DeleteDealPaymentFromClient",
                        data: { paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridDealPayment", function () {
                                ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentToClientDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/DealPayment/DealPaymentToClientDetails",
                    data: { paymentId: paymentId },
                    success: function (result) {
                        $("#dealPaymentDocumentDetails").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealPaymentDocumentDetails"));
                        ShowModal("dealPaymentDocumentDetails");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });

            $("#gridDealPayment .linkPaymentToClientDelete").click(function () {
                if (confirm("Вы уверены?")) {
                    var paymentId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealPayment/DeleteDealPaymentToClient",
                        data: { paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridDealPayment", function () {
                                ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                        }
                    });
                }
            });

            $("#gridDealPayment .linkPaymentFromClientEdit").click(function () {
                var paymentId = $(this).findCell(".Id").text();
                $.ajax({
                    type: "POST",
                    url: "/DealPayment/SelectDestinationDocumentsForDealPaymentFromClientRedistribution",
                    data: { dealPaymentFromClientId: paymentId,
                        destinationDocumentSelectorControllerName: "DealPayment",
                        destinationDocumentSelectorActionName: "SaveDealPaymentFromClient"
                    },
                    success: function (result) {
                        $("#destinationDocumentSelectorForDealPaymentFromClientDistribution").hide().html(result);
                        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealPaymentFromClientDistribution"));
                        ShowModal("destinationDocumentSelectorForDealPaymentFromClientDistribution");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentList");
                    }
                });
            });
        });
    }
};﻿var DealPaymentDocument_DealPayment_List = {

    OnDealPaymentFromClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentFromClient"));
            
            $.ajax({
                type: "POST",
                url: "/DealPayment/DeleteDealPaymentFromClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                        HideModal();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientDetails");
                }
            });
        }
    },

    OnDealPaymentToClientDeleteButtonClick: function (paymentId) {
        if (confirm("Вы уверены?")) {
            StartButtonProgress($("#dealPaymentDocumentDetails #btnDeleteDealPaymentToClient"));
            
            $.ajax({
                type: "POST",
                url: "/DealPayment/DeleteDealPaymentToClient",
                data: { paymentId: paymentId },
                success: function (result) {
                    RefreshGrid("gridDealPayment", function () {
                        ShowSuccessMessage("Оплата удалена.", "messageDealPaymentList");
                        HideModal();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientDetails");
                }
            });
        }
    },

    OnSuccessClientOrganizationPaymentFromClientSave: function () {
        HideModal(function () {
            HideModal(function () {
                RefreshGrid("gridDealPayment", function () {
                    ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
                });
            });
        });
    },

    OnSuccessDealPaymentFromClientSave: function () {
        HideModal(function () {
            HideModal(function () {
                RefreshGrid("gridDealPayment", function () {
                    ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
                });
            });
        });
    },

    OnSuccessDealPaymentToClientSave: function () {
        HideModal(function () {
            RefreshGrid("gridDealPayment", function () {
                ShowSuccessMessage("Оплата сохранена.", "messageDealPaymentList");
            });
        });
    }
};﻿var DealPaymentDocument_DealPaymentFromClientDetails = {
    Init: function () {
        $(function () {
            var currentUrl = $("#currentUrl").val();
            
            if (IsTrue($("#AllowToViewDealDetails").val())) {
                var dealId = $("#dealPaymentDocumentDetails #DealId").val();
                $("#DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);
            }
            else {
                $("#DealName").addClass("disabled");
            }
            if (IsTrue($("#AllowToViewTeamDetails").val())) {
                var teamId = $("#dealPaymentDocumentDetails #TeamId").val();
                $("#TeamName").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);
            }
            else {
                $("#TeamName").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewTakenByDetails").val())) {
                var takenById = $("#dealPaymentDocumentDetails #TakenById").val();
                $("#TakenByName").attr("href", "/User/Details?id=" + takenById + "&backURL=" + currentUrl);
            }
            else {
                $("#TakenByName").addClass("disabled");
            }

            $("#changeTakenBy").click(function () {
                $.ajax({
                    url: "/User/SelectUserByTeamByCombobox",
                    data: { teamId: $("#dealPaymentDocumentDetails #TeamId").val(), mode: "DealPaymentToClientTakenByChange" },
                    success: function (result) {
                        $("#userSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#userSelector"));
                        ShowModal("userSelector");

                        BindUserSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientDetails");
                    }
                });
            });

            function BindUserSelection() {
                $('#userSelectByComboboxForm').die("submit");
                $('#userSelectByComboboxForm').live("submit", function () {
                    var userId = $("#userSelector #UserId").val();
                    var userName = $("#userSelector #UserId option:selected").text();

                    StartButtonProgress($("#btnSelectUser"));

                    $.ajax({
                        type: "POST",
                        url: "/DealPayment/ChangeTakenByInPaymentFromClient",
                        data: { dealPaymentId: $("#dealPaymentDocumentDetails #PaymentId").val(), newTakenById: userId },
                        success: function (result) {
                            $("#dealPaymentDocumentDetails #TakenByName").text(userName);
                            $("#dealPaymentDocumentDetails #TakenById").val(userId)

                            if (IsTrue($("#AllowToViewTakenByDetails").val())) {
                                var takenById = $("#dealPaymentDocumentDetails #TakenById").val();
                                $("#TakenByName").attr("href", "/User/Details?id=" + takenById + "&backURL=" + currentUrl);
                            }
                            else {
                                $("#TakenByName").addClass("disabled");
                            }

                            HideModal(function () { ShowSuccessMessage("Пользователь успешно сменен.", "messageDealPaymentFromClientDetails"); });

                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserSelectByCombobox");
                        }
                    });



                });
            }

            $("#dealPaymentDocumentDetails #btnDeleteDealPaymentFromClient").bind("click", function () {
                var paymentId = $("#dealPaymentDocumentDetails #PaymentId").val();
                OnDealPaymentFromClientDeleteButtonClick(paymentId);
            });
        });
    }
};﻿var DealPaymentDocument_DealPaymentFromClientEdit = {
    Init: function () {
        $(document).ready(function () {
            // Открытие формы выбора клиента
            $("#dealPaymentFromClientEdit #ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $("#clientSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientSelector"));
                        ShowModal("clientSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientEdit");
                    }
                });
            });

            // Обработка выбора клиента
            $("#clientSelector .select_client").live("click", function () {
                var clientId = $(this).parent("td").parent("tr").find(".Id").text();
                var clientName = $(this).parent("td").parent("tr").find(".Name").text();

                $("#dealPaymentFromClientEdit #ClientName").text(clientName);
                $("#dealPaymentFromClientEdit #ClientId").val(clientId);

                $("#dealPaymentFromClientEdit #ClientId").ValidationValid();

                // Сбрасываем сделку
                $("#dealPaymentFromClientEdit #DealName").text("Выберите сделку");
                $("#dealPaymentFromClientEdit #DealId").val("");

                HideModal();
            });

            // Открытие формы выбора сделки
            $("#dealPaymentFromClientEdit #DealName").click(function () {
                var clientId = $("#dealPaymentFromClientEdit #ClientId").val();

                if (!IsDefaultOrEmpty(clientId)) {
                    StartLinkProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClient",
                        data: { clientId: clientId, mode: "ForPaymentFromClient" },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentFromClientEdit");
                        }
                    });
                }
                else {
                    $("#dealPaymentFromClientEdit #ClientId").ValidationError("Укажите клиента");
                }
            });

            // Обработка выбора сделки
            $("#dealSelector .select_deal").live("click", function () {
                var dealId = $(this).parent("td").parent("tr").find(".Id").text();
                var dealName = $(this).parent("td").parent("tr").find(".Name").text();

                $("#dealPaymentFromClientEdit #DealName").text(dealName);
                $("#dealPaymentFromClientEdit #DealId").val(dealId);

                HideModal();
            });
        });
    },

    OnBeginSelectDestinationDocumentsButtonClick: function () {
        StartButtonProgress($("#dealPaymentFromClientEdit #btnSelectDestinationDocuments"));
    },

    OnFailSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealPaymentFromClientEdit");
    },

    OnSuccessSelectDestinationDocumentsButtonClick: function (ajaxContext) {
        $("#destinationDocumentSelectorForDealPaymentFromClientDistribution").html(ajaxContext);
        $.validator.unobtrusive.parse($("#destinationDocumentSelectorForDealPaymentFromClientDistribution"));
        ShowModal("destinationDocumentSelectorForDealPaymentFromClientDistribution");
    }
};﻿var DealPaymentDocument_DealPaymentToClientDetails = {
    Init: function () {
        $(function () {
            var currentUrl = $("#currentUrl").val();

            if (IsTrue($("#AllowToViewDealDetails").val())) {
                var dealId = $("#dealPaymentDocumentDetails #DealId").val();
                $("#DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);
            }
            else {
                $("#DealName").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewTeamDetails").val())) {
                var teamId = $("#dealPaymentDocumentDetails #TeamId").val();
                $("#TeamName").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);
            }
            else {
                $("#TeamName").addClass("disabled");
            }

            if (IsTrue($("#AllowToViewReturnedByDetails").val())) {
                var returnedById = $("#dealPaymentDocumentDetails #ReturnedById").val();
                $("#ReturnedByName").attr("href", "/User/Details?id=" + returnedById + "&backURL=" + currentUrl);
            }
            else {
                $("#ReturnedByName").addClass("disabled");
            }

            $("#changeReturnedBy").click(function () {
                $.ajax({
                    url: "/User/SelectUserByTeamByCombobox",
                    data: { teamId: $("#dealPaymentDocumentDetails #TeamId").val(), mode: "DealPaymentToClientReturnedByChange" },
                    success: function (result) {
                        $("#userSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#userSelector"));
                        ShowModal("userSelector");

                        BindUserSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientDetails");
                    }
                });
            });

            function BindUserSelection() {
                $('#userSelectByComboboxForm').die("submit");
                $('#userSelectByComboboxForm').live("submit", function () {
                    var userId = $("#userSelector #UserId").val();
                    var userName = $("#userSelector #UserId option:selected").text();

                    StartButtonProgress($("#btnSelectUser"));

                    $.ajax({
                        type: "POST",
                        url: "/DealPayment/ChangeReturnedByInPaymentToClient",
                        data: { dealPaymentId: $("#dealPaymentDocumentDetails #PaymentId").val(), newReturnedById: userId },
                        success: function (result) {
                            $("#dealPaymentDocumentDetails #ReturnedByName").text(userName);
                            $("#dealPaymentDocumentDetails #ReturnedById").val(userId)

                            if (IsTrue($("#AllowToViewReturnedByDetails").val())) {
                                var returnedById = $("#dealPaymentDocumentDetails #ReturnedById").val();
                                $("#ReturnedByName").attr("href", "/User/Details?id=" + returnedById + "&returnedById=" + currentUrl);
                            }
                            else {
                                $("#ReturnedByName").addClass("disabled");
                            }

                            HideModal(function () { ShowSuccessMessage("Пользователь успешно сменен.", "messageDealPaymentToClientDetails"); });

                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserSelectByCombobox");
                        }
                    });



                });
            }

            $("#dealPaymentDocumentDetails #btnDeleteDealPaymentToClient").bind("click", function () {
                var paymentId = $("#dealPaymentDocumentDetails #PaymentId").val();
                OnDealPaymentToClientDeleteButtonClick(paymentId);
            });

        });
    }
};﻿var DealPaymentDocument_DealPaymentToClientEdit = {
    Init: function () {
        $(document).ready(function () {
            $("#ReturnedById").attr("disabled", "disabled");
            
            // связывание списков команд и пользователей
            $('#TeamId').FillChildComboBox('ReturnedById', "/User/GetListByTeamForDealPayment", 'teamId', "messageDealPaymentToClientEdit");

            if ($("#DealId").val() == "0") {
                $("#TeamId").attr("disabled", "disabled");  //Блокируем выбор команды до выбора сделки
            }

            if ($("#TeamId").val() != "0" && $("#TeamId").val() != null && $("#TeamId").val() != "") {
                $("#dealPaymentToClientEdit #TeamId").trigger("change");
            }
            
            $("#dealPaymentToClientEdit #ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $("#clientSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientSelector"));
                        ShowModal("clientSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientEdit");
                    }
                });
            });

            $("#clientSelector .select_client").live("click", function () {
                var clientId = $(this).parent("td").parent("tr").find(".Id").text();
                var clientName = $(this).parent("td").parent("tr").find(".Name").text();

                $("#dealPaymentToClientEdit #ClientName").text(clientName);
                $("#dealPaymentToClientEdit #ClientId").val(clientId);

                $("#dealPaymentToClientEdit #ClientId").ValidationValid();

                // Сбрасываем значения полей
                $("#dealPaymentToClientEdit #DealName").text("Выберите сделку");
                $("#dealPaymentToClientEdit #DealId").val("");

                $("#TeamId").clearSelect();
                $("#TeamId").attr("disabled", "disabled");

                $("#ReturnedById").clearSelect();
                $("#ReturnedById").attr("disabled", "disabled");

                HideModal();
            });

            $("#dealPaymentToClientEdit #DealName").click(function () {
                var isDealSelectedByClient = $("#dealPaymentToClientEdit #IsDealSelectedByClient").val();

                if (IsTrue(isDealSelectedByClient)) {
                    var clientId = $("#dealPaymentToClientEdit #ClientId").val();

                    if (IsDefaultOrEmpty(clientId)) {
                        StopLinkProgress();
                        $("#dealPaymentToClientEdit #ClientId").ValidationError("Укажите клиента");
                        return false;
                    }

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClient",
                        data: { clientId: clientId, mode: "ForPaymentToClient" },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientEdit");
                        }
                    });
                }
                else {
                    var clientOrganizationId = $("#dealPaymentToClientEdit #ClientOrganizationId").val();

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClientOrganization",
                        data: { clientOrganizationId: clientOrganizationId, mode: "ForPaymentToClient" },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientEdit");
                        }
                    });
                }
            });

            $("#dealSelector .select_deal").live("click", function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                var name = $(this).parent("td").parent("tr").find(".Name").text();

                $("#dealPaymentToClientEdit #DealName").text(name);
                $("#dealPaymentToClientEdit #DealId").val(id);


                StartComboBoxProgress($("#TeamId"))
                $.ajax({
                    type: "GET",
                    url: "/Deal/GetTeamListForDealDocument",
                    data: { dealId: id },
                    success: function (result) {
                        $("#TeamId").clearSelect().fillSelect(result, true).removeAttr("disabled");
                        StopComboBoxProgress($("#TeamId"));

                        if ($("#TeamId").val() != "") {
                            $("#dealPaymentToClientEdit #TeamId").trigger("change");
                        }
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealPaymentToClientEdit");
                    }
                });

                HideModal();
            });
        });
    },

    OnBeginDealPaymentToClientSave: function () {
        StartButtonProgress($("#dealPaymentToClientEdit #btnSave"));
    },

    OnFailDealPaymentToClientSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealPaymentToClientEdit");
    }
};﻿var DealPaymentDocument_DestinationDocumentSelectForClientOrganizationPaymentFromClientDistribution = {
    Init: function(){
        // связывание списков команд и пользователей
        $('#TeamId').FillChildComboBox('TakenById', "/User/GetListByTeamForDealPayment", 'teamId', "messageDestinationDocumentForClientOrganizationPaymentFromClientDistributionSelectList");
        
        $("#TeamId").change(function () {
                StartGridProgress($("#SaleWaybillSelectGridContainer").find(".grid"));
                StartGridProgress($("#DealDebitInitialBalanceCorrectionSelectGridContainer").find(".grid"));
                var teamId = $(this).val();
                var clientOrganizationId = $("#ClientOrganizationId").val();

                $.ajax({
                    type: "GET",
                    url: "/DealPayment/ShowDestinationSaleGridForClientOrganizationPaymentFromClientDistribution/",
                    data: { clientOrganizationId: clientOrganizationId, teamId: teamId },
                    success: function (result1) {
                        $.ajax({
                            type: "GET",
                            url: "/DealPayment/ShowDestinationPaymentDocumentGridForClientOrganizationPaymentFromClientDistribution/",
                            data: { clientOrganizationId: clientOrganizationId, teamId: teamId },
                            success: function (result2) {
                                $("#DealDebitInitialBalanceCorrectionSelectGridContainer").html(result2);
                                $("#SaleWaybillSelectGridContainer").html(result1);
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForClientOrganizationPaymentFromClientDistributionSelectList");
                            }
                        });
                        
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForClientOrganizationPaymentFromClientDistributionSelectList");
                    }
                });
            });
    }
};﻿var DealPaymentDocument_DestinationDocumentSelector_DealDebitInitialBalanceCorrectionSelectGrid = {
    Init: function () {
        $(document).ready(function () {
            DealPaymentDocument_DestinationDocumentSelector_SelectGrid.Init("gridDealDebitInitialBalanceCorrectionSelect");
        });
    }
};﻿var DealPaymentDocument_DestinationDocumentSelector_SaleWaybillSelectGrid = {
    Init: function () {
        $(document).ready(function () {
            // Формируем ссылки на детали сделок и накладных реализации в гриде
            $("#gridSaleWaybillSelect table.grid_table tr").each(function () {
                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var saleWaybillId = $(this).find(".Id").text();
                var controllerName = $(this).find(".ControllerName").text();
                $(this).find("a.SaleWaybillName").attr("href", "/" + controllerName + "/Details?id=" + saleWaybillId + GetBackUrl());
            });

            DealPaymentDocument_DestinationDocumentSelector_SelectGrid.Init("gridSaleWaybillSelect");
        });
    }
};﻿var DealPaymentDocument_DestinationDocumentSelector_SelectGrid = {
    // Общие методы для всех гридов выбора документов при разнесении платежных документов
    Init: function (gridId) {
        $("#" + gridId + " .IsPaid").change(function (elem) {
            var eps = 0.0000005;

            var modalForm = $("#" + gridId).closest("form");

            var undistributedSum = TryGetDecimal(modalForm.find("#UndistributedSumValue").val(), 2);

            if ($(this).attr("checked")) {
                var debtRemainderValue = TryGetDecimal($(this).parent("td").parent("tr").find(".DebtRemainderValue").text(), 2);

                var saleWaybillPaymentSum;
                if (debtRemainderValue < undistributedSum)
                    saleWaybillPaymentSum = debtRemainderValue;
                else
                    saleWaybillPaymentSum = undistributedSum;

                $(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text(ValueForEdit(saleWaybillPaymentSum, 2));
                $(this).parent("td").parent("tr").find(".CurrentPaymentSumString").text(ValueForDisplay(saleWaybillPaymentSum, 2));

                var newUndistributedSum = undistributedSum - saleWaybillPaymentSum;

                modalForm.find("#UndistributedSumValue").val(ValueForEdit(newUndistributedSum, 2));
                modalForm.find("#UndistributedSumString").text(ValueForDisplay(newUndistributedSum, 2));

                if (newUndistributedSum < eps) {
                    modalForm.find(".IsPaid").each(function () {
                        if (!$(this).attr("checked")) {
                            $(this).attr("disabled", "disabled");
                        }
                    });
                }

                var currentOrdinalNumber = TryGetDecimal(modalForm.find("#CurrentOrdinalNumber").val(), 0);
                $(this).parent("td").parent("tr").find(".OrdinalNumber").text(ValueForEdit(currentOrdinalNumber, 0));
                modalForm.find("#CurrentOrdinalNumber").val(ValueForEdit(currentOrdinalNumber + 1, 0));
                DealPaymentDocument_DestinationDocumentSelector_SelectGrid.RefreshDistributionInfo(modalForm);
            }
            else {
                var newUndistributedSum = undistributedSum + TryGetDecimal($(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text(), 2);

                modalForm.find("#UndistributedSumValue").val(ValueForEdit(newUndistributedSum, 2));
                modalForm.find("#UndistributedSumString").text(ValueForDisplay(newUndistributedSum, 2));
                $(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text("0");
                $(this).parent("td").parent("tr").find(".CurrentPaymentSumString").text("0");

                modalForm.find(".IsPaid").each(function () {
                    $(this).removeAttr("disabled");
                });

                $(this).parent("td").parent("tr").find(".OrdinalNumber").text("0");
                DealPaymentDocument_DestinationDocumentSelector_SelectGrid.RefreshDistributionInfo(modalForm);
            };
        });
    },

    RefreshDistributionInfo: function (modalForm) {
        var distributionInfo = "";
        var eps = 0.0000005;

        // Грид накладных реализации содержит записи с типом 1 - «накладная реализации товаров» (в конце _1)
        modalForm.find("#gridSaleWaybillSelect .IsPaid").each(function () {
            if ($(this).attr("checked")) {
                var currentPaymentSumValue = TryGetDecimal($(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text(), 2);
                if (!isNaN(currentPaymentSumValue)) {
                    // Вставляем в строку только ненулевые значения
                    if (currentPaymentSumValue > eps) {
                        distributionInfo += ($(this).parent("td").parent("tr").find(".Id").text() + "=" +
                            $(this).parent("td").parent("tr").find(".OrdinalNumber").text() + "_" +
                            $(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text() + "_1;");
                    }
                }
            }
        });

        // Грид дебетовых корректировок сальдо содержит записи с типом 2 - «дебетовая корректировка сальдо» (в конце _2)
        modalForm.find("#gridDealDebitInitialBalanceCorrectionSelect .IsPaid").each(function () {
            if ($(this).attr("checked")) {
                var currentPaymentSumValue = TryGetDecimal($(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text(), 2);
                if (!isNaN(currentPaymentSumValue)) {
                    // Вставляем в строку только ненулевые значения
                    if (currentPaymentSumValue > eps) {
                        distributionInfo += ($(this).parent("td").parent("tr").find(".Id").text() + "=" +
                            $(this).parent("td").parent("tr").find(".OrdinalNumber").text() + "_" +
                            $(this).parent("td").parent("tr").find(".CurrentPaymentSumValue").text() + "_2;");
                    }
                }
            }
        });

        modalForm.find("#DistributionInfo").val(distributionInfo);
    }
};﻿var DealPaymentDocument_DestinationDocumentSelectorForClientOrganizationPaymentFromClientDistribution = {
    OnBeginClientOrganizationPaymentFromClientSave: function (ajaxContext) {
        StartButtonProgress($("#btnDistribute"));
    },

    OnFailClientOrganizationPaymentFromClientSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDestinationDocumentForClientOrganizationPaymentFromClientDistributionSelectList");
    }
};
﻿var DealPaymentDocument_DestinationDocumentSelectorForDealCreditInitialBalanceCorrectionDistribution = {
    Init: function () {
        $(document).ready(function () {
            $("#TeamId").change(function () {
                StartGridProgress($("#SaleWaybillSelectGridContainer").find(".grid"));
                StartGridProgress($("#DealDebitInitialBalanceCorrectionSelectGridContainer").find(".grid"));
                var teamId = $(this).val();

                $.ajax({
                    type: "GET",
                    url: "/DealInitialBalanceCorrection/ShowDestinationSaleGridForDealCreditInitialBalanceCorrectionDistribution/",
                    data: { dealId: $("#DealId").val(), teamId: teamId },
                    success: function (result1) {
                        $.ajax({
                            type: "GET",
                            url: "/DealInitialBalanceCorrection/ShowDestinationDocumentGridForDealCreditInitialBalanceCorrectionDistribution/",
                            data: { dealId: $("#DealId").val(), teamId: teamId },
                            success: function (result2) {
                                $("#SaleWaybillSelectGridContainer").html(result1);
                                $("#DealDebitInitialBalanceCorrectionSelectGridContainer").html(result2);
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForDealCreditInitialBalanceCorrectionDistributionSelectList");
                            }
                        });

                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForDealCreditInitialBalanceCorrectionDistributionSelectList");
                    }
                });
            });
        });
    },

    OnBeginDealCreditInitialBalanceCorrectionSave: function (ajaxContext) {
        StartButtonProgress($("#btnDistribute"));
    },

    OnFailDealCreditInitialBalanceCorrectionSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDestinationDocumentForDealCreditInitialBalanceCorrectionDistributionSelectList");
    }
};
﻿var DealPaymentDocument_DestinationDocumentSelectorForDealPaymentFromClientDistribution = {
    Init: function () {
        $(document).ready(function () {
            // связывание списков команд и пользователей
            $('#TeamId').FillChildComboBox('TakenById', "/User/GetListByTeamForDealPayment", 'teamId', "messageDestinationDocumentForDealPaymentFromClientDistributionSelectList");

            $("#TeamId").change(function () {
                StartGridProgress($("#SaleWaybillSelectGrid").find(".grid"));
                StartGridProgress($("#DealDebitInitialBalanceCorrectionSelectGrid").find(".grid"));
                var teamId = $(this).val();

                $.ajax({
                    type: "GET",
                    url: "/DealPayment/ShowDestinationSaleGridForDealPaymentFromClientDistribution/",
                    data: { dealId: $("#DealId").val(), teamId: teamId },
                    success: function (result1) {
                        $.ajax({
                            type: "GET",
                            url: "/DealPayment/ShowDestinationPaymentDocumentGridForDealPaymentFromClientDistribution/",
                            data: { dealId: $("#DealId").val(), teamId: teamId },
                            success: function (result2) {
                                $("#DealDebitInitialBalanceCorrectionSelectGrid").html(result2);
                                $("#SaleWaybillSelectGrid").html(result1);
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForDealPaymentFromClientDistributionSelectList");
                            }
                        });

                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDestinationDocumentForDealPaymentFromClientDistributionSelectList");
                    }
                });
            });
        });
    },

    OnFailDealPaymentFromClientSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDestinationDocumentForDealPaymentFromClientDistributionSelectList");
    },

    OnBeginDealPaymentFromClientSave: function (ajaxContext) {
        StartButtonProgress($("#btnDistribute"));
    }
};﻿var DealPaymentDocument_Details_SaleWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridSaleWaybillDistribution table.grid_table tr").each(function (i, el) {
                var saleWaybillId = $(this).find(".SaleWaybillId").text();
                var controllerName = $(this).find(".ControllerName").text();
                $(this).find("a.SaleWaybillName").attr("href", "/" + controllerName + "/Details?id=" + saleWaybillId + GetBackUrl());
            });
        });
    }
};﻿var DealQuota_Edit = {
    Init: function () {
        $(document).ready(function () {
            if (IsFalse($('#AllowToEdit').val())) {
                $("[name='IsPrepayment']").attr("disabled", "disabled");
            }

            DealQuota_Edit.SetPrepayment($("#IsPrepayment").val() != "0");
        });

        $('#rbIsPrepayment_false').click(function () {
            DealQuota_Edit.SetPrepayment(false);
        });

        $('#rbIsPrepayment_true').click(function () {
            DealQuota_Edit.SetPrepayment(true);
        });
    },

    SetPrepayment: function (status) {
        if (IsTrue(status)) {
            $("#PostPaymentGroup *").attr("disabled", "disabled");            
            $('#dealQuotaEdit #PostPaymentDays').ValidationValid();
            $("#CreditLimitSumGroup *").attr("disabled", "disabled");            
            $('#dealQuotaEdit #CreditLimitSum').ValidationValid();
            $("#dealQuotaEdit #IsPrepayment").val("1");
        }
        else {
            $("#PostPaymentGroup *").removeAttr("disabled");
            $("#CreditLimitSumGroup *").removeAttr("disabled");
            $("#dealQuotaEdit #IsPrepayment").val("0");
        }
    },

    OnFailSaveDealQuota: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageDealQuotaEdit");
    }
};﻿var DealQuota_List = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#btnCreate").live("click", function () {
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/DealQuota/Create",
                    success: function (result) {
                        $("#dealQuotaEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealQuotaEdit"));
                        ShowModal("dealQuotaEdit");
                        $("#dealQuotaEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageActiveDealQuotaList");
                    }
                });
            });

            $("#gridActiveDealQuota .edit_link, #gridActiveDealQuota .details_link, #gridInactiveDealQuota .edit_link, #gridInactiveDealQuota .details_link").live("click", function () {
                var quotaId = $(this).parent("td").parent("tr").find(".quotaId").text();
                $.ajax({
                    type: "GET",
                    url: "/DealQuota/Edit",
                    data: { id: quotaId },
                    success: function (result) {
                        $("#dealQuotaEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealQuotaEdit"));
                        ShowModal("dealQuotaEdit");
                        $("#dealQuotaEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealQuotaList");
                    }
                });
            });

            $("#gridActiveDealQuota .delete_link").live("click", function () {
                if (confirm("Вы уверены?")) {
                    var quotaId = $(this).parent("td").parent("tr").find(".quotaId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealQuota/Delete",
                        data: { id: quotaId },
                        success: function (result) {
                            RefreshGrid("gridActiveDealQuota", function () { ShowSuccessMessage("Квота удалена.", "messageActiveDealQuotaList"); });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageActiveDealQuotaList");
                        }
                    });
                }
            });

            $("#gridInactiveDealQuota .delete_link").live("click", function () {
                if (confirm("Вы уверены?")) {
                    var quotaId = $(this).parent("td").parent("tr").find(".quotaId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/DealQuota/Delete",
                        data: { id: quotaId },
                        success: function (result) {
                            RefreshGrid("gridInactiveDealQuota", function () { ShowSuccessMessage("Квота удалена.", "messageInactiveDealQuotaList"); });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageInactiveDealQuotaList");
                        }
                    });
                }
            });
        });
    },

    OnSuccessSaveDealQuota: function (ajaxContext) {
        if (ajaxContext.IsActive) {
            RefreshGrid("gridActiveDealQuota", function () {
                RefreshGrid("gridInactiveDealQuota", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageActiveDealQuotaList");
                    });
                });
            });
        }
        else {
            RefreshGrid("gridActiveDealQuota", function () {
                RefreshGrid("gridInactiveDealQuota", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageInactiveDealQuotaList");
                    });
                });
            });
        }
    }
}; 
﻿var EconomicAgent_JuridicalPersonEdit = {
    Init: function () {
        $("#ShortName").focus();
        $('#juridicalPersonEditContactInfo').hide();       

        //Переходим на вкладку основной информации
        $('#linkMainInfo').click(function () {
            $(this).parent("div").find(".selected").removeClass("selected");
            $(this).addClass("selected");
            $('#juridicalPersonEditMainInfo').show();
            $('#juridicalPersonEditContactInfo').hide();

            $("#organizationEdit #ShortName").focus();
        });

        //Переходим на вкладку контакных лиц
        $('#linkContacts').click(function () {
            $(this).parent("div").find(".selected").removeClass("selected");
            $(this).addClass("selected");
            $('#juridicalPersonEditMainInfo').hide();
            $('#juridicalPersonEditContactInfo').show();

            $("#organizationEdit #DirectorName").focus();
        });
     },

     OnFailJuridicalPersonEdit:function(ajaxContext) {
         ShowErrorMessage(ajaxContext.responseText, "messageJuridicalPersonEdit");
     }
};﻿var EconomicAgent_PhysicalPersonEdit = {
    Init: function () {
        $("#ShortName").focus();        
     },

     OnFailPhysicalPersonEdit:function(ajaxContext) {
         ShowErrorMessage(ajaxContext.responseText, "messageOrganizationEdit");
     }
};﻿var EmployeePost_Edit = {
    OnBeginEmployeePostSave: function () {
        StartButtonProgress($("#btnSaveEmployeePost"));
    },

    OnFailEmployeePostSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageEmployeePostEdit");
    }
};
﻿var EmployeePost_EmployeePostGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateEmployeePost').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                EmployeePost_EmployeePostGrid.ShowEmployeePostDetailsForEdit(id);
            });

            $('#gridEmployeePost .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                EmployeePost_EmployeePostGrid.ShowEmployeePostDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "EmployeePost";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridEmployeePost", function () {
                                ShowSuccessMessage("Удалено.", "messageEmployeePostList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageEmployeePostList");
                        }
                    });
                }
            });
        });
    },

    ShowEmployeePostDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "EmployeePost";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#employeePostEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#employeePostEdit"));
                ShowModal("employeePostEdit");
                $("#employeePostEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageEmployeePostList");
            }
        });
    }
};
﻿var EmployeePost_List = {
    OnSuccessEmployeePostSave: function () {
        HideModal();
        RefreshGrid("gridEmployeePost", function () {
            ShowSuccessMessage("Сохранено.", "messageEmployeePostList");
        });
    }
};
﻿var ExpenditureWaybill_AddRowsByList = {
    Init: function () {
        $(document).ready(function () {
            Article_AddRowsByList.Init();

            Waybill_ForWaybillRowsAdditionByListGrid.actionName = "/ExpenditureWaybill/AddRowSimply/";
            Waybill_ForWaybillRowsAdditionByListGrid.gridId = "gridExpenditureWaybillRows";
            Waybill_ForWaybillRowsAdditionByListGrid.messageId = "messageExpenditureWaybillRowList"  
        });
    }
};
﻿var ExpenditureWaybill_Details = {
    Init: function () {
        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });

        $('#btnEdit').live("click", function () {
            var id = $('#Id').val();
            window.location = "/ExpenditureWaybill/Edit?id=" + id + GetBackUrl();
        });

        $('#btnAddRowsByList').live("click", function () {
            var id = $('#Id').val();
            window.location = "/ExpenditureWaybill/AddRowsByList?id=" + id + GetBackUrl();
        });

        $('#btnDelete').live('click', function () {
            if (confirm('Вы уверены?')) {
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ExpenditureWaybill/Delete/",
                    data: { id: expenditureWaybillId },
                    success: function () {
                        window.location = "/ExpenditureWaybill/List";
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                    }
                });
            }
        });

        $("#btnPrepareToAccept").live('click', function () {
            var expenditureWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/ExpenditureWaybill/PrepareToAccept",
                data: { expenditureWaybillId: expenditureWaybillId },
                success: function (result) {
                    RefreshGrid("gridExpenditureWaybillRows", function () {
                        ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                        ShowSuccessMessage("Накладная подготовлена к проводке.", "messageExpenditureWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $("#btnCancelReadinessToAccept").live('click', function () {
            var expenditureWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/ExpenditureWaybill/CancelReadinessToAccept",
                data: { expenditureWaybillId: expenditureWaybillId },
                success: function (result) {
                    RefreshGrid("gridExpenditureWaybillRows", function () {
                        ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                        ShowSuccessMessage("Готовность к проводке отменена.", "messageExpenditureWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $("#btnAccept").live('click', function () {
            var expenditureWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/ExpenditureWaybill/Accept",
                data: { expenditureWaybillId: expenditureWaybillId },
                success: function (result) {
                    RefreshGrid("gridExpenditureWaybillRows", function () {
                        ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                        ShowSuccessMessage("Накладная проведена.", "messageExpenditureWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $("#btnAcceptRetroactively").live('click', function () {
            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/AcceptRetroactively",
                success: function (result) {
                    $('#dateTimeSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#dateTimeSelector"));
                    ShowModal("dateTimeSelector");

                    BindRetroactivelyAcceptanceDateSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        function BindRetroactivelyAcceptanceDateSelection() {
            $('#btnSelectDateTime').click(function (e) {

                e.preventDefault();
                if (!$('#dateTimeSelectForm').valid()) return false;

                var dateTime = $("#dateTimeSelector #Date").val() + " " + $("#dateTimeSelector #Time").val();
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($("#btnSelectDateTime"));

                $.ajax({
                    type: "POST",
                    url: "/ExpenditureWaybill/AcceptRetroactively",
                    data: { expenditureWaybillId: expenditureWaybillId, acceptanceDate: dateTime },
                    success: function (result) {
                        RefreshGrid("gridExpenditureWaybillRows", function () {
                            ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                            HideModal(function () {
                                ShowSuccessMessage("Накладная проведена.", "messageExpenditureWaybillEdit");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDateSelect");
                    }
                });
            });
        }

        $("#btnCancelAcceptance").live('click', function () {
            if (confirm('Вы уверены?')) {
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ExpenditureWaybill/CancelAcceptance",
                    data: { expenditureWaybillId: expenditureWaybillId },
                    success: function (result) {
                        RefreshGrid("gridExpenditureWaybillRows", function () {
                            ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                            ShowSuccessMessage("Проводка накладной отменена.", "messageExpenditureWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                    }
                });
            }
        });

        $("#btnShip").live('click', function () {
            var expenditureWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/ExpenditureWaybill/Ship",
                data: { expenditureWaybillId: expenditureWaybillId },
                success: function (result) {
                    ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                    ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                    ShowSuccessMessage("Накладная отгружена.", "messageExpenditureWaybillEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $("#btnShipRetroactively").live('click', function () {
            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/ShipRetroactively",
                success: function (result) {
                    $('#dateTimeSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#dateTimeSelector"));
                    ShowModal("dateTimeSelector");

                    BindRetroactivelyShippingDateSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        function BindRetroactivelyShippingDateSelection() {
            $('#btnSelectDateTime').click(function (e) {

                e.preventDefault();
                if (!$('#dateTimeSelectForm').valid()) return false;

                var dateTime = $("#dateTimeSelector #Date").val() + " " + $("#dateTimeSelector #Time").val();
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($("#btnSelectDateTime"));

                $.ajax({
                    type: "POST",
                    url: "/ExpenditureWaybill/ShipRetroactively",
                    data: { expenditureWaybillId: expenditureWaybillId, shippingDate: dateTime },
                    success: function (result) {
                        RefreshGrid("gridExpenditureWaybillRows", function () {
                            ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                            HideModal(function () {
                                ShowSuccessMessage("Накладная отгружена.", "messageExpenditureWaybillEdit");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDateSelect");
                    }
                });
            });
        }

        $("#btnCancelShipping").live('click', function () {
            if (confirm('Вы уверены?')) {
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ExpenditureWaybill/CancelShipping",
                    data: { expenditureWaybillId: expenditureWaybillId },
                    success: function (result) {
                        ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                        ShowSuccessMessage("Отгрузка накладной отменена.", "messageExpenditureWaybillEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                    }
                });
            }
        });

        $('#cashMemoPrintingForm').live('click', function () {
            var id = $('#Id').val();

            window.open("/ExpenditureWaybill/ShowCashMemoPrintingForm?waybillId=" + id);
        });

        // счет-фактура
        $('#invoicePrintingForm').live("click", function () {
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/ShowInvoicePrintingFormSettings/",
                data: { waybillId: $('#Id').val() },
                success: function (result) {
                    $('#expenditureWaybillPrintingForm').hide().html(result);
                    $.validator.unobtrusive.parse($("#expenditureWaybillPrintingForm"));
                    ShowModal("expenditureWaybillPrintingForm");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $('#paymentInvoicePrintingForm').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/ShowPaymentInvoicePrintingFormSettings/",
                data: { waybillId: $('#Id').val() },
                success: function (result) {
                    $('#expenditureWaybillPrintingForm').hide().html(result);
                    $.validator.unobtrusive.parse($("#expenditureWaybillPrintingForm"));
                    ShowModal("expenditureWaybillPrintingForm");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        $('#printingForm').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/ShowExpenditureWaybillPrintingFormSettings/",
                data: { waybillId: $('#Id').val() },
                success: function (result) {
                    $('#expenditureWaybillPrintingForm').hide().html(result);
                    $.validator.unobtrusive.parse($("#expenditureWaybillPrintingForm"));
                    ShowModal("expenditureWaybillPrintingForm");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        // ТОРГ-12
        $('#printingFormTORG12').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/ShowTORG12PrintingFormSettings/",
                data: { waybillId: $('#Id').val() },
                success: function (result) {
                    $('#expenditureWaybillPrintingForm').hide().html(result);
                    $.validator.unobtrusive.parse($("#expenditureWaybillPrintingForm"));
                    ShowModal("expenditureWaybillPrintingForm");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        // T-1 (TTH)
        $('#printingFormT1').live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/GetT1PrintingFormSettings/",
                data: { waybillId: $('#Id').val() },
                success: function (result) {
                    $('#expenditureWaybillPrintingForm').hide().html(result);
                    $.validator.unobtrusive.parse($("#expenditureWaybillPrintingForm"));
                    ShowModal("expenditureWaybillPrintingForm");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                }
            });
        });

        // Изменить куратора
        $("#linkChangeCurator").live("click", function () {
            var dealId = $("#DealId").val();
            Waybill_Edit.ShowCuratorSelectorForm(4/*WaybillTypeId*/, "", dealId, null, "messageChangeOwnerWaybillDetails");
        });

        // обработка выбора куратора
        $(".select_user").live("click", function () {
            Waybill_Details.HandlerForSelectCurator(4/*waybillTypeId*/, $(this));
        });
    },

    // обновление основной информации о накладной и состоянии кнопок
    RefreshMainDetails: function (details) {
        $("#AcceptedByName").text(details.AcceptedByName);
        $("#AcceptedById").val(details.AcceptedById);
        $("#AcceptanceDate").text(details.AcceptanceDate);
        $("#ShippedByName").text(details.ShippedByName);
        $("#ShippedById").val(details.ShippedById);
        $("#ShippingDate").text(details.ShippingDate);
        $("#StateName").text(details.StateName);
        $("#PurchaseCostSum").text(details.PurchaseCostSum);
        $("#ClientName").text(details.ClientName);
        $("#SenderAccountingPriceSum").text(details.SenderAccountingPriceSum);
        $("#DealName").text(details.DealName);
        $("#SalePriceSum").text(details.SalePriceSum);
        $("#DealQuotaName").text(details.DealQuotaName);
        $("#TotalDiscountPercent").text(details.TotalDiscountPercent);
        $("#TotalDiscountSum").text(details.TotalDiscountSum);
        $("#SenderStorageName").text(details.SenderStorageName);
        $("#MarkupPercent").text(details.MarkupPercent);
        $("#MarkupSum").text(details.MarkupSum);
        $("#PaymentPercent").text(details.PaymentPercent);
        $("#PaymentSum").text(details.PaymentSum);
        $("#PaymentType").text(details.PaymentType);
        $("#RowCount").text(details.RowCount);
        $("#Comment").html(details.Comment);
        $("#ValueAddedTaxString").text(details.ValueAddedTaxString);
        $("#TotalReturnedSum").text(details.TotalReturnedSum);
        $("#TotalReservedByReturnSum").text(details.TotalReservedByReturnSum);
        $("#DealPaymentForm").text(details.DealPaymentForm);
        $("#TotalWeight").text(details.TotalWeight);
        $("#TotalVolume").text(details.TotalVolume);

        $("#AllowToViewAcceptedByDetails").val(details.AllowToViewAcceptedByDetails);
        $("#AllowToViewShippedByDetails").val(details.AllowToViewShippedByDetails);

        $("#AcceptedByContainer").css("display", details.AcceptedById != "" ? "inline" : "none");
        $("#ShippedByContainer").css("display", details.ShippedById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewShippedByDetails', 'ShippedByName', 'User', 'ShippedById');
    },

    RefreshPermissions: function (permissions) {
        UpdateButtonAvailability("btnPrepareToAccept", permissions.AllowToPrepareToAccept);
        UpdateButtonAvailability("btnCancelReadinessToAccept", permissions.AllowToCancelReadinessToAccept);
        UpdateButtonAvailability("btnAccept", permissions.AllowToAccept);
        UpdateButtonAvailability("btnAcceptRetroactively", permissions.AllowToAcceptRetroactively);
        UpdateButtonAvailability("btnCancelAcceptance", permissions.AllowToCancelAcceptance);
        UpdateButtonAvailability("btnShip", permissions.AllowToShip);
        UpdateButtonAvailability("btnShipRetroactively", permissions.AllowToShipRetroactively);
        UpdateButtonAvailability("btnCancelShipping", permissions.AllowToCancelShipping);
        UpdateButtonAvailability("btnEdit", permissions.AllowToEdit);
        UpdateButtonAvailability("btnDelete", permissions.AllowToDelete);
        UpdateButtonAvailability("btnCreateExpenditureWaybillRow", permissions.AllowToEdit);
        UpdateButtonAvailability("btnAddRowsByList", permissions.AllowToEdit);

        UpdateElementVisibility("btnPrepareToAccept", permissions.IsPossibilityToPrepareToAccept);
        UpdateElementVisibility("btnCancelReadinessToAccept", permissions.AllowToCancelReadinessToAccept);
        UpdateElementVisibility("btnAccept", permissions.IsPossibilityToAccept);
        UpdateElementVisibility("btnAcceptRetroactively", permissions.IsPossibilityToAcceptRetroactively);
        UpdateElementVisibility("btnCancelAcceptance", permissions.AllowToCancelAcceptance);
        UpdateElementVisibility("btnShip", permissions.IsPossibilityToShip);
        UpdateElementVisibility("btnShipRetroactively", permissions.IsPossibilityToShipRetroactively);
        UpdateElementVisibility("btnCancelShipping", permissions.AllowToCancelShipping);
        UpdateElementVisibility("btnEdit", permissions.AllowToEdit);
        UpdateElementVisibility("btnDelete", permissions.AllowToDelete);
        UpdateElementVisibility("btnCreateExpenditureWaybillRow", permissions.AllowToEdit);
        UpdateElementVisibility("btnAddRowsByList", permissions.AllowToEdit);
        UpdateElementVisibility("feature_menu_box", permissions.AllowToPrintForms);
        UpdateElementVisibility("linkChangeDealQuota", permissions.AllowToEdit);

        UpdateElementVisibility("linkChangeCurator", permissions.AllowToChangeCurator);
    }
};
﻿var ExpenditureWaybill_Details_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            
            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewShippedByDetails', 'ShippedByName', 'User', 'ShippedById');
            
            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');

            SetEntityDetailsLink('AllowToViewClientDetails', 'ClientName', 'Client', 'ClientId');

            SetEntityDetailsLink('AllowToViewDealDetails', 'DealName', 'Deal', 'DealId');

            SetEntityDetailsLink('AllowToViewSenderStorageDetails', 'SenderStorageName', 'Storage', 'SenderStorageId');

            SetEntityDetailsLink('AllowToViewTeamDetails', 'TeamName', 'Team', 'TeamId');

            SetEntityDetailsLink(null, 'AccountOrganizationName', 'AccountOrganization', 'AccountOrganizationId');

            $("#linkChangeDealQuota").click(function () {
                var dealId = $("#DealId").val();

                $.ajax({
                    type: "GET",
                    url: "/DealQuota/SelectDealQuota",
                    data: { dealId: dealId, mode: "Sale" },
                    success: function (result) {
                        $("#dealQuotaSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#dealQuotaSelector"));
                        ShowModal("dealQuotaSelector");

                        BindDealQuotaSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                    }
                });
            });

            // обработка выбора квоты
            function BindDealQuotaSelection() {
                $("#gridDealQuotaSelect .dealQuota_select_link").die("click");
                $("#gridDealQuotaSelect .dealQuota_select_link").live("click", function () {
                    var dealQuotaId = $(this).findCell(".quotaId").text();
                    var expenditureWaybillId = $("#Id").val();
                    $.ajax({
                        type: "POST",
                        url: "/ExpenditureWaybill/SetDealQuota",
                        data: { expenditureWaybillId: expenditureWaybillId, dealQuotaId: dealQuotaId },
                        success: function (result) {
                            var oldPaymentType = $("#PaymentType").text();
                            ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                            HideModal(function () {
                                var message = "Квота изменена.";
                                if(oldPaymentType != result.MainDetails.PaymentType)
                                {
                                    message += " Форма взаиморасчетов изменена на «" + result.MainDetails.PaymentType + "».";
                                }
                                ShowSuccessMessage(message, "messageExpenditureWaybillEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealQuotaSelectorListGrid");
                        }
                    });
                });
            }
        });
    },
};var ExpenditureWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {

            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();

                $("#DealContractCashPaymentSumDiv").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");

                $("#DealContractCashPaymentSumDiv").show();
            }

            //перехват Submit для валидации
            $('#form0 input[type="submit"]').click(function () {
                if (ExpenditureWaybill_Edit.DeliveryAddressTypeValidation()) {
                    return true;
                }

                return false;
            });

            ExpenditureWaybill_Edit.DeliveryAddressTypeChange();

            $("#DeliveryAddressTypeId").change(function () {
                ExpenditureWaybill_Edit.DeliveryAddressTypeChange();
            })

            //Блокируем поля, зависящие от сделки
            if ($("#DealId").val() == "") {
                $("#DealContractCashPaymentSumDiv").hide();
                $("#SenderStorageId").attr("disabled", "disabled");
                $("#TeamId").attr("disabled", "disabled");
            }

            // Выбор клиента
            $("#ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $("#clientSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#clientSelector"));
                        ShowModal("clientSelector");

                        BindClientSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                    }
                });
            });

            // открытие формы выбора сделки
            $("#DealName").click(function () {
                var clientId = $("#ClientId").val();
                var clientOrganizationId = $("#ClientOrganizationId").val();

                // Зачем такой if? Откуда вообще в этой форме ClientOrganizationId?
                if ($("#ClientOrganizationId").length != 0 && clientOrganizationId != "") {
                    StartLinkProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClientOrganization",
                        data: { clientOrganizationId: clientOrganizationId, mode: "ForSaleToClient" },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");

                            BindDealSelection();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                        }
                    });
                }
                else if ($("#ClientId").length != 0 && clientId != "") {
                    StartLinkProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClient",
                        data: { clientId: clientId, mode: "ForSaleToClient" },
                        success: function (result) {
                            $("#dealSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealSelector"));
                            ShowModal("dealSelector");

                            BindDealSelection();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                        }
                    });
                } else {
                    $("#ClientId").ValidationError("Укажите клиента");
                }
            });

            // открытие формы выбора квоты
            $("#DealQuotaName").click(function () {
                var dealId = $("#DealId").val();

                if (dealId != "") {
                    StartLinkProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/DealQuota/SelectDealQuota",
                        data: { dealId: dealId, mode: "Sale" },
                        success: function (result) {
                            $("#dealQuotaSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#dealQuotaSelector"));
                            ShowModal("dealQuotaSelector");

                            BindDealQoutaSelection();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillEdit");
                        }
                    });
                } else {
                    $("#DealId").ValidationError("Укажите сделку");
                }
            });

            $("#CuratorName").click(function () {
                var dealId = $("#DealId").val();

                if (dealId != "" && dealId != null) {
                    Waybill_Edit.ShowCuratorSelectorForm(4/*WaybillTypeId*/, "", dealId, $(this), "messageExpenditureWaybillEdit");
                }
                else {
                    $("#DealId").ValidationError("Укажите сделку.");
                }
            });
        });

        // обработка выбора клиента
        function BindClientSelection() {
            $(".select_client").die("click");
            $(".select_client").live("click", function () {
                var clientId = $(this).parent("td").parent("tr").find(".Id").text();
                var clientName = $(this).parent("td").parent("tr").find(".Name").text();

                // ajax за доп. данными и затем закрытие модального окна
                $.ajax({
                    type: "GET",
                    url: "/Client/GetFactualAddress",
                    data: { clientId: clientId },
                    success: function (result) {
                        HideModal(function () {
                            $("#ClientName").text(clientName);
                            $("#ClientId").val(clientId);
                            $("#ClientId").ValidationValid();

                            // Сбрасываем сделку
                            $("#DealName").text("Выберите сделку");
                            $("#DealId").val("");
                            $("#DealContractCashPaymentSumDiv").hide();

                            //Настраиваем адреса
                            $("#OrganizationDeliveryAddress").val("");
                            $("#ClientDeliveryAddress").val(result);

                            // Блокируем зависимые от сделки поля
                            $("#SenderStorageId").clearSelect().attr("disabled", "disabled");
                            $("#TeamId").clearSelect().attr("disabled", "disabled");
                            $("#DealQuotaName").text("Выберите квоту");
                            $("#DealQuotaId").val("");
                            ExpenditureWaybill_Edit.DisablePaymentFormSelection();
                            ExpenditureWaybill_Edit.DeliveryAddressTypeChange();
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageClientSelectList");
                    }
                });
            });
        }

        // обработка выбора сделки
        function BindDealSelection() {
            $(".select_deal").die("click");
            $(".select_deal").live("click", function () {
                StartComboBoxProgress($("#TeamId"));
                StartComboBoxProgress($("#SenderStorageId"));

                var dealId = $(this).parent("td").parent("tr").find(".Id").text();
                var dealName = $(this).parent("td").parent("tr").find(".Name").text();

                // ajax за доп. данными и затем закрытие модального окна
                $.ajax({
                    type: "GET",
                    url: "/Deal/GetDealInfo",
                    data: { dealId: dealId },
                    success: function (result) {
                        HideModal(function () {
                            // сохраняем данные сделки
                            $("#DealName").text(dealName);
                            $("#DealId").val(dealId);

                            // выставляем зависимые от сделки данные
                            $("#SenderStorageId").clearSelect().fillSelect(result.StorageList).removeAttr("disabled");
                            $("#TeamId").clearSelect().fillSelect(result.TeamList, true).removeAttr("disabled");

                            $("#DealContractCashPaymentSumDiv").show();
                            $("#DealContractCashPaymentSum").text(result.DealContractCashPaymentSum);

                            //установим адреса
                            $("#OrganizationDeliveryAddress").val(result.OrganizationDeliveryAddress);
                            ExpenditureWaybill_Edit.DeliveryAddressTypeChange();

                            StopComboBoxProgress($("#TeamId"));
                            StopComboBoxProgress($("#SenderStorageId"));
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealSelectList");
                    }
                });
            });
        }

        // обработка выбора квоты
        function BindDealQoutaSelection() {
            $("#gridDealQuotaSelect .dealQuota_select_link").die("click");
            $("#gridDealQuotaSelect .dealQuota_select_link").live("click", function () {
                var dealQuotaId = $(this).parent("td").parent("tr").find(".quotaId").text();
                var dealQuotaName = $(this).parent("td").parent("tr").find(".quotaFullName").text();
                var isPrepayment = $(this).parent("td").parent("tr").find(".isPrepayment").text();

                HideModal(function () {
                    $("#DealQuotaName").text(dealQuotaName);
                    $("#DealQuotaId").val(dealQuotaId);

                    if (isPrepayment == "1") {
                        ExpenditureWaybill_Edit.DisablePaymentFormSelection();
                    } else {
                        ExpenditureWaybill_Edit.EnablePaymentFormSelection();
                    }
                });
            });
        }

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });
    },

    DeliveryAddressTypeValidation: function () {
        var deliveryAddressTypeId = $("#DeliveryAddressTypeId").val();

        if (deliveryAddressTypeId == "3") {
            if ($("#CustomDeliveryAddress").val() == "") {
                $('#CustomDeliveryAddress').ValidationError("Введите адрес доставки");

                return false;
            }
        }
        $('#CustomDeliveryAddress').ValidationValid();

        return true;
    },

    DeliveryAddressTypeChange: function () {
        var deliveryAddressTypeId = $("#DeliveryAddressTypeId").val();
        switch (deliveryAddressTypeId) {
            case "1":
                $("#divCustomDeliveryAddress").hide();
                $("#divSelectedDeliveryAddress").html($("#ClientDeliveryAddress").val());
                break;
            case "2":
                $("#divCustomDeliveryAddress").hide();
                $("#divSelectedDeliveryAddress").html($("#OrganizationDeliveryAddress").val());
                break;
            case "3":
                $("#divSelectedDeliveryAddress").text("");
                $("#divCustomDeliveryAddress").show();
                break;
            default:
                $("#divSelectedDeliveryAddress").text("");
                $("#divCustomDeliveryAddress").hide();
        }
    },

    EnablePaymentFormSelection: function () {
        $("#IsPrepayment").attr("disabled", "disabled");
        $("#rbIsPrepayment_false").removeAttr("disabled");
        $("#rbIsPrepayment_true").removeAttr("disabled");
        $("#rbIsPrepayment_false").attr("checked", "checked");
        $("#rbIsPrepayment_true").removeAttr("checked");
    },

    DisablePaymentFormSelection: function () {
        $("#IsPrepayment").removeAttr("disabled");
        $("#IsPrepayment").val("1");
        $("#rbIsPrepayment_false").attr("disabled", "disabled");
        $("#rbIsPrepayment_true").attr("disabled", "disabled");
        $("#rbIsPrepayment_false").removeAttr("checked");
        $("#rbIsPrepayment_true").attr("checked", "checked");
    },

    OnSuccessExpenditureWaybillEdit: function (ajaxContext) {
        window.location = "/ExpenditureWaybill/Details?id=" + ajaxContext + "&backURL=" + $("#BackURL").val();
    },

    OnFailExpenditureWaybillEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageExpenditureWaybillEdit");
    }
};﻿var ExpenditureWaybill_NewAndAcceptedGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridNewAndAcceptedExpenditureWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + "&backURL=" + currentUrl);

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?id=" + storageId + "&backURL=" + currentUrl);

                var curatorId = $(this).find(".CuratorId").text();
                $(this).find("a.CuratorName").attr("href", "/User/Details?id=" + curatorId + "&backURL=" + currentUrl);
            });

            $("#btnCreateExpenditureWaybill").click(function () {
                window.location = "/ExpenditureWaybill/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var ExpenditureWaybill_RowEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#SellingCount", 12, $("#MeasureUnitScale").val(), "#expenditureWaybillRowEdit", true);
        });

        $("span#ArticleName.select_link").bind('click', function () {
            var storageId = $('#SenderStorageId').val();
            var senderId = $('#SenderId').val();

            $.ajax({
                type: "GET",
                url: "/Article/SelectArticleFromStorage/",
                data: { storageId: storageId, senderId: senderId },
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    ExpenditureWaybill_RowEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowEdit");
                }
            });
        });

        if ($("#expenditureWaybillRowEdit #ManualSourcesInfo").val() != "") {
            $("#expenditureWaybillRowEdit #SellingCount").disableInput();
        }

        $("#BatchLink.select_link").click(function () {
            var currentArticleBatchId = null;
            if ($("#expenditureWaybillRowEdit #CurrentReceiptWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                currentArticleBatchId = $("#expenditureWaybillRowEdit #CurrentReceiptWaybillRowId").val();
            }
            ExpenditureWaybill_RowEdit.SelectArticleBatch(currentArticleBatchId);
        });

        $("#ManualSourcesLink.select_link").click(function () {
            ExpenditureWaybill_RowEdit.SelectSourceWaybillRows();
        });

        $("#SellingCount").bind("keyup change paste cut", function () {
            ExpenditureWaybill_RowEdit.UpdateValueAddedTaxSum();
            ExpenditureWaybill_Shared.CheckSaveButtonAvailability();
        });

        // При изменении ставки НДС
        $("#expenditureWaybillRowEdit #ValueAddedTaxId").live("change", function () {
            ExpenditureWaybill_RowEdit.UpdateValueAddedTaxSum();
        });
    },

    OnFailExpenditureWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageExpenditureWaybillRowEdit");
    },

    OnSuccessExpenditureWaybillRowEdit: function (ajaxContext) {
        if ($('#expenditureWaybillRowEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridExpenditureWaybillRows", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        ExpenditureWaybill_Details.RefreshMainDetails(ajaxContext.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(ajaxContext.Permissions);
                        HideModal(function () {
                            ShowSuccessMessage("Сохранено.", "messageExpenditureWaybillRowList");
                        });
                    });
                });
            });
        }
        else {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridExpenditureWaybillRows", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        ExpenditureWaybill_RowEdit.ClearForm();
                        ExpenditureWaybill_Details.RefreshMainDetails(ajaxContext.MainDetails);
                        ExpenditureWaybill_Details.RefreshPermissions(ajaxContext.Permissions);
                        ShowSuccessMessage("Сохранено.", "messageExpenditureWaybillRowEdit");
                    });
                });
            });
        }
    },

    ClearForm: function () {
        $("#ArticleName").text("Выберите товар");
        $("#ArticleId").val("");
        $("#expenditureWaybillRowEdit #MeasureUnitName").text("");
        $("#expenditureWaybillRowEdit #BatchName").text("не выбрана");
        $("#expenditureWaybillRowEdit #PurchaseCost").text("---");
        $("#expenditureWaybillRowEdit #SenderAccountingPrice").text("---");

        $("#expenditureWaybillRowEdit #AvailableToReserveFromStorageCount").text("---");
        $("#expenditureWaybillRowEdit #AvailableToReserveCount").text("---");
        $("#expenditureWaybillRowEdit #AvailableToReserveFromPendingCount").text("---");
        $("#expenditureWaybillRowEdit #MarkupPercent").text("---");
        $("#expenditureWaybillRowEdit #MarkupSum").text("---");
        $("#expenditureWaybillRowEdit #SalePrice").text("---");
        $("#expenditureWaybillRowEdit #SalePriceValue").val("");
        $("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val("00000000-0000-0000-0000-000000000000");

        $("#expenditureWaybillRowEdit #SellingCount").val("");
        $("#expenditureWaybillRowEdit #SellingCount").removeClass("input-validation-error");
        $("#expenditureWaybillRowEdit #SellingCount_validationMessage").hide();
        $("#expenditureWaybillRowEdit #ManualSourcesInfo").val("");
        $("#expenditureWaybillRowEdit #ManualSourcesLink").hide();
        
        SetFieldScale("#SellingCount", 12, 0, "#expenditureWaybillRowEdit", true);
        ExpenditureWaybill_RowEdit.UpdateValueAddedTaxSum();

        DisableButton("btnSaveExpenditureWaybillRow");
        $("#BatchLink").hide();
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live('click', function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());

            if (IsTrue($("#ArticleSelector, #SelectSources").attr('checked'))) {
                HideModal(function () { ExpenditureWaybill_RowEdit.SelectSourceWaybillRows(); });
            }
            else {
                HideModal(function () {
                    ExpenditureWaybill_RowEdit.SelectArticleBatch();
                });
            }
        });
    },

    BindArticleBatchSelection: function () {
        $("#gridSelectArticleBatch .articleBatch_select_link").die("click");
        $("#gridSelectArticleBatch .articleBatch_select_link").live("click", function () {
            var availableToReserveCount = $(this).parent("td").parent("tr").find(".AvailableToReserveCount").text();
            var purchaseCost = $(this).parent("td").parent("tr").find(".purchaseCost").text();
            var senderAccountingPrice = $(this).closest("#articleBatchSelector").find("#SenderAccountingPrice").text();

            $("#expenditureWaybillRowEdit #BatchName").text($(this).parent("td").parent("tr").find(".batchName").text());
            $("#expenditureWaybillRowEdit #AvailableToReserveFromStorageCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromStorageCount").text());
            $("#expenditureWaybillRowEdit #AvailableToReserveCount").text(availableToReserveCount);
            $("#expenditureWaybillRowEdit #AvailableToReserveFromPendingCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromPendingCount").text());

            $("#expenditureWaybillRowEdit #SenderAccountingPrice").text(senderAccountingPrice);
            $("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val($(this).parent("td").parent("tr").find(".ReceiptWaybillRowId").text());

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#SellingCount", 12, measureUnitScale, "#expenditureWaybillRowEdit", true);

            var senderAccountingPriceValue = parseFloat(senderAccountingPrice.replaceAll(' ', ''));
            var purchaseCostValue = parseFloat(purchaseCost.replaceAll(' ', ''));
            var dealQuotaDiscountPercent = parseFloat($("#expenditureWaybillRowEdit #DealQuotaDiscountPercent").text().replaceAll(' ', ''));

            var digitsNumber;
            if (IsTrue($("#RoundSalePrice").val())) {
                digitsNumber = 0;
            }
            else {
                digitsNumber = 2;
            }

            var salePrice = ValueForEdit(senderAccountingPriceValue - (senderAccountingPriceValue * dealQuotaDiscountPercent / 100), digitsNumber);
            $("#expenditureWaybillRowEdit #SalePrice").text(ValueForDisplay(salePrice));
            $("#expenditureWaybillRowEdit #SalePriceValue").val(ValueForEdit(salePrice));

            if (IsTrue($("#AllowToViewPurchaseCost").val())) {
                $("#expenditureWaybillRowEdit #PurchaseCost").text(purchaseCost);
                $("#expenditureWaybillRowEdit #MarkupSum").text(ValueForDisplay(salePrice - purchaseCostValue, 2));
                $("#expenditureWaybillRowEdit #MarkupPercent").text(purchaseCostValue != 0 ? ValueForDisplay(((salePrice - purchaseCostValue) / purchaseCostValue) * 100, 2) : "---");
            }
            else {
                $("#expenditureWaybillRowEdit #PurchaseCost").text("---");
                $("#expenditureWaybillRowEdit #MarkupSum").text("---");
                $("#expenditureWaybillRowEdit #MarkupPercent").text("---");
            }

            $("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val($(this).findCell(".ReceiptWaybillRowId").text());

            $("#expenditureWaybillRowEdit #ManualSourcesInfo").val("");

            HideModal(function () {
                $("#BatchLink").show();
                $("#ManualSourcesLink").hide();

                $("#expenditureWaybillRowEdit #SellingCount").enableInput().val("").focus().removeAttr("disabled");
                ExpenditureWaybill_RowEdit.UpdateValueAddedTaxSum();
            });
        });
    },

    SelectArticleBatch: function (articleBatchToExcludeId) {
        $.ajax({
            type: "GET",
            url: "/Article/SelectArticleBatchByStorage/",
            data: { articleId: $("#ArticleId").val(), storageId: $("#SenderStorageId").val(), senderId: $("#SenderId").val(),
                date: $("#ExpenditureWaybillDate").val(), articleBatchToExcludeId: articleBatchToExcludeId
            },
            success: function (result) {
                $('#articleBatchSelector').hide().html(result);
                $.validator.unobtrusive.parse($("#articleBatchSelector"));
                ShowModal("articleBatchSelector");

                var availableToReserveCount = 0;

                $("#articleBatchSelector .AvailableToReserveCount").each(function () {
                    availableToReserveCount += parseFloat($(this).text().replaceAll(' ', ''));
                });

                $("#articleBatchSelector #AvailableToMoveTotalCount").text(availableToReserveCount);

                ExpenditureWaybill_RowEdit.BindArticleBatchSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                if ($("#expenditureWaybillRowEdit #CurrentReceiptWaybillRowId").val() == "00000000-0000-0000-0000-000000000000") {
                    ExpenditureWaybill_RowEdit.ClearForm();
                }
                ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowEdit");
            }
        });
    },

    BindManualSourcesSelection: function () {
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").die("click");
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "GET",
                url: "/ExpenditureWaybill/GetRowInfo/",
                data: { waybillId: $("#Id").val(),
                    batchId: $("#sourceWaybillRowSelector #SelectedBatchId").val()
                },
                success: function (result) {
                    $("#ManualSourcesInfo").val($("#sourceWaybillRowSelector #SelectedSources").val());

                    var sellingCount = 0;
                    var selectedSourcesInfo = $("#ManualSourcesInfo").val().split(";");
                    $.each(selectedSourcesInfo, function (i, val) {
                        var fields = val.split("_");
                        var count = TryGetDecimal(fields[1]);

                        if (!isNaN(count)) {
                            sellingCount += count;
                        }
                    });

                    $("#expenditureWaybillRowEdit #SellingCount").disableInput().val(ValueForEdit(sellingCount));
                    $("#BatchLink").hide();
                    $("#ManualSourcesLink").show();
                    $("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val($("#SelectedBatchId").val());
                    $("#expenditureWaybillRowEdit #BatchName").text($("#SelectedBatchName").val());

                    ExpenditureWaybill_Shared.CheckSaveButtonAvailability();

                    $("#expenditureWaybillRowEdit #PurchaseCost").text(result.PurchaseCost);
                    $("#expenditureWaybillRowEdit #AvailableToReserveFromStorageCount").text(result.AvailableToReserveFromStorageCount);
                    $("#expenditureWaybillRowEdit #AvailableToReserveCount").text(result.AvailableToReserveCount);
                    $("#expenditureWaybillRowEdit #AvailableToReserveFromPendingCount").text(result.AvailableToReserveFromPendingCount);
                    $("#expenditureWaybillRowEdit #MarkupPercent").text(result.MarkupPercent);
                    $("#expenditureWaybillRowEdit #MarkupSum").text(result.MarkupSum);
                    $("#expenditureWaybillRowEdit #SenderAccountingPrice").text(result.SenderAccountingPrice);

                    $("#expenditureWaybillRowEdit #SalePrice").text(result.SalePrice);
                    $("#expenditureWaybillRowEdit #SalePriceValue").val(result.SalePriceValue);

                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageOutgoingWaybillRow");
                }
            });
        });
    },

    SelectSourceWaybillRows: function () {
        $.ajax({
            type: "GET",
            url: "/OutgoingWaybillRow/GetAvailableToReserveWaybillRows/",
            data: { type: "ExpenditureWaybill",
                articleId: $("#expenditureWaybillRowEdit #ArticleId").val(),
                storageId: $("#expenditureWaybillRowEdit #SenderStorageId").val(),
                organizationId: $("#expenditureWaybillRowEdit #SenderId").val(),
                selectedSourcesInfo: $("#ManualSourcesInfo").val(),
                waybillRowId: $("#expenditureWaybillRowEdit #Id").val()
            },
            success: function (result) {
                $('#sourceWaybillRowSelector').hide().html(result);

                var selectedBatchId = $("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val();

                if (selectedBatchId != "00000000-0000-0000-0000-000000000000" && $("#ManualSourcesInfo").val() != "") {
                    $("#SelectedBatchId").val($("#expenditureWaybillRowEdit #ReceiptWaybillRowId").val());
                    $("#SelectedBatchName").val($("#expenditureWaybillRowEdit #BatchName").text());
                }

                var selectedBatch = $("#SelectedBatchId").val();
                OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(selectedBatch);

                $.validator.unobtrusive.parse($("#sourceWaybillRowSelector"));
                ShowModal("sourceWaybillRowSelector");

                ExpenditureWaybill_RowEdit.BindManualSourcesSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowEdit");
            }
        });
    },

    // Перерасчет суммы НДС по позиции
    UpdateValueAddedTaxSum: function () {
        var sum = TryGetDecimal($("#expenditureWaybillRowEdit #SalePriceValue").val());
        var count = TryGetDecimal($("#expenditureWaybillRowEdit #SellingCount").val());
        var vatPercent = TryGetDecimal($("#expenditureWaybillRowEdit #ValueAddedTaxId option:selected").attr("param"));
        var vatSum = CalculateVatSum(sum * count, vatPercent);

        if (!isNaN(vatSum)) {
            $("#expenditureWaybillRowEdit #ValueAddedTaxSum").text(ValueForDisplay(vatSum, 2));
        } else {
            $("#expenditureWaybillRowEdit #ValueAddedTaxSum").text("0");
        }
    }

};
﻿var ExpenditureWaybill_RowGrid = {
    Init: function () {
        $(document).ready(function () {

            // добавление позиции
            $("#btnCreateExpenditureWaybillRow").click(function () {
                var expenditureWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ExpenditureWaybill/AddRow",
                    data: { expenditureWaybillId: expenditureWaybillId },
                    success: function (result) {
                        $('#expenditureWaybillRowEdit').hide().html(result);
                        ShowModal("expenditureWaybillRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowList");
                    }
                });
            });

            // редактирование / просмотр позиции
            $("#gridExpenditureWaybillRows .edit_link, #gridExpenditureWaybillRows .details_link").click(function () {

                var expenditureWaybillId = $('#Id').val();
                var expenditureWaybillRowId = $(this).parent("td").parent("tr").find(".expenditureWaybillRowId").text();

                $.ajax({
                    type: "GET",
                    url: "/ExpenditureWaybill/EditRow",
                    data: { expenditureWaybillId: expenditureWaybillId, expenditureWaybillRowId: expenditureWaybillRowId },
                    success: function (result) {
                        $('#expenditureWaybillRowEdit').hide().html(result);
                        ShowModal("expenditureWaybillRowEdit");

                        if ($("#expenditureWaybillRowEdit #ManualSourcesInfo").val() == "") {
                            $("#BatchLink").show();
                        }
                        else {
                            $("#ManualSourcesLink").show();
                        }

                        $("#expenditureWaybillRowEdit #SellingCount").focus();
                        ExpenditureWaybill_Shared.CheckSaveButtonAvailability();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowList");
                    }
                });
            });

            //просмотр источников позиции накладной
            $("#gridExpenditureWaybillRows .source_link").click(function () {
                var WaybillRowId = $(this).parent("td").parent("tr").find(".expenditureWaybillRowId").text();
                var articleName = $(this).parent("td").parent("tr").find(".ArticleName").text();
                var batchName = $(this).parent("td").parent("tr").find(".Batch").text();

                $.ajax({
                    type: "POST",
                    url: "/OutgoingWaybillRow/GetSourceWaybill/",
                    data: { type: "ExpenditureWaybill", id: WaybillRowId, articleName: articleName, batchName: batchName },
                    success: function (result) {
                        $("#expenditureWaybillSourceLink").hide().html(result);
                        ShowModal("expenditureWaybillSourceLink");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowList");
                    }
                });
            });

            // удаление позиции накладной
            $("#gridExpenditureWaybillRows .delete_link").click(function () {
                if (confirm('Вы уверены?')) {
                    var expenditureWaybillId = $('#Id').val();
                    var expenditureWaybillRowId = $(this).parent("td").parent("tr").find(".expenditureWaybillRowId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ExpenditureWaybill/DeleteRow/",
                        data: { expenditureWaybillId: expenditureWaybillId, expenditureWaybillRowId: expenditureWaybillRowId },
                        success: function (result) {
                            // грид для формы добавления товаров списком
                            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                                RefreshGrid("gridExpenditureWaybillRows", function () {
                                    RefreshGrid("gridArticleGroups", function () {
                                        ExpenditureWaybill_Details.RefreshMainDetails(result.MainDetails);
                                        ExpenditureWaybill_Details.RefreshPermissions(result.Permissions);
                                        ShowSuccessMessage("Позиция удалена.", "messageExpenditureWaybillRowList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageExpenditureWaybillRowList");
                        }
                    });
                }
            });

        });
    }
};﻿var ExpenditureWaybill_Shared = {
    CheckSaveButtonAvailability: function () {
        var sellingCount = TryGetDecimal($("#expenditureWaybillRowEdit #SellingCount").val());
        var availableToReserveCount = TryGetDecimal($("#expenditureWaybillRowEdit #AvailableToReserveCount").text().replaceAll(' ', ''));

        var manualSourcesInfo = $("#ManualSourcesInfo").val();
        if (((manualSourcesInfo != "" && manualSourcesInfo != undefined) || (!isNaN(sellingCount) && !isNaN(availableToReserveCount) && (sellingCount <= availableToReserveCount))) && (sellingCount > 0)) {
            EnableButton("btnSaveExpenditureWaybillRow");
        }
        else {
            DisableButton("btnSaveExpenditureWaybillRow");
        }
    }
};﻿var ExpenditureWaybill_ShippedGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridShippedExpenditureWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ExpenditureWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + "&backURL=" + currentUrl);

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);

                var storageId = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?id=" + storageId + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var ExportTo1C_Settings = {
    Init: function () {
        $(function () {

            $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
                window.location = window.location;
            });

            $("#multipleSelectorAccountOrganization").live("addElement", function (event, param) {
                for (i = 0; i < param.length; i++) {
                    HideElement("multipleSelectorCommissionaireOrganizations", param[i]);
                    HideElement("multipleSelectorConsignorOrganizations", param[i]);
                    HideElement("multipleSelectorReturnsFromCommissionaireOrganizations", param[i]);
                    HideElement("multipleSelectorReturnsAcceptedByCommissionaireOrganizations", param[i]);
                }
            });

            $("#multipleSelectorAccountOrganization").live("removeElement", function (event, param) {
                for (i = 0; i < param.length; i++) {
                    ShowElement("multipleSelectorCommissionaireOrganizations", param[i]);
                    ShowElement("multipleSelectorConsignorOrganizations", param[i]);
                    ShowElement("multipleSelectorReturnsFromCommissionaireOrganizations", param[i]);
                    ShowElement("multipleSelectorReturnsAcceptedByCommissionaireOrganizations", param[i]);
                }
            });

            $("#AddTransfersToCommission").prev().bind("change", function () {
                GetMultipleSelectorList("AddTransfersToCommission", "CommissionaireOrganizations");
            });

            $("#AddReturnsFromCommissionaires").prev().bind("change", function () {
                GetMultipleSelectorList("AddReturnsFromCommissionaires", "ReturnsFromCommissionaireOrganizations");
            });

            $("#AddReturnsAcceptedByCommissionaires").prev().bind("change", function () {
                GetMultipleSelectorList("AddReturnsAcceptedByCommissionaires", "ReturnsAcceptedByCommissionaireOrganizations");
            });

            $("#OperationTypeId").live("change", function () {
                $("#AccountOrganizations input.multiple_selector_remove_button").trigger("click");
                $("#CommissionaireOrganizations input.multiple_selector_remove_button").trigger("click");
                $("#ReturnsFromCommissionaireOrganizations input.multiple_selector_remove_button").trigger("click");
                $("#ReturnsAcceptedByCommissionaireOrganizations input.multiple_selector_remove_button").trigger("click");
                $("#ConsignorOrganizations input.multiple_selector_remove_button").trigger("click");

                ResetYesNoToggle($("#AddTransfersToCommission").prev());
                $("#CommissionaireOrganizations .OrganizationList").hide();

                ResetYesNoToggle($("#AddReturnsFromCommissionaires").prev());
                $("#ReturnsFromCommissionaireOrganizations .OrganizationList").hide();

                ResetYesNoToggle($("#AddReturnsAcceptedByCommissionaires").prev());
                $("#ReturnsAcceptedByCommissionaireOrganizations .OrganizationList").hide();

                var operationTypeId = $("#OperationTypeId").val();
                switch (operationTypeId.toString()) {
                    case "1":
                        $("#AccountOrganizations .group_title").text("Выберите организацию, реализацию которой нужно выгружать:");
                        $("#CommissionaireOrganizations").show();
                        $("#ReturnsFromCommissionaireOrganizations").hide();
                        $("#ReturnsAcceptedByCommissionaireOrganizations").hide();
                        $("#ConsignorOrganizations").hide();
                        break;
                    case "2":
                        $("#AccountOrganizations .group_title").text("Выберите организацию, перемещения внутри которой нужно выгрузить:");
                        $("#CommissionaireOrganizations").hide();
                        $("#ReturnsFromCommissionaireOrganizations").hide();
                        $("#ReturnsAcceptedByCommissionaireOrganizations").hide();
                        $("#ConsignorOrganizations").hide();
                        break;
                    case "3":
                        $("#AccountOrganizations .group_title").text("Выберите организацию, которая принимала возвраты:");
                        $("#CommissionaireOrganizations").hide();
                        $("#ReturnsFromCommissionaireOrganizations").show();
                        $("#ReturnsAcceptedByCommissionaireOrganizations").show();
                        $("#ConsignorOrganizations").hide();
                        break;
                    case "4":
                        $("#AccountOrganizations .group_title").text("Выберите организацию, на которую передается товар на комиссию:");
                        $("#CommissionaireOrganizations").hide();
                        $("#ReturnsFromCommissionaireOrganizations").hide();
                        $("#ReturnsAcceptedByCommissionaireOrganizations").hide();
                        if ($("#ConsignorOrganizations").html() == "" || $("#ConsignorOrganizations .OrganizationList").html() == null
                        || $("#ConsignorOrganizations").html() == undefined) {
                            $.ajax({
                                type: "GET",
                                url: "/ExportTo1C/GetConsignorOrganizationsList/",
                                success: function (result) {
                                    $("#ConsignorOrganizations").html(result);
                                },
                                error: function (XMLHttpRequest, textStatus, thrownError) {
                                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExportTo1CSettings");
                                }
                            });
                        }
                        $("#ConsignorOrganizations").show();
                        break;
                    default:
                        $("#AccountOrganizations .group_title").text("Выберите организацию, для которой выгружать данные:");
                        $("#CommissionaireOrganizations").hide();
                        $("#ReturnsFromCommissionaireOrganizations").hide();
                        $("#ConsignorOrganizations").hide();
                }
            });


            $("#btnExport, #btnExport2").live("click", function () {
                if (ValidateExportParameters()) {

                    var url = "/ExportTo1C/ExportOperationsTo1C?" +
                    "startDate=" + $("#StartDate").val() +
                    "&endDate=" + $("#EndDate").val() +
                    "&OperationTypeId=" + $("#OperationTypeId").val() +
                    "&AddTransfersToCommission=" + $('#AddTransfersToCommission').val() +
                    "&AddReturnsFromCommissionaires=" + $('#AddReturnsFromCommissionaires').val() +
                    "&AddReturnsAcceptedByCommissionaires=" + $('#AddReturnsAcceptedByCommissionaires').val() +
                    "&" + $("#multipleSelectorAccountOrganization").FormSelectedEntitiesUrlParametersString("AllAccountOrganizations", "AccountOrganizationIDs") +
                    "&" + $("#multipleSelectorCommissionaireOrganizations").FormSelectedEntitiesUrlParametersString("AllCommissionaireOrganizations", "CommissionaireOrganizationsIDs") +
                    "&" + $("#multipleSelectorConsignorOrganizations").FormSelectedEntitiesUrlParametersString("AllConsignorOrganizations", "ConsignorOrganizationsIDs") +
                    "&" + $("#multipleSelectorReturnsFromCommissionaireOrganizations").FormSelectedEntitiesUrlParametersString("AllReturnsFromCommissionairesOrganizations", "ReturnsFromCommissionairesOrganizationsIDs") +
                    "&" + $("#multipleSelectorReturnsAcceptedByCommissionaireOrganizations").FormSelectedEntitiesUrlParametersString("AllReturnsAcceptedByCommissionairesOrganizations", "ReturnsAcceptedByCommissionairesOrganizationsIDs");

                    StartButtonProgress($(this));

                    $.fileDownload(url, {
                        successCallback: function (response) {
                            StopButtonProgress();
                            scroll(0, $("#messageExportTo1CSettings").offset().top - 10);
                            ShowSuccessMessage("Файл успешно сформирован.", "messageExportTo1CSettings");
                        },
                        failCallback: function (response) {
                            StopButtonProgress();
                            scroll(0, $("#messageExportTo1CSettings").offset().top - 10);
                            ShowErrorMessage("Произошла ошибка при экспорте данных: " + response, "messageExportTo1CSettings");
                        }
                    });
                }
            });

            function ValidateExportParameters() {
                var scroll_y = $("#messageExportTo1CSettings").offset().top - 10;

                var operationTypeId = $("#OperationTypeId").val();

                if (operationTypeId == "") {
                    scroll(0, scroll_y);
                    ShowErrorMessage("Не выбран тип операции.", "messageExportTo1CSettings");
                    return false;
                }

                if (!ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageExportTo1CSettings", true, scroll_y)) {
                    return false;
                }


                if (IsFalse($("#multipleSelectorAccountOrganization").CheckSelectedEntitiesCount("Не выбрана ни одна организация, для которой выгружаются данные.",
                "Выберите все организации или не больше ", "messageExportTo1CSettings"))) {
                    scroll(0, scroll_y);
                    return false;
                }

                if (operationTypeId == 1 && $("#AddTransfersToCommission").val() == "1") {
                    if (IsFalse($("#multipleSelectorCommissionaireOrganizations").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация комиссионер.",
                "Выберите все организации или не больше ", "messageExportTo1CSettings"))) {
                        scroll(0, scroll_y);
                        return false;
                    }
                }

                if (operationTypeId == 4) {
                    if (IsFalse($("#multipleSelectorConsignorOrganizations").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация, которая передает товар на комиссию.",
                "Выберите все организации или не больше ", "messageExportTo1CSettings"))) {
                        scroll(0, scroll_y);
                        return false;
                    }
                }

                if (operationTypeId == 3 && $("#AddReturnsFromCommissionaires").val() == "1") {
                    if (IsFalse($("#multipleSelectorReturnsFromCommissionaireOrganizations").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация-комиссионер возвраты от которой нужно выгрузить.",
                "Выберите все организации или не больше ", "messageExportTo1CSettings"))) {
                        scroll(0, scroll_y);
                        return false;
                    }
                }

                if (operationTypeId == 3 && $("#AddReturnsAcceptedByCommissionaires").val() == "1") {
                    if (IsFalse($("#multipleSelectorReturnsAcceptedByCommissionaireOrganizations").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация-комиссионер, возвраты от клиентов которой нужно выгрузить.",
                "Выберите все организации или не больше ", "messageExportTo1CSettings"))) {
                        scroll(0, scroll_y);
                        return false;
                    }
                }
                return true;
            }

            function GetMultipleSelectorList(addOptionId, selectorDivId) {
                if ($("#" + addOptionId).val() == "1") {
                    if ($("#" + selectorDivId + " .OrganizationList").html() == "" || $("#" + selectorDivId + " .OrganizationList").html() == null
                    || $("#" + selectorDivId + " .OrganizationList").html() == undefined) {
                        StartLinkProgress($("#" + selectorDivId + " .OrganizationList"));
                        $.ajax({
                            type: "GET",
                            url: "/ExportTo1C/Get" + selectorDivId + "List/",
                            success: function (result) {
                                $("#" + selectorDivId + " .OrganizationList").html(result);
                                $("#multipleSelectorAccountOrganization_selected").find('div.multiple_selector_item:visible').each(function (index, element) {
                                    HideElement("multipleSelector" + selectorDivId, $(element).attr("value"));
                                });
                                StopLinkProgress();
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageExportTo1CSettings");
                                StopLinkProgress();
                            }
                        });
                    }
                    $("#" + selectorDivId + " .OrganizationList").show();
                }
                else {
                    $("#" + selectorDivId + " .OrganizationList").hide();
                }
            }

            function HideElement(selectorId, elementValue) {
                var item = $("#" + selectorId + " div.multiple_selector_item[value=" + elementValue + "]");

                if ($(item).parent().attr("id") == selectorId + "_selected") $(item).trigger("click");

                $("#" + selectorId + " div.multiple_selector_item[value=" + elementValue + "]").hide();
            }

            function ShowElement(selectorId, elementValue) {
                $("#" + selectorId + " div.multiple_selector_item[value=" + elementValue + "]").show();
            }

            function ValidateDate(startDate, endDate, messageId, performScrolling, scroll_y) {
                var starDateObj = stringToDate(startDate);
                var endDateObj = stringToDate(endDate);

                if (!isValidDate(starDateObj)) {
                    if (performScrolling) {
                        scroll(0, scroll_y);
                    }
                    ShowErrorMessage("Неверная дата начала периода.", messageId);

                    return false;
                }

                if (!isValidDate(endDateObj)) {
                    if (performScrolling) {
                        scroll(0, scroll_y);
                    }
                    ShowErrorMessage("Неверная дата окончания периода.", messageId);

                    return false;
                }

                if (starDateObj > endDateObj) {
                    if (performScrolling) {
                        scroll(0, scroll_y);
                    }
                    ShowErrorMessage("Дата начала периода должна быть меньше даты окончания периода.", messageId);

                    return false;
                }

                var today = new Date();
                if (endDateObj > today) {
                    if (performScrolling) {
                        scroll(0, scroll_y);
                    }
                    ShowErrorMessage("Дата окончания периода должна быть меньше или равна текущей дате.", messageId);

                    return false;
                }

                return true;
            }
        });
    }
};
﻿var LegalForm_Edit = {
    OnBeginLegalFormSave: function () {
        StartButtonProgress($("#btnSaveLegalForm"));
    },

    OnFailLegalFormSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageLegalFormEdit");
    }
};
﻿var LegalForm_LegalFormGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateLegalForm').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                LegalForm_LegalFormGrid.ShowLegalFormDetailsForEdit(id);
            });

            $('#gridLegalForm .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                LegalForm_LegalFormGrid.ShowLegalFormDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "LegalForm";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridLegalForm", function () {
                                ShowSuccessMessage("Удалено.", "messageLegalFormList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageLegalFormList");
                        }
                    });
                }
            });
        });
    },

    ShowLegalFormDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "LegalForm";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#legalFormEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#legalFormEdit"));
                ShowModal("legalFormEdit");
                $("#legalFormEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageLegalFormList");
            }
        });
    }
};
﻿var LegalForm_List = {
    OnSuccessLegalFormSave: function () {
        HideModal();
        RefreshGrid("gridLegalForm", function () {
            ShowSuccessMessage("Сохранено.", "messageLegalFormList");
        });
    }
};
﻿var Manufacturer_Edit = {
    OnBeginManufacturerSave: function () {
        StartButtonProgress($("#btnSaveManufacturer"));
    },

    OnFailManufacturerSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageManufacturerEdit");
    }
};
﻿var Manufacturer_List = {
    OnSuccessManufacturerSave: function () {
        HideModal();
        RefreshGrid("gridManufacturer", function () {
            ShowSuccessMessage("Сохранено.", "messageManufacturerList");
        });
    }
};
﻿var Manufacturer_ManufacturerGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateManufacturer').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                Manufacturer_ManufacturerGrid.ShowManufacturerDetailsForEdit(id);
            });

            $('#gridManufacturer .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                Manufacturer_ManufacturerGrid.ShowManufacturerDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "Manufacturer";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridManufacturer", function () {
                                ShowSuccessMessage("Удалено.", "messageManufacturerList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageManufacturerList");
                        }
                    });
                }
            });
        });
    },

    ShowManufacturerDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "Manufacturer";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#manufacturerEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#manufacturerEdit"));
                ShowModal("manufacturerEdit");
                $("#manufacturerEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageManufacturerList");
            }
        });
    }
};
﻿var Manufacturer_ManufacturerSelector = {
    Init: function () {
        $(document).ready(function () {
            $("#addNewManufacturerLink").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Manufacturer/Create/",
                    data: { producerId: $("#ProducerId").val() },
                    success: function (result) {
                        $("#addNewManufacturer").hide().html(result);
                        $.validator.unobtrusive.parse($("#addNewManufacturer"));
                        ShowModal("addNewManufacturer");
                        $("#addNewManufacturer #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAddNewManufacturer");
                    }
                });
            });
        });
    }
};
﻿var MeasureUnit_Edit = {    
    OnBeginMeasureUnitSave : function () {
        StartButtonProgress($("#btnSaveMeasureUnit"));
    },
        
    OnFailMeasureUnitSave : function (ajaxContext) {        
        ShowErrorMessage(ajaxContext.responseText, "messageMeasureUnitEdit");
    }
};
﻿var MeasureUnit_List = {
    OnSuccessMeasureUnitSave: function () {
        HideModal();
        RefreshGrid("gridMeasureUnits", function () {
            ShowSuccessMessage("Единица измерения сохранена.", "messageMeasureUnitList");
        });
    }
};
﻿var MeasureUnit_MeasureUnitGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridMeasureUnits table.grid_table tr").each(function (i, el) {
                $(this).find("a.FullName").attr("onclick", "return false;");
            });

            $('#btnCreateMeasureUnit').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                MeasureUnit_MeasureUnitGrid.ShowMeasureUnitDetailsForEdit(id);
            });

            $('#gridMeasureUnits .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                MeasureUnit_MeasureUnitGrid.ShowMeasureUnitDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/MeasureUnit/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridMeasureUnits", function () {
                                ShowSuccessMessage("Единица измерения удалена.", "messageMeasureUnitList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMeasureUnitList");
                        }
                    });
                }
            });
        });
    },

    ShowMeasureUnitDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");

        $.ajax({
            type: "GET",
            url: "/MeasureUnit/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#measureUnitEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#measureUnitEdit"));
                ShowModal("measureUnitEdit");
                $("#measureUnitEdit #ShortName").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageMeasureUnitList");
            }
        });
    }
};
﻿var MeasureUnit_MeasureUnitSelector = {
    Init: function () {
        $(document).ready(function () {
            $("#createMeasureUnit").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MeasureUnit/Create/",
                    success: function (result) {
                        $('#Edit').hide().html(result);
                        $.validator.unobtrusive.parse($("#Edit"));
                        ShowModal("Edit");
                        $("#Edit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageSelectMeasureUnit");
                    }
                });
            });
        });
    }
};﻿var MovementWaybill_AddRowsByList = {
    Init: function () {
        $(document).ready(function () {
            Article_AddRowsByList.Init();

            Waybill_ForWaybillRowsAdditionByListGrid.actionName = "/MovementWaybill/AddRowSimply/";
            Waybill_ForWaybillRowsAdditionByListGrid.gridId = "gridMovementWaybillRows";
            Waybill_ForWaybillRowsAdditionByListGrid.messageId = "messageMovementWaybillRowList"  
        });
    }
};
﻿var MovementWaybill_Details = {
    Init: function () {
        $(document).ready(function () {

            $('#btnAddRowsByList').live("click", function () {
                var id = $('#Id').val();
                window.location = "/MovementWaybill/AddRowsByList?id=" + id + GetBackUrl();
            });

            $('#printingFormSenderCost').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowPrintingFormSettings/",
                    data: { PrintSenderPrice: true,
                        PrintRecepientPrice: false,
                        PrintMarkup: false
                    },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            $('#printingFormReceiptCost').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowPrintingFormSettings/",
                    data: { PrintSenderPrice: false,
                        PrintRecepientPrice: true,
                        PrintMarkup: false
                    },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            $('#printingFormReceiptAllCost').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowPrintingFormSettings/",
                    data: { PrintSenderPrice: true,
                        PrintRecepientPrice: true,
                        PrintMarkup: true
                    },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            $('#printingFormTORG12').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowTORG12PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // T-1 (TTH)
            $('#printingFormT1').live('click', function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/GetT1PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            $('#cashMemoPrintingForm').click('click', function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowCashMemoPrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            $('#invoicePrintingForm').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/ShowInvoicePrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#movementWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#movementWaybillPrintingForm"));
                        ShowModal("movementWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // Подготовить накладную к проводке
            $("#btnPrepareToAcceptMovementWaybill").click(function () {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/MovementWaybill/PrepareToAccept/",
                    data: { id: movementWaybillId },
                    success: function (result) {
                        RefreshGrid("gridMovementWaybillRows", function () {
                            MovementWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Накладная подготовлена к проводке.", "messageMovementWaybillDetails");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // Отменить готовность к проводке
            $('#btnCancelReadinessToAcceptMovementWaybill').click(function () {
                if (confirm('Вы действительно хотите отменить готовность накладной к проводке?')) {
                    var movementWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/MovementWaybill/CancelReadinessToAccept/",
                        data: { id: movementWaybillId },
                        success: function (result) {
                            RefreshGrid("gridMovementWaybillRows", function () {
                                MovementWaybill_Details.RefreshMainDetails(result);
                                ShowSuccessMessage("Готовность накладной к проводке отменена.", "messageMovementWaybillDetails");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                        }
                    });
                }
            });

            // Отгрузить
            $('#btnShipMovementWaybill').click(function () {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/MovementWaybill/Ship/",
                    data: { id: movementWaybillId },
                    success: function (result) {
                        RefreshGrid("gridMovementWaybillRows", function () {
                            MovementWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Отгрузка произведена.", "messageMovementWaybillDetails");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // Отменить отгрузку
            $('#btnCancelShippingMovementWaybill').click(function () {
                if (confirm('Вы действительно хотите отменить отгрузку накладной?')) {
                    var movementWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/MovementWaybill/CancelShipping/",
                        data: { id: movementWaybillId },
                        success: function (result) {
                            RefreshGrid("gridMovementWaybillRows", function () {
                                MovementWaybill_Details.RefreshMainDetails(result);
                                ShowSuccessMessage("Отмена отгрузки произведена.", "messageMovementWaybillDetails");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                        }
                    });
                }
            });

            // Принять
            $('#btnReceiptMovementWaybill').click(function () {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/MovementWaybill/Receipt/",
                    data: { id: movementWaybillId },
                    success: function (result) {
                        RefreshGrid("gridMovementWaybillRows", function () {
                            MovementWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Приемка произведена.", "messageMovementWaybillDetails");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // Отменить приемку
            $('#btnCancelReceiptMovementWaybill').click(function () {
                if (confirm('Вы действительно хотите отменить приемку накладной?')) {
                    var movementWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/MovementWaybill/CancelReceipt/",
                        data: { id: movementWaybillId },
                        success: function (result) {
                            RefreshGrid("gridMovementWaybillRows", function () {
                                MovementWaybill_Details.RefreshMainDetails(result);
                                ShowSuccessMessage("Отмена приемки произведена.", "messageMovementWaybillDetails");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                        }
                    });
                }
            });

            // Провести
            $('#btnAcceptMovementWaybill').click(function () {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/MovementWaybill/Accept/",
                    data: { id: movementWaybillId },
                    success: function (result) {
                        RefreshGrid("gridMovementWaybillRows", function () {
                            MovementWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Проводка произведена.", "messageMovementWaybillDetails");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            });

            // Отменить проводку
            $('#btnCancelAcceptanceMovementWaybill').click(function () {
                if (confirm('Вы действительно хотите отменить проводку накладной?')) {
                    var movementWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/MovementWaybill/CancelAcceptance/",
                        data: { id: movementWaybillId },
                        success: function (result) {
                            RefreshGrid("gridMovementWaybillRows", function () {
                                MovementWaybill_Details.RefreshMainDetails(result);
                                ShowSuccessMessage("Отмена проводки произведена.", "messageMovementWaybillDetails");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                        }
                    });
                }
            });

            // Изменить куратора
            $("#linkChangeCurator").click(function () {
                var storageIds = $("#SenderStorageId").val() + "_" + $("#RecipientStorageId").val();
                Waybill_Edit.ShowCuratorSelectorForm(2/*waybillTypeId*/, storageIds, "", null, "messageMovementWaybillDetails");
            });

            // обработка выбора куратора
            $(".select_user").live("click", function () {
                Waybill_Details.HandlerForSelectCurator(2/*waybillTypeId*/, $(this));
            });

        });         // document ready

        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });

        // Редактировать
        $('#btnEditMovementWaybill').live("click", function () {
            var movementWaybillId = $('#Id').val();
            window.location = "/MovementWaybill/Edit?id=" + movementWaybillId + GetBackUrl();
        });

        // Удалить
        $('#btnDeleteMovementWaybill').live('click', function () {
            if (confirm('Вы уверены?')) {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/MovementWaybill/Delete/",
                    data: { id: movementWaybillId },
                    success: function () {
                        window.location = "/MovementWaybill/List";
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillDetails");
                    }
                });
            }
        });
    },

    OnSuccessMovementWaybillRowEdit: function (ajaxContext) {
        if ($('#movementWaybillRowEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridArticleGroups", function () {
                    RefreshGrid("gridMovementWaybillRows", function () {
                        HideModal(function () {
                            ShowSuccessMessage("Сохранено.", "messageMovementWaybillRowList");
                        });
                    });
                });

            });
        }
        else {
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridMovementWaybillRows", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        MovementWaybill_Shared.ClearForm();
                        ShowSuccessMessage("Сохранено.", "messageMovementWaybillRowEdit");
                    });
                });
            });
        }
        MovementWaybill_Details.RefreshMainDetails(ajaxContext);
    },

    // обновление основной информации о накладной и состояний кнопок
    RefreshMainDetails: function (details) {
        $("#StateName").text(details.MainDetails.StateName);
        $("#PurchaseCostSum").text(details.MainDetails.PurchaseCostSum);
        $("#SenderAccountingPriceSum").text(details.MainDetails.SenderAccountingPriceSum);
        $("#RecipientAccountingPriceSum").text(details.MainDetails.RecipientAccountingPriceSum);
        $("#MovementMarkupPercent").text(details.MainDetails.MovementMarkupPercent);
        $("#MovementMarkupSum").text(details.MainDetails.MovementMarkupSum);
        $("#RowCount").text(details.MainDetails.RowCount);
        $("#ShippingPercent").text(details.MainDetails.ShippingPercent);
        $("#RecipientStorageName").text(details.MainDetails.RecipientStorageName);
        $("#RecipientName").text(details.MainDetails.RecipientName);
        $("#SenderValueAddedTaxString").text(details.MainDetails.SenderValueAddedTaxString);
        $("#RecipientValueAddedTaxString").text(details.MainDetails.RecipientValueAddedTaxString);
        $("#TotalWeight").text(details.MainDetails.TotalWeight);
        $("#TotalVolume").text(details.MainDetails.TotalVolume);

        $("#AcceptedByName").text(details.MainDetails.AcceptedByName);
        $("#AcceptedById").val(details.MainDetails.AcceptedById);
        $("#AcceptanceDate").text(details.MainDetails.AcceptanceDate);
        $("#ShippedByName").text(details.MainDetails.ShippedByName);
        $("#ShippedById").val(details.MainDetails.ShippedById);
        $("#ShippingDate").text(details.MainDetails.ShippingDate);
        $("#ReceiptedByName").text(details.MainDetails.ReceiptedByName);
        $("#ReceiptedById").val(details.MainDetails.ReceiptedById);
        $("#ReceiptDate").text(details.MainDetails.ReceiptDate);

        $("#AllowToViewAcceptedByDetails").val(details.MainDetails.AllowToViewAcceptedByDetails);
        $("#AllowToViewShippedByDetails").val(details.MainDetails.AllowToViewShippedByDetails);
        $("#AllowToViewReceiptedByDetails").val(details.MainDetails.AllowToViewReceiptedByDetails);

        $("#AcceptedByContainer").css("display", details.MainDetails.AcceptedById != "" ? "inline" : "none");
        $("#ShippedByContainer").css("display", details.MainDetails.ShippedById != "" ? "inline" : "none");
        $("#ReceiptedByContainer").css("display", details.MainDetails.ReceiptedById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewShippedByDetails', 'ShippedByName', 'User', 'ShippedById');
        SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');

        UpdateButtonAvailability("btnPrepareToAcceptMovementWaybill", details.IsPossibilityToPrepareToAccept);
        UpdateButtonAvailability("btnCancelReadinessToAcceptMovementWaybill", details.AllowToCancelReadinessToAccept);
        UpdateButtonAvailability("btnEditMovementWaybill", details.AllowToEdit);
        UpdateButtonAvailability("btnAddMovementWaybillRow", details.AllowToAddRow);
        UpdateButtonAvailability("btnDeleteMovementWaybill", details.AllowToDelete);
        UpdateButtonAvailability("btnAcceptMovementWaybill", details.IsPossibilityToAccept);
        UpdateButtonAvailability("btnCancelAcceptanceMovementWaybill", details.AllowToCancelAcceptance);
        UpdateButtonAvailability("btnShipMovementWaybill", details.IsPossibilityToShip);
        UpdateButtonAvailability("btnCancelShippingMovementWaybill", details.AllowToCancelShipping);
        UpdateButtonAvailability("btnReceiptMovementWaybill", details.AllowToReceipt);
        UpdateButtonAvailability("btnCancelReceiptMovementWaybill", details.AllowToCancelReceipt);
        UpdateButtonAvailability("btnAddRowsByList", details.AllowToEdit);

        UpdateElementVisibility("btnPrepareToAcceptMovementWaybill", details.AllowToPrepareToAccept);
        UpdateElementVisibility("btnCancelReadinessToAcceptMovementWaybill", details.AllowToCancelReadinessToAccept);
        UpdateElementVisibility("btnEditMovementWaybill", details.AllowToEdit);
        UpdateElementVisibility("btnAddMovementWaybillRow", details.AllowToAddRow);
        UpdateElementVisibility("btnDeleteMovementWaybill", details.AllowToDelete);
        UpdateElementVisibility("btnAcceptMovementWaybill", details.AllowToAccept);
        UpdateElementVisibility("btnCancelAcceptanceMovementWaybill", details.AllowToCancelAcceptance);
        UpdateElementVisibility("btnShipMovementWaybill", details.AllowToShip);
        UpdateElementVisibility("btnCancelShippingMovementWaybill", details.AllowToCancelShipping);
        UpdateElementVisibility("btnReceiptMovementWaybill", details.AllowToReceipt);
        UpdateElementVisibility("btnCancelReceiptMovementWaybill", details.AllowToCancelReceipt);
        UpdateElementVisibility("btnAddRowsByList", details.AllowToEdit);

        UpdateElementVisibility("feature_menu_box", details.AllowToPrintForms);

        UpdateElementVisibility("cashMemoPrintingForm", details.AllowToPrintCashMemoForm);
        UpdateElementVisibility("invoicePrintingForm", details.AllowToPrintInvoiceForm);
        UpdateElementVisibility("printingFormSenderCost", details.AllowToPrintWaybillFormInSenderPrices);
        UpdateElementVisibility("printingFormReceiptCost", details.AllowToPrintWaybillFormInRecipientPrices);
        UpdateElementVisibility("printingFormReceiptAllCost", details.AllowToPrintWaybillFormInBothPrices);
        UpdateElementVisibility("printingFormTORG12", details.AllowToPrintTORG12Form);

        UpdateElementVisibility("linkChangeCurator", details.AllowToChangeCurator);
    }
};﻿var MovementWaybill_Details_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            SetEntityDetailsLink(null, 'SenderName', 'AccountOrganization', 'SenderId');

            SetEntityDetailsLink(null, 'RecipientName', 'AccountOrganization', 'RecipientId');

            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewShippedByDetails', 'ShippedByName', 'User', 'ShippedById');

            SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');

            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');

            SetEntityDetailsLink('AllowToViewSenderStorageDetails', 'SenderStorageName', 'Storage', 'SenderStorageId');

            SetEntityDetailsLink('AllowToViewRecipientStorageDetails', 'RecipientStorageName', 'Storage', 'RecipientStorageId');
        });
    }
};﻿var MovementWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {
            
            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");
            }

            $("#btnBack").live('click', function () {
                window.location = $('#BackURL').val();
            });

            $('#Number').change(function () {
                var num = $('#Number').val();
                var id = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/IsNumberUnique",
                    data: { number: num, id: id },
                    success: function (result) {
                        if (result == "False") {
                            $('#Number').addClass('input-validation-error');
                            $('#NumberIsUnique_validationMessage').removeClass('field-validation-valid').addClass('field-validation-error').text('Данный номер уже используется. Укажите другой номер.');
                            $('#NumberIsUnique').val(0);
                        }
                        else {
                            $('#NumberIsUnique_validationMessage').addClass('field-validation-valid').removeClass('field-validation-error').text('');
                            $('#NumberIsUnique').val(1);
                        }
                    }
                });
            });

            // связывание списков отправитель-организация отправителя
            $('#SenderStorageId').FillChildComboBox('SenderId', "/MovementWaybill/GetAccountOrganizationsForSenderStorage", 'storageId', "messageMovementWaybillEdit");

            // связывание списков получатель-организация получателя
            $('#RecipientStorageId').FillChildComboBox('RecipientId', "/MovementWaybill/GetAccountOrganizationsForRecipientStorage", 'storageId', "messageMovementWaybillEdit");

            MovementWaybill_Edit.UpdateValueAddedTaxListState($("#AllowToChangeValueAddedTax").val());

            $("#SenderStorageId").change(function () {
                MovementWaybill_Edit.UpdateValueAddedTaxListState(true);
            });

            $("#RecipientStorageId").change(function () {
                MovementWaybill_Edit.UpdateValueAddedTaxListState(true);
            });

            $("#SenderId").change(function () {
                MovementWaybill_Edit.RecalculateValueAddedTaxListState();
            });

            $("#RecipientId").change(function () {
                MovementWaybill_Edit.RecalculateValueAddedTaxListState();
            });

            $("#btnSave").live("click", function () {
                MovementWaybill_Edit.UpdateValueAddedTaxListState(true);
            });

            $("#CuratorName").click(function () {
                var storageId = $("#SenderStorageId").val() + "_" + $("#RecipientStorageId").val();
                if ($("#SenderStorageId").val() != "" && $("#RecipientStorageId").val() != "") {
                    Waybill_Edit.ShowCuratorSelectorForm(2/*WaybillTypeId*/, storageId, "", $(this), "messageMovementWaybillEdit");
                }
                else {
                    if ($("#SenderStorageId").val() == "") {
                        $("#SenderStorageId").ValidationError("Укажите отправителя.");
                    }
                    if ($("#RecipientStorageId").val() == "") {
                        $("#RecipientStorageId").ValidationError("Укажите получателя.");
                    }
                }
            });
        });
    },

    OnSuccessMovementWaybillEdit: function (ajaxContext) {
        window.location = "/MovementWaybill/Details?id=" + ajaxContext + "&backURL=/MovementWaybill/List";
    },

    OnFailMovementWaybillEdit: function (ajaxContext) {
        MovementWaybill_Edit.RecalculateValueAddedTaxListState();
        ShowErrorMessage(ajaxContext.responseText, "messageMovementWaybillEdit");
    },

    RecalculateValueAddedTaxListState: function () {
        var senderId = $("#SenderId").val();
        var recipientId = $("#RecipientId").val();
        MovementWaybill_Edit.UpdateValueAddedTaxListState(IsDefaultOrEmpty(senderId) || IsDefaultOrEmpty(recipientId) || senderId != recipientId);
    },

    UpdateValueAddedTaxListState: function (value) {
        if (IsFalse(value)) {
            // Делаем выбранным элемент с 0 значением НДС (атрибут param)
            $("#ValueAddedTaxId option[param='0']").attr("selected", "selected");
        }
        UpdateButtonAvailability("ValueAddedTaxId", value);
    }
};﻿var MovementWaybill_List_ReceiptedGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridReceiptedMovementWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/MovementWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".SenderStorageId").text();
                $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var MovementWaybill_List_ShippedGrid= {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridShippedMovementWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/MovementWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".SenderStorageId").text();
                $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var MovementWaybill_List_ShippingPendingGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            
			$('#btnCreateMovementWaybill').click(function () {
                window.location = "/MovementWaybill/Create?" + GetBackUrl(true);
            });

            $("#gridShippingPendingMovementWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/MovementWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".SenderStorageId").text();
                $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var MovementWaybill_RowEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#MovingCount", 12, $("#MeasureUnitScale").val(), "#movementWaybillRowEdit", true);
        });

        $("span#ArticleName.select_link").bind('click', function () {
            var storageId = $('#SenderStorageId').val();
            var senderId = $('#SenderId').val();

            $.ajax({
                type: "GET",
                url: "/Article/SelectArticleFromStorage/",
                data: { storageId: storageId, senderId: senderId },
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    MovementWaybill_RowEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowEdit");
                }
            });
        });

        if ($("#movementWaybillRowEdit #ManualSourcesInfo").val() != "") {
            $("#movementWaybillRowEdit #MovingCount").disableInput();
        }

        $("#BatchLink.select_link").click(function () {
            var currentArticleBatchId = null;
            if ($("#movementWaybillRowEdit #CurrentReceiptWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                currentArticleBatchId = $("#movementWaybillRowEdit #CurrentReceiptWaybillRowId").val();
            }
            MovementWaybill_RowEdit.SelectArticleBatch(currentArticleBatchId);
        });

        $("#ManualSourcesLink.select_link").click(function () {
            MovementWaybill_RowEdit.SelectSourceWaybillRows();
        });

        $("#MovingCount").bind("keyup change paste cut", function () {
            MovementWaybill_RowEdit.UpdateValueAddedTaxSum();
            MovementWaybill_Shared.CheckSaveButtonAvailability();
        });

        // При изменении ставки НДС
        $("#movementWaybillRowEdit #ValueAddedTaxId").live("change", function () {
            MovementWaybill_RowEdit.UpdateValueAddedTaxSum();
        });
    },

    OnFailMovementWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageMovementWaybillRowEdit");
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live('click', function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());

            if (IsTrue($("#ArticleSelector, #SelectSources").attr('checked'))) {
                HideModal(function () { MovementWaybill_RowEdit.SelectSourceWaybillRows(); });
            }
            else {
                HideModal(function () {
                    var currentArticleBatchId = null;
                    if ($("#movementWaybillRowEdit #CurrentReceiptWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                        currentArticleBatchId = $("#movementWaybillRowEdit #CurrentReceiptWaybillRowId").val();
                    }

                    MovementWaybill_RowEdit.SelectArticleBatch();
                });
            }

        });
    },

    BindArticleBatchSelection: function () {
        $("#gridSelectArticleBatch .articleBatch_select_link").die("click");
        $("#gridSelectArticleBatch .articleBatch_select_link").live("click", function () {
            var availableToReserveCount = $(this).parent("td").parent("tr").find(".AvailableToReserveCount").text().replaceAll(" ", "");

            $("#movementWaybillRowEdit #BatchName").text($(this).parent("td").parent("tr").find(".batchName").text());
            $("#movementWaybillRowEdit #AvailableToReserveFromStorageCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromStorageCount").text());
            $("#movementWaybillRowEdit #AvailableToReserveCount").text(ValueForDisplay(availableToReserveCount));
            $("#movementWaybillRowEdit #AvailableToReserveFromPendingCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromPendingCount").text());

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#MovingCount", 12, measureUnitScale, "#movementWaybillRowEdit", true);

            var purchaseCost = $(this).parent("td").parent("tr").find(".purchaseCost").text();

            if (IsTrue($("#AllowToViewPurchaseCost").val()) && purchaseCost != "---") {
                $("#movementWaybillRowEdit #PurchaseCost").text(purchaseCost);
            }
            else {
                $("#movementWaybillRowEdit #PurchaseCost").text("---");
            }
            purchaseCost = purchaseCost.replaceAll(" ", "");

            $("#movementWaybillRowEdit #SenderAccountingPrice").text($(this).closest("#articleBatchSelector").find("#SenderAccountingPrice").text());
            var senderAccountingPrice = $(this).closest("#articleBatchSelector").find("#SenderAccountingPriceValue").val();
            $("#movementWaybillRowEdit #SenderAccountingPriceValue").val(senderAccountingPrice);

            $("#movementWaybillRowEdit #RecipientAccountingPrice").text($(this).closest("#articleBatchSelector").find("#RecipientAccountingPrice").text());
            var recipientAccountingPrice = $(this).closest("#articleBatchSelector").find("#RecipientAccountingPriceValue").val();
            $("#movementWaybillRowEdit #RecipientAccountingPriceValue").val(recipientAccountingPrice);

            var movementMarkupPercent =
                (ValueForEdit(senderAccountingPrice) != "" && ValueForEdit(recipientAccountingPrice) != "" && ValueForEdit(senderAccountingPrice) != "0") ?
                (recipientAccountingPrice - senderAccountingPrice) / senderAccountingPrice * 100 : "---";

            $("#movementWaybillRowEdit #MovementMarkupPercent").text(
                ValueForEdit(movementMarkupPercent) != "" ? ValueForDisplay(movementMarkupPercent, 2) : movementMarkupPercent);

            var movementMarkupSumValue;

            if (recipientAccountingPrice == "" || senderAccountingPrice == "") {
                movementMarkupSumValue = "---"
            }
            else {
                movementMarkupSumValue = ValueForDisplay(recipientAccountingPrice - senderAccountingPrice, 2);
            }

            $("#movementWaybillRowEdit #MovementMarkupSum").text(movementMarkupSumValue);

            if (IsTrue($("#AllowToViewPurchaseCost").val()) && recipientAccountingPrice != "" && purchaseCost != "---") {
                var purchaseMarkupPercent =
                (ValueForEdit(purchaseCost) != "" && ValueForEdit(recipientAccountingPrice) != "" && ValueForEdit(purchaseCost) != "0") ?
                (recipientAccountingPrice - purchaseCost) / purchaseCost * 100 : "---";

                $("#movementWaybillRowEdit #PurchaseMarkupPercent").text(
                ValueForEdit(purchaseMarkupPercent) != "" ? ValueForDisplay(purchaseMarkupPercent, 2) : purchaseMarkupPercent);
                $("#movementWaybillRowEdit #PurchaseMarkupSum").text(ValueForDisplay(recipientAccountingPrice - purchaseCost, 2));
            }
            else {
                $("#movementWaybillRowEdit #PurchaseMarkupPercent").text("---");
                $("#movementWaybillRowEdit #PurchaseMarkupSum").text("---");
            }

            $("#movementWaybillRowEdit #ReceiptWaybillRowId").val($(this).parent("td").parent("tr").find(".ReceiptWaybillRowId").text());

            $("#movementWaybillRowEdit #ManualSourcesInfo").val("");

            HideModal(function () {
                $("#BatchLink").show();
                $("#ManualSourcesLink").hide();

                $("#movementWaybillRowEdit #MovingCount").enableInput().val("").focus().removeAttr("disabled");
                MovementWaybill_RowEdit.UpdateValueAddedTaxSum();
            });
        });
    },

    BindManualSourcesSelection: function () {
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").die("click");
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").live("click", function () {
            StartButtonProgress($(this));

            $.ajax({
                type: "GET",
                url: "/MovementWaybill/GetRowInfo/",
                data: { waybillId: $("#Id").val(),
                    batchId: $("#sourceWaybillRowSelector #SelectedBatchId").val()
                },
                success: function (result) {
                    $("#ManualSourcesInfo").val($("#sourceWaybillRowSelector #SelectedSources").val());

                    var movingCount = 0;
                    var selectedSourcesInfo = $("#ManualSourcesInfo").val().split(";");
                    $.each(selectedSourcesInfo, function (i, val) {
                        var fields = val.split("_");
                        var count = TryGetDecimal(fields[1]);

                        if (!isNaN(count)) {
                            movingCount += count;
                        }
                    });

                    $("#movementWaybillRowEdit #MovingCount").disableInput().val(ValueForEdit(movingCount));
                    $("#BatchLink").hide();
                    $("#ManualSourcesLink").show();
                    $("#movementWaybillRowEdit #ReceiptWaybillRowId").val($("#SelectedBatchId").val());
                    $("#movementWaybillRowEdit #BatchName").text($("#SelectedBatchName").val());

                    MovementWaybill_Shared.CheckSaveButtonAvailability();

                    $("#movementWaybillRowEdit #PurchaseCost").text(result.PurchaseCost);
                    $("#movementWaybillRowEdit #MovementMarkupSum").text(result.MovementMarkupSum);
                    $("#movementWaybillRowEdit #MovementMarkupPercent").text(result.MovementMarkupPercent);
                    $("#movementWaybillRowEdit #PurchaseMarkupSum").text(result.PurchaseMarkupSum);
                    $("#movementWaybillRowEdit #PurchaseMarkupPercent").text(result.PurchaseMarkupPercent);
                    $("#movementWaybillRowEdit #SenderAccountingPrice").text(result.SenderAccountingPrice);
                    $("#movementWaybillRowEdit #RecipientAccountingPrice").text(result.RecipientAccountingPrice);
                    $("#movementWaybillRowEdit #AvailableToReserveFromStorageCount").text(result.AvailableToReserveFromStorageCount);
                    $("#movementWaybillRowEdit #AvailableToReserveCount").text(result.AvailableToReserveCount);
                    $("#movementWaybillRowEdit #AvailableToReserveFromPendingCount").text(result.AvailableToReserveFromPendingCount);

                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageOutgoingWaybillRow");
                }
            });
        });
    },


    SelectArticleBatch: function (articleBatchToExcludeId) {
        $.ajax({
            type: "GET",
            url: "/Article/SelectArticleBatch/",
            data: { articleId: $("#ArticleId").val(), senderStorageId: $("#SenderStorageId").val(),
                recipientStorageId: $("#RecipientStorageId").val(), senderId: $("#SenderId").val(),
                date: $("#MovementWaybillDate").val(), articleBatchToExcludeId: articleBatchToExcludeId
            },
            success: function (result) {
                $('#articleBatchSelector').hide().html(result);
                $.validator.unobtrusive.parse($("#articleBatchSelector"));
                ShowModal("articleBatchSelector");

                var availableToReserveCount = 0;

                $("#articleBatchSelector .AvailableToReserveCount").each(function () {
                    availableToReserveCount += parseFloat($(this).text().replaceAll(' ', ''));
                });

                $("#articleBatchSelector #AvailableToMoveTotalCount").text(availableToReserveCount);

                MovementWaybill_RowEdit.BindArticleBatchSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                if (IsDefaultOrEmpty($("#movementWaybillRowEdit #CurrentReceiptWaybillRowId").val())) {
                    MovementWaybill_Shared.ClearForm();
                }
                ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowEdit");
            }
        });
    },

    SelectSourceWaybillRows: function () {
        $.ajax({
            type: "GET",
            url: "/OutgoingWaybillRow/GetAvailableToReserveWaybillRows/",
            data: { type: "MovementWaybill",
                articleId: $("#movementWaybillRowEdit #ArticleId").val(),
                storageId: $("#movementWaybillRowEdit #SenderStorageId").val(),
                organizationId: $("#movementWaybillRowEdit #SenderId").val(),
                selectedSourcesInfo: $("#ManualSourcesInfo").val(),
                waybillRowId: $("#movementWaybillRowEdit #Id").val()

            },
            success: function (result) {
                $('#sourceWaybillRowSelector').hide().html(result);

                var selectedBatchId = $("#movementWaybillRowEdit #ReceiptWaybillRowId").val();

                if (selectedBatchId != "00000000-0000-0000-0000-000000000000" && $("#ManualSourcesInfo").val() != "") {
                    $("#SelectedBatchId").val($("#movementWaybillRowEdit #ReceiptWaybillRowId").val());
                    $("#SelectedBatchName").val($("#movementWaybillRowEdit #BatchName").text());
                }

                var selectedBatch = $("#SelectedBatchId").val();
                OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(selectedBatch);

                $.validator.unobtrusive.parse($("#sourceWaybillRowSelector"));
                ShowModal("sourceWaybillRowSelector");

                MovementWaybill_RowEdit.BindManualSourcesSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowEdit");
            }
        });
    },

    // Перерасчет суммы НДС по позиции
    UpdateValueAddedTaxSum: function () {
        var senderAccountingPrice = TryGetDecimal($("#movementWaybillRowEdit #SenderAccountingPriceValue").val());
        var recipientAccountingPrice = TryGetDecimal($("#movementWaybillRowEdit #RecipientAccountingPriceValue").val());

        var count = TryGetDecimal($("#movementWaybillRowEdit #MovingCount").val());
        var vatPercent = TryGetDecimal($("#movementWaybillRowEdit #ValueAddedTaxId option:selected").attr("param"));
        var senderVatSum = CalculateVatSum(senderAccountingPrice * count, vatPercent);
        var recipientVatSum = CalculateVatSum(recipientAccountingPrice * count, vatPercent);

        if (!isNaN(senderVatSum)) {
            $("#movementWaybillRowEdit #SenderValueAddedTaxSum").text(ValueForDisplay(senderVatSum, 2));
        }
        else {
            $("#movementWaybillRowEdit #SenderValueAddedTaxSum").text("---");
        }

        if (!isNaN(recipientVatSum)) {
            $("#movementWaybillRowEdit #RecipientValueAddedTaxSum").text(ValueForDisplay(recipientVatSum, 2));
        }
        else {
            $("#movementWaybillRowEdit #RecipientValueAddedTaxSum").text("---");
        }
    }

};﻿var MovementWaybill_RowGrid = {
    Init: function () {
        $(document).ready(function () {

            // добавление позиции
            $("#btnAddMovementWaybillRow").click(function () {
                var movementWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/AddRow",
                    data: { movementWaybillId: movementWaybillId },
                    success: function (result) {
                        $('#movementWaybillRowEdit').hide().html(result);
                        ShowModal("movementWaybillRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowList");
                    }
                });
            });

            // редактирование / просмотр позиции
            $("#gridMovementWaybillRows .edit_link, #gridMovementWaybillRows .details_link").click(function () {
                var movementWaybillId = $('#Id').val();
                var movementWaybillRowId = $(this).parent("td").parent("tr").find(".movementWaybillRowId").text();

                $.ajax({
                    type: "GET",
                    url: "/MovementWaybill/EditRow",
                    data: { movementWaybillId: movementWaybillId, movementWaybillRowId: movementWaybillRowId },
                    success: function (result) {
                        $('#movementWaybillRowEdit').hide().html(result);
                        ShowModal("movementWaybillRowEdit");

                        if ($("#movementWaybillRowEdit #ManualSourcesInfo").val() == "") {
                            $("#BatchLink").show();
                        }
                        else {
                            $("#ManualSourcesLink").show();
                        }
                        $("#movementWaybillRowEdit #MovingCount").focus();
                        MovementWaybill_Shared.CheckSaveButtonAvailability();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowList");
                    }
                });
            });

            //просмотр источников позиции накладной
            $("#gridMovementWaybillRows .source_link").click(function () {
                var movementWaybillRowId = $(this).parent("td").parent("tr").find(".movementWaybillRowId").text();
                var articleName = $(this).parent("td").parent("tr").find(".ArticleName").text();
                var batchName = $(this).parent("td").parent("tr").find(".Batch").text();

                $.ajax({
                    type: "POST",
                    url: "/OutgoingWaybillRow/GetSourceWaybill/",
                    data: { type: "MovementWaybill", id: movementWaybillRowId, articleName: articleName, batchName: batchName },
                    success: function (result) {
                        $("#movementWaybillSourceLink").hide().html(result);
                        ShowModal("movementWaybillSourceLink");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowList");
                    }
                });
            });

            // удаление позиции накладной
            $("#gridMovementWaybillRows .delete_link").click(function () {
                if (confirm('Вы уверены?')) {
                    var movementWaybillId = $('#Id').val();
                    var movementWaybillRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/MovementWaybill/DeleteRow/",
                        data: { movementWaybillId: movementWaybillId, movementWaybillRowId: movementWaybillRowId },
                        success: function (result) {
                            // грид для формы добавления товаров списком
                            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                                RefreshGrid("gridArticleGroups", function () {
                                    RefreshGrid("gridMovementWaybillRows", function () {
                                        MovementWaybill_Details.RefreshMainDetails(result);
                                        ShowSuccessMessage("Позиция удалена.", "messageMovementWaybillRowList");
                                    });
                                });   
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageMovementWaybillRowList");
                        }
                    });
                }
            });
        });
    }
};﻿var MovementWaybill_Shared = {
    ClearForm: function () {
        $("#ArticleName").text("Выберите товар");
        $("#ArticleId").val("");
        $("#movementWaybillRowEdit #BatchName").text("не выбрана");
        $("#movementWaybillRowEdit #PurchaseCost").text("---");
        $("#movementWaybillRowEdit #SenderAccountingPrice").text("---");
        $("#movementWaybillRowEdit #SenderAccountingPriceValue").val("");
        $("#movementWaybillRowEdit #RecipientAccountingPrice").text("---");
        $("#movementWaybillRowEdit #RecipientAccountingPriceValue").val("");
        $("#movementWaybillRowEdit #AvailableToReserveFromStorageCount").text("---");
        $("#movementWaybillRowEdit #AvailableToReserveCount").text("---");
        $("#movementWaybillRowEdit #AvailableToReserveFromPendingCount").text("---");
        $("#movementWaybillRowEdit #ReceiptWaybillRowId").val("00000000-0000-0000-0000-000000000000");
        $("#movementWaybillRowEdit #MovementMarkupPercent").text("---");
        $("#movementWaybillRowEdit #MovementMarkupSum").text("---");
        $("#movementWaybillRowEdit #PurchaseMarkupPercent").text("---");
        $("#movementWaybillRowEdit #PurchaseMarkupSum").text("---");
        $("#movementWaybillRowEdit #MeasureUnitName").text("");

        $("#movementWaybillRowEdit #MovingCount").val("");
        $("#movementWaybillRowEdit #MovingCount").removeClass("input-validation-error");
        $("#movementWaybillRowEdit #MovingCount_validationMessage").hide();
        $("#movementWaybillRowEdit #ManualSourcesInfo").val("");
        $("#movementWaybillRowEdit #ManualSourcesLink").hide();

        SetFieldScale("#MovingCount", 12, 0, "#movementWaybillRowEdit", true);
        MovementWaybill_RowEdit.UpdateValueAddedTaxSum();

        DisableButton("btnSaveMovementWaybillRow");
        $("#BatchLink").hide();
    },

    CheckSaveButtonAvailability: function () {
        var movingCount = TryGetDecimal($("#movementWaybillRowEdit #MovingCount").val());
        var availableToReserveCount = TryGetDecimal($("#movementWaybillRowEdit #AvailableToReserveCount").text().replaceAll(' ', ''));
        var manualSourcesInfo = $("#ManualSourcesInfo").val();
        if (((manualSourcesInfo != "" && manualSourcesInfo != undefined) || (!isNaN(movingCount) && !isNaN(availableToReserveCount) && (movingCount <= availableToReserveCount))) && (movingCount > 0)) {
            EnableButton("btnSaveMovementWaybillRow");
        }
        else {
            DisableButton("btnSaveMovementWaybillRow");
        }
    }
};﻿var Organization_ForeignBankAccountEdit = {
    Init: function () {
        $("#foreignBankAccountEdit #BankAccountNumber").focus();

        $("#SWIFT").bind("keyup change paste cut", function () {
            var swift = $(this).val();

            if (swift.length == 8 || swift.length == 11) {
                $.ajax({
                    type: "GET",
                    url: "/Organization/GetForeignBankBySWIFT",
                    data: { swift: swift },
                    success: function (result) {
                        $("#BankName").html(result.BankName);
                        $("#BankAddress").html(result.Address);
                        $("#ClearingCode").html(result.ClearingCode);
                        $("#ClearingCodeType").html(result.ClearingCodeType);
                        UpdateButtonAvailability("btnSaveForeignBankAccount", result.BankName.length > 0);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        Organization_ForeignBankAccountEdit.InputBadBIC();
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountEdit");
                    }
                });
            }
            else {
                Organization_ForeignBankAccountEdit.InputBadBIC();
            }
        });

        $("#addCurrency").click(function () {
            //вызвать окно добавления валюты
        });
    },

    InputBadBIC: function () {
        $("#BankName").text("");
        $("#BankAddress").text("");
        $("#ClearingCode").text("");
        $("#ClearingCodeType").text("");
        DisableButton("btnSaveForeignBankAccount");  // Блокируем кнопку "сохранить"
    },

    OnFailForeignBankAccountEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageForeignBankAccountEdit");
    }
};﻿var Organization_RussianBankAccountEdit = {
    Init: function () {
        $(document).ready(function () {
            $("#BankAccountNumber").focus();
        });

        $("#BIC").bind("keyup change paste cut", function () {
            var reg = /^[0-9]{9}$/;
            if (reg.test($(this).val())) {
                $.ajax({
                    type: "GET",
                    url: "/Organization/GetBankByBIC",
                    data: { bic: $(this).val() },
                    success: function (result) {
                        $('#BankName').text(result.BankName);
                        $('#CorAccount').text(result.CorAccount);
                        UpdateButtonAvailability("btnSaveRussianBankAccount", result.BankName.length > 0);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        Organization_RussianBankAccountEdit.InputBadBIC();
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountEdit");
                    }
                });
            }
            else {
                Organization_RussianBankAccountEdit.InputBadBIC();
            }
        });

    },

    InputBadBIC: function () {
        $('#BankName').text("");
        $('#CorAccount').text("");
        DisableButton("btnSaveRussianBankAccount");  // Блокируем кнопку "сохранить"
    },

    OnFailBankAccountEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageRussianBankAccountEdit");
    }
};﻿var OutgoingWaybillRow_IncomingWaybillRow = {
    Init: function () {
        $(document).ready(function () {

            $("#filterIncomingWaybillRow #Batch.select_link").click(function () {
                var recipientStorageId = 0;
                var senderStorageId = 0;

                var storageField = $("#StorageId");

                if (storageField.length > 0 && storageField.val() != "") {
                    var storageId = storageField.val();
                    recipientStorageId = storageId;
                    senderStorageId = storageId;
                }
                else {
                    var recipientStorageField = $("#RecipientStorageId");
                    var senderStorageField = $("#SenderStorageId");

                    if (recipientStorageField.length > 0 && recipientStorageField.val() != "") recipientStorageId = recipientStorageField.val();
                    if (senderStorageField.length > 0 && senderStorageField.val() != "") senderStorageId = senderStorageField.val();
                }

                $.ajax({
                    type: "GET",
                    url: "/Article/SelectArticleBatch/",
                    data: { articleId: $("#ArticleId").val(), senderId: $("#SenderId").val(),
                        recipientStorageId: recipientStorageId, senderStorageId: senderStorageId
                    },
                    success: function (result) {
                        $('#batchFilterSelector').hide().html(result);
                        ShowModal("batchFilterSelector");
                        $('#batchFilterSelector .attention').hide();
                        $("#batchFilterSelector").css("top", "50px");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageOutgoingWaybillRow");
                    }
                });
            });

            $("#batchFilterSelector #gridSelectArticleBatch .articleBatch_select_link").live('click', function () {
                $("#filterIncomingWaybillRow #Batch").text($(this).parent("td").parent("tr").find(".batchName").text());

                var batchId = $(this).parent("td").parent("tr").find(".ReceiptWaybillRowId").text();
                $("#filterIncomingWaybillRow #Batch").attr("selected_id", batchId);

                HideModal();
            });
        });
    }
};﻿var OutgoingWaybillRow_IncomingWaybillRowGrid = {
    Init: function () {
        $(document).ready(function () {
            var hash = {};

            var selectedSourcesInfo = $("#SelectedSources").val().split(";");

            $.each(selectedSourcesInfo, function (i, val) { var fields = val.split("_"); var id = fields[0]; var count = fields[1]; hash[id] = count; });

            var selectedSourceIds = $.each(selectedSourcesInfo, function (i, val) { return val.split("_")[0] });

            var sourcesSelectedEarlier = $('.WaybillRowId').filter(function () {
                return hash[$(this).text()] != undefined;
            });
            $.each(sourcesSelectedEarlier, function (i, val) {
                var row = $(val).parent("td").parent("tr");
                var id = row.find(".WaybillRowId").text();

                row.find(".takingCount").val(hash[id]);
            });

            var selectedBatch = $("#SelectedBatchId").val();
            OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(selectedBatch);

            $("#gridIncomingWaybillRow table.grid_table tr").each(function () {

                var Type = $(this).find(".Type").text();

                if (Type != "") {//исключаем операции над строчками без данных
                    var Id = $(this).find(".Id").text();
                    var SenderStorageName = $(this).find(".SenderStorageName").text();
                    var SenderStorageId = $(this).find(".SenderStorageId").text();
                    var SenderName = $(this).find(".SenderName").text();
                    var SenderId = $(this).find(".SenderId").text();
                    var ContractorName = $(this).find(".ContractorName").text();
                    var ProviderId = $(this).find(".ProviderId").text();
                    var ProducerId = $(this).find(".ProducerId").text();
                    var ContractorOrganizationName = $(this).find(".ContractorOrganizationName").text();
                    var ProviderOrganizationId = $(this).find(".ProviderOrganizationId").text();
                    var ProducerOrganizationId = $(this).find(".ProducerOrganizationId").text();
                    var ClientName = $(this).find(".ClientName").text();
                    var ClientId = $(this).find(".ClientId").text();
                    var ExpenditureWaybillName = $(this).find(".ExpenditureWaybillName").text();
                    var ExpenditureWaybillId = $(this).find(".ExpenditureWaybillId").text();

                    switch (Type) {
                        case "1": //приход
                            if (ProviderId == "" && ProducerId == "") {
                                $(this).find("span.Characteristics").html("---");
                            }
                            else if (ProducerId == "") {
                                $(this).find("span.Characteristics").html('Поставщик: <a class="ProviderName">' + ContractorName + '</a> (<a class="ProviderOrganizationName">' + ContractorOrganizationName + '</a>)');
                            } else {
                                $(this).find("span.Characteristics").html('Производитель: <a class="ProducerName">' + ContractorName + '</a> (<span class="ProducerOrganizationName">' + ContractorOrganizationName + '</span>)');
                            }

                            $(this).find("a.WaybillName").attr("href", "/ReceiptWaybill/Details?id=" + Id + GetBackUrl());
                            $(this).find("a.ProviderName").attr("href", "/Provider/Details?id=" + ProviderId + GetBackUrl());
                            $(this).find("a.ProducerName").attr("href", "/Producer/Details?id=" + ProducerId + GetBackUrl());
                            $(this).find("a.ProviderOrganizationName").attr("href", "/ProviderOrganization/Details?id=" + ProviderOrganizationId + GetBackUrl());
                            $(this).find("a.ProducerOrganizationName").attr("href", "/ProducerOrganization/Details?id=" + ProducerOrganizationId + GetBackUrl());
                            break;

                        case "2": //перемещение
                        case "5": //смена собственника
                            if (Type == "2") {
                                $(this).find("a.WaybillName").attr("href", "/MovementWaybill/Details?id=" + Id + GetBackUrl());
                            }
                            else {
                                $(this).find("a.WaybillName").attr("href", "/ChangeOwnerWaybill/Details?id=" + Id + GetBackUrl());
                            }

                            if (SenderId == "") {
                                $(this).find("span.Characteristics").html('Отправитель: ' + SenderStorageName + ' (' + SenderName + ')');
                            }
                            else {
                                $(this).find("span.Characteristics").html('Отправитель: <a class="SenderStorageName">' + SenderStorageName + '</a> (<a class="SenderName">' + SenderName + '</a>)');
                            }

                            $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + SenderStorageId + GetBackUrl());
                            $(this).find("a.SenderName").attr("href", "/AccountOrganization/Details?id=" + SenderId + GetBackUrl());

                            break;

                        case "6": //возврат товара от клиента

                            $(this).find("a.WaybillName").attr("href", "/ReturnFromClientWaybill/Details?id=" + Id + GetBackUrl());

                            var text;
                            if (ClientId == "") {
                                text = 'Клиент: ---; ';
                            }
                            else {
                                text = 'Клиент: <a class="ClientName">' + ClientName + '</a>; ';
                            }

                            if (ExpenditureWaybillId == "") {
                                text += 'Реализация: ' + ExpenditureWaybillName;
                            }
                            else {
                                text += 'Реализация: <a class="ExpenditureWaybillName">' + ExpenditureWaybillName + '</a>';
                            }

                            $(this).find("span.Characteristics").html(text);

                            $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + ClientId + GetBackUrl());
                            $(this).find("a.ExpenditureWaybillName").attr("href", "/ExpenditureWaybill/Details?id=" + ExpenditureWaybillId + GetBackUrl());

                            break;
                    }
                }
            });

            $(".takingCount").each(function (i) { $(this).data("prev", $(this).val()) }).bind("change keyup", function () {

                var selectedSourcesField = $("#SelectedSources");
                var row = $(this).parent("td").parent("tr");
                var sourceId = row.find(".WaybillRowId").text();
                var waybillType = $(this).findCell(".Type").text();
                selectedSourcesField.val(selectedSourcesField.val().replace(sourceId + "_" + $(this).data("prev") + "_" + waybillType + ";", ""));

                var takingCount = TryGetDecimal($(this).val());

                var count = row.find(".Count").text();
                if ($(this).val() != "" && (isNaN(takingCount) || takingCount > count || takingCount < 0 || !CheckValueScale(takingCount, $(this).findCell(".MeasureUnitScale").text(), 12)))
                { $(this).addClass("field-validation-error"); DisableButton("btnSaveSourcesSelection"); return false; }
                else { $(this).removeClass("field-validation-error"); }

                var batchId = row.find(".BatchId").text();

                var selectedBatchIdField = $("#SelectedBatchId");
                var selectedBatchNameField = $("#SelectedBatchName");

                if (takingCount > 0) {
                    selectedSourcesField.val(selectedSourcesField.val() + sourceId + "_" + takingCount + "_" + waybillType + ";");
                    EnableButton("btnSaveSourcesSelection");
                    $(this).data("prev", $(this).val())

                    if (selectedBatchIdField.val() == "") {
                        selectedBatchIdField.val(batchId);
                        selectedBatchNameField.val(row.find(".BatchName").text());
                        OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(batchId);
                    }
                }
                else {
                    if (selectedSourcesField.val() == "") {
                        selectedBatchIdField.val("");
                        selectedBatchNameField.val("");
                        $(".takingCount").enableInput();
                        DisableButton("btnSaveSourcesSelection");
                    }
                }

                $(this).data("prev", $(this).val());

            });
        });         // document ready
    },

    DisableRowsWithAnotherBatches: function (batchId) {
        if (batchId != "") {
            var sourcesToDisable = $('.BatchId').filter(function () {
                return $(this).text() != batchId;
            });
            sourcesToDisable.findCell(".takingCount").val("").disableInput();
        }
    }
};
﻿var PrintingForm_InvoicePrintingForm = {
    Init: function () {
        $(document).ready(function () {
            //Запрос данных формы
            $.ajax({
                type: "GET",
                url: $("#RowsContentURL").val(),
                data: { WaybillId: $("#WaybillId").val(), PriceTypeId: $("#PriceTypeId").val(), ConsiderReturns: $("#ConsiderReturns").val() },
                success: function (result) {
                    ShowContent(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    alert(XMLHttpRequest.responseText);
                }
            });
        });

        //Построение всей печатной формы
        function ShowContent(content) {
            //настраиваем форму
            var mainDiv = $("#mainContentPrintingForm");

            var tmp = CreateFirstPage(content.Rows);    //Создаем первую страницу
            currentIndex = tmp.currentIndex;
            var pageIndex = tmp.pageIndex + 1;

            //Цикл пока есть данные для формирования страниц
            while (currentIndex < content.Rows.length) {
                tmp = CreatePage(pageIndex, currentIndex, content.Rows);
                currentIndex = tmp.currentIndex;
                pageIndex = tmp.pageIndex + 1;
            }
            $("#maxPageNumber").val(pageIndex);
        }

        //Создание новой страницы
        function CreateNewPage(pageIndex, pageBreak) {
            //Создаем страницу
            var currentPage = $(document.createElement("div"));
            if (pageBreak) {
                $("#page_" + (pageIndex - 1)).addClass("pageBreak");
            }
            if ($.browser.opera) {
                currentPage.addClass("page_Opera");
            }
            else {
                currentPage.addClass("page");
            }
            currentPage.attr("id", "page_" + pageIndex);

            var topDiv = $(document.createElement("div"));
            topDiv.addClass("topDiv");
            topDiv.appendTo(currentPage);

            var mainDiv = $("#mainContentPrintingForm");
            mainDiv.append(currentPage); //Добавляем ее на форму

            var bottomDiv = $(document.createElement("div"));
            bottomDiv.addClass("bottomDiv");
            bottomDiv.appendTo(currentPage);

            return currentPage;
        }

        //Создание первой страницы
        function CreateFirstPage(content) {
            var currentPage = CreateNewPage(0, false);   //Создаем страницу

            //Создаем заголовок печатной формы
            var headerDiv = $(document.createElement("div"));
            headerDiv.attr("id", "headerPrintingForm");
            headerDiv.appendTo(currentPage.find(".topDiv"));

            //Взять header из View!
            $("#PageHeader").appendTo("#headerPrintingForm");

            var tableHeight = currentPage.attr("offsetHeight") - headerDiv.attr("offsetHeight");    //Вычислям высоту таблицы

            var pageIndex = 0;
            var currentIndex = CreateTable(currentPage, tableHeight, content, 0);   //Выводим на первую страницу таблицу
            currentPage.find(".PageNumber").html("Страница 1");

            return { currentIndex: currentIndex, pageIndex: pageIndex };
        }

        //Создание последующих страниц (вторая и т.д.)
        function CreatePage(pageIndex, index, content) {
            var currentPage = CreateNewPage(pageIndex, true);   //Создаем страницу

            var tableHeight = currentPage.attr("offsetHeight"); //Вычисляем высоты таблицы

            var currentIndex = CreateTable(currentPage, tableHeight, content, index);   //Выводим данные на первую страницу таблицы
            currentPage.find(".PageNumber").html("Страница " + (pageIndex + 1));

            return { currentIndex: currentIndex, pageIndex: pageIndex };
        }

        //Создание ячейки таблицы
        function CreateTableCell(tr, value, className, attr, colspan) {
            var td = $(document.createElement("td"));

            td.html(value);

            if (className != undefined && className != null) {
                td.addClass(className);
            }

            if (attr != undefined && attr != null) {
                td.attr(attr);
            }
            if (colspan != undefined && colspan != null) {
                td.attr("colspan", colspan);
            }
            td.appendTo(tr);
        }

        //Генерируем заголовок таблицы
        function CreateTableHeader(table, content) {
            // TODO Взять шапку из View!
            var c = $("#MainTable").find("table").html();
            //var thead = $(document.createElement("thead"));
            //thead.appendTo(table);
            $(c).appendTo(table);
        }

        //Заполняем строку данными
        function FullingTableRow(index, tr, obj, content) {
            //TODO Переделать
            CreateTableCell(tr, obj.ArticleName, "col1");
            CreateTableCell(tr, obj.MeasureUnitCode, "col2", { "align": "right" });
            CreateTableCell(tr, obj.MeasureUnitName, "col2a");
            CreateTableCell(tr, obj.Count, "col3", { "align": "right" });
            CreateTableCell(tr, obj.Price, "col4", { "align": "right" });
            CreateTableCell(tr, obj.Cost, "col5", { "align": "right" });
            CreateTableCell(tr, obj.ExciseValue, "col6", obj.ExciseValue == "без акциза" ? { "align": "center"} : { "align": "right" });
            CreateTableCell(tr, obj.TaxValue, "col7", { "align": "center" });
            CreateTableCell(tr, obj.TaxSum, "col8", { "align": "right" });
            CreateTableCell(tr, obj.TaxedCost, "col9", { "align": "right" });
            CreateTableCell(tr, obj.CountryCode, "col10", obj.CountryCode == "-" ? { "align": "center"} : { "align": "right" });
            CreateTableCell(tr, obj.CountryName, "col10a", obj.CountryName == "-" ? { "align": "center"} : { "align": "left" });
            CreateTableCell(tr, obj.CustomsDeclarationNumber, "col11", obj.CustomsDeclarationNumber == "-" ? { "align": "center"} : { "align": "right" });
        }

        //Генерируем таблицу на страницу
        function CreateTable(currentPage, maxHeight, content, index) {

            //Создаем таблицу
            var table = $(document.createElement("table"));
            table.addClass("MainTable");
            //table.attr("style", "width: 0px; height: 0px;");
            currentPage.find(".topDiv").after(table);
            //table.appendTo(currentPage);

            CreateTableHeader(table, content);  //Создаем заголовок таблицы
            //var footer = CreateFooterTable(currentPage);    //Добавляем "подвал"

            //Цикл заполнения таблицы
            var i;
            var summaryRow = null;
            var footer = null;
            var summaryForForm = null;

            for (i = index; i < content.length; i++) {
                if (summaryRow != null) {
                    summaryRow.remove();
                }

                //Создаем строку таблицы
                var tr = $(document.createElement("tr"));
                tr.appendTo(table);

                FullingTableRow(i, tr, content[i], content);   //Заполняем строку данными
                summaryRow = CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!


                var currentHeight = table.attr("offsetHeight");   //Получает текущую высоту таблицы

                if (i == content.length - 1) {

                    if (currentPage.attr("id") == "page_0") {
                        table.find(".SummaryForPage").remove();
                    }

                    summaryForForm = CreateSummaryForForm(table, content);
                    currentHeight += summaryForForm.attr("offsetHeight");

                    footer = CreateFooterTable(currentPage);    //Добавляем "подвал"
                    currentHeight += footer.attr("offsetHeight");
                }
                //Проверяем условие окончания страницы
                if (currentHeight >= maxHeight) {
                    //Страница закончилась, удаляем последнюю добавленную строку
                    summaryRow.remove();
                    if (footer != null) {
                        footer.remove();
                    }
                    if (summaryForForm != null) {
                        summaryForForm.remove();
                    }
                    tr.remove();
                    CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!
                    break;
                }
            }

            return i;
        }

        function CreateSummaryForPage(table) {
            var sum5 = 0;
            var sum8 = 0;
            var sum9 = 0;
            $.each(table.find("tr"), function (index, row) {
                sum5 += parseStrToFloat($(row).find(".col5").html());
                sum8 += parseStrToFloat($(row).find(".col8").html());
                sum9 += parseStrToFloat($(row).find(".col9").html());
            });

            var tr = $(document.createElement("tr"));
            tr.addClass("tableSummary");
            tr.appendTo(table);

            CreateTableCell(tr, "Всего по странице", null, null, 5);
            CreateTableCell(tr, ForDisplay(sum5), null, { "align": "right" });
            CreateTableCell(tr, "X", null, { "align": "center" }, 2);
            CreateTableCell(tr, ForDisplay(sum8), null, { "align": "right" });
            CreateTableCell(tr, ForDisplay(sum9), null, { "align": "right" });
            CreateTableCell(tr, "", "emptyCell", null, 3);

            return tr;
        }

        function ForDisplay(value) {
            var result = "";
            if (!(value == undefined || isNaN(value) || value == null)) {
                result = ValueForDisplay(value, 2, false);
            }

            return result;
        }

        function parseStrToFloat(value) {
            // Проверка одновременно на null и на undefined
            if (value == null)
                return 0;

            result = isString(value) ?
                TryGetDecimal(value.replaceAll(" ", "")) :
                TryGetDecimal(value);

            return !isNaN(result) ? result : 0;
        }

        //Расчет суммы по всей форме
        function CreateSummaryForForm(table, content) {
            var sum5 = 0;
            var sum8 = 0;
            var sum9 = 0;
            for (var i = 0; i < content.length; i++) {
                var row = content[i];
                sum5 += parseStrToFloat(row.Cost);
                sum8 += parseStrToFloat(row.TaxSum);
                sum9 += parseStrToFloat(row.TaxedCost);
            }

            var tr = $(document.createElement("tr"));
            tr.addClass("tableSummary");
            tr.appendTo(table);

            CreateTableCell(tr, "Всего к оплате", null, null, 5);
            CreateTableCell(tr, ForDisplay(sum5), null, { "align": "right" });
            CreateTableCell(tr, "X", null, { "align": "center" }, 2);
            CreateTableCell(tr, ForDisplay(sum8), null, { "align": "right" });
            CreateTableCell(tr, ForDisplay(sum9), null, { "align": "right" });
            CreateTableCell(tr, "", "emptyCell", null, 3);

            return tr;
        }

        //Создаем таблицу подписей
        function CreateFooterTable(currentPage) {
            //Взять footer из View
            var footer = $(document.createElement("div"));
            footer.attr("id", "footerPrintingForm");
            footer.appendTo(currentPage.find(".bottomDiv"));

            $("#footerPrintingForm").after($("#PageFooter"));

            return footer;
        }
    }
};﻿var PrintingForm_SplittingPage = {
    // Главный метод
    // function_FullingTableRow - метод заполнения строки таблицы
    // function_CreateSummaryForPage - метод создания строки "Итого по странице"
    // function_CreateSummaryForDocument - метод создания строки "Итого по документу"
    // function_PageProcessing - метод обработки созданной страницы [не обязательный, если не нужен, то можно опустить]
    ShowContent: function (content, function_FullingTableRow, function_CreateSummaryForPage, function_CreateSummaryForDocument, function_PageProcessing) {
        //Построение всей печатной формы
        //настраиваем форму
        var mainDiv = $("#mainContentPrintingForm");

        var tmp = PrintingForm_SplittingPage.CreateFirstPage(content.Rows, function_FullingTableRow,
            function_CreateSummaryForPage, function_CreateSummaryForDocument, function_PageProcessing);    //Создаем первую страницу
        currentIndex = tmp.currentIndex;
        var pageIndex = tmp.pageIndex + 1;

        //Цикл пока есть данные для формирования страниц
        while (currentIndex < content.Rows.length) {
            tmp = PrintingForm_SplittingPage.CreatePage(pageIndex, currentIndex, content.Rows, function_FullingTableRow,
                function_CreateSummaryForPage, function_CreateSummaryForDocument, function_PageProcessing);

            currentIndex = tmp.currentIndex;
            pageIndex = tmp.pageIndex + 1;
        }
    },

    //Создание новой страницы
    CreateNewPage: function (pageIndex, pageBreak) {
        //Создаем страницу
        var currentPage = $(document.createElement("div"));
        if (pageBreak) {
            $("#page_" + (pageIndex - 1)).addClass("pageBreak");
        }
        if ($.browser.opera) {
            currentPage.addClass("page_Opera");
        }
        else {
            currentPage.addClass("page");
        }
        currentPage.attr("id", "page_" + pageIndex);

        var topDiv = $(document.createElement("div"));
        topDiv.addClass("topDiv");
        topDiv.appendTo(currentPage);

        var mainDiv = $("#mainContentPrintingForm");
        mainDiv.append(currentPage); //Добавляем ее на форму

        return currentPage;
    },

    //Создание первой страницы
    CreateFirstPage: function (content, function_FullingTableRow, function_CreateSummaryForPage, function_CreateSummaryForDocument) {
        var currentPage = PrintingForm_SplittingPage.CreateNewPage(0, false);   //Создаем страницу

        //Создаем заголовок печатной формы
        var headerDiv = $(document.createElement("div"));
        headerDiv.attr("id", "headerPrintingForm");
        headerDiv.appendTo(currentPage.find(".topDiv"));

        //Взять header из View!
        $("#PageHeader").appendTo("#headerPrintingForm");

        var tableHeight = currentPage.attr("offsetHeight") - headerDiv.attr("offsetHeight");    //Вычислям высоту таблицы

        var pageIndex = 0;
        var currentIndex = PrintingForm_SplittingPage.CreateTable(currentPage, tableHeight, content, 0, function_FullingTableRow, function_CreateSummaryForPage, function_CreateSummaryForDocument);   //Выводим на первую страницу таблицу

        return { currentIndex: currentIndex, pageIndex: pageIndex };
    },

    //Создание последующих страниц (вторая и т.д.)
    CreatePage: function (pageIndex, index, content, function_FullingTableRow, function_CreateSummaryForPage, function_CreateSummaryForDocument, function_PageProcessing) {
        var currentPage = PrintingForm_SplittingPage.CreateNewPage(pageIndex, true);   //Создаем страницу

        var tableHeight = currentPage.attr("offsetHeight"); //Вычисляем высоту таблицы

        var currentIndex = PrintingForm_SplittingPage.CreateTable(currentPage, tableHeight, content, index, function_FullingTableRow,
                function_CreateSummaryForPage, function_CreateSummaryForDocument);   //Выводим данные на первую страницу таблицы

        // Обработка добавленной страницы
        if (function_PageProcessing) {  //Если обработчик указан, то
            function_PageProcessing(currentPage, pageIndex);    // вызываем его
        }

        return { currentIndex: currentIndex, pageIndex: pageIndex };
    },

    //Генерируем заголовок таблицы
    CreateTableHeader: function (currentPage, content) {
        var c = $("#MainTable .mainTableHeader").clone();
        c.appendTo(currentPage);

        return currentPage.find(".mainTableHeader");
    },

    //Генерируем таблицу на страницу
    CreateTable: function (currentPage, maxHeight, content, index, function_FullingTableRow, function_CreateSummaryForPage, function_CreateSummaryForDocument) {

        var table = PrintingForm_SplittingPage.CreateTableHeader(currentPage, content);  //Создаем таблицу с заголовком

        //Цикл заполнения таблицы
        var i;
        var footer = null;

        for (i = index; i < content.length; i++) {

            table.find(".SummaryForPage").remove();

            //Добавляем очередную строку таблицы
            var tr = function_FullingTableRow(i, table, content[i], content);   //Заполняем строку данными
            function_CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!

            var currentHeight = 0;

            if (i == content.length - 1) {

                if (currentPage.attr("id") == "page_0") {
                    table.find(".SummaryForPage").remove();
                }

                function_CreateSummaryForDocument(table, content);

                footer = PrintingForm_SplittingPage.CreateFooterTable(currentPage);    //Добавляем "подвал"
                currentHeight += footer.attr("offsetHeight");
            }

            currentHeight += table.attr("offsetHeight");   //Получает текущую высоту таблицы

            //Проверяем условие окончания страницы
            if (currentHeight >= maxHeight) {
                //Страница закончилась, удаляем последнюю добавленную строку

                table.find(".SummaryForPage").remove();
                table.find(".SummaryForDocument").remove();

                if (footer != null) {
                    footer.remove();
                    footer = null;
                }
                tr.remove();

                function_CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!
                break;
            }
        }

        return i;
    },

    //Создаем таблицу подписей
    CreateFooterTable: function (currentPage) {
        //Взять footer из View
        var footer = $(document.createElement("div"));
        footer.appendTo(currentPage);

        $("#PageFooter").clone().appendTo(footer);
        //currentPage.find(".mainTable").after($("#PageFooter"));

        return footer;
    },

    ParseStrToFloat: function (value) {
        // Проверка одновременно на null и на undefined
        if (value == null)
            return 0;

        result = isString(value) ?
                TryGetDecimal(value.replaceAll(" ", "")) :
                TryGetDecimal(value);

        return !isNaN(result) ? result : 0;
    },

    // removeTrailingZeroes - удалять ли последние нули в копейках
    ForDisplay: function (value, scale, removeTrailingZeroes) {
        var result = "";
        if (!(value == undefined || isNaN(value) || value == null)) {
            result = ValueForDisplay(value, scale, removeTrailingZeroes);
        }

        return result;
    }
};﻿var PrintingForm_T1PrintingForm = {
    Init: function () {
        $(document).ready(function () {
            //Запрос данных формы
            $.ajax({
                type: "GET",
                url: $("#RowsContentURL").val(),
                data: { WaybillId: $("#WaybillId").val(), PricetypeId: $("#PriceTypeId").val() },
                success: function (result) {
                    PrintingForm_SplittingPage.ShowContent(
                        result,
                        FullingTableRow,
                        CreateSummaryForPage,
                        CreateSummaryForForm);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    alert(XMLHttpRequest.responseText);
                }
            });
        });

        //Заполняем строку данными
        function FullingTableRow(index, table, obj, content) {
            var template = $(".mainTableRow tbody").html();
            $(template).appendTo(table);

            var tr = table.find("tr:last");

            tr.find(".ItemNumber").text(obj.ItemNumber);
            tr.find(".ListPriseNumber").text(obj.ListPriseNumber);
            tr.find(".Number").text(obj.Number);
            tr.find(".Count").text(obj.Count);
            tr.find(".Price").text(obj.Price);
            tr.find(".Name").text(obj.Name);
            tr.find(".MeasureUnit").text(obj.MeasureUnit);
            tr.find(".PackType").text("");
            tr.find(".PackCount").text("");
            tr.find(".Weight").text(obj.Weight);
            tr.find(".Sum").text(obj.Sum);
            tr.find(".SerialNumber").text("");

            return tr;
        }

        // Создание и заполение строки итого по странице
        function CreateSummaryForPage(table) {
            var count = 0;
            var countScale = parseInt($("#CountScale").val());
            var sum = 0;
            var weight = 0;

            table.find("tr").each(function (index, tr) {
                count += PrintingForm_SplittingPage.ParseStrToFloat($(tr).find(".Count").html());
                sum += PrintingForm_SplittingPage.ParseStrToFloat($(tr).find(".Sum").html());
                weight += PrintingForm_SplittingPage.ParseStrToFloat($(tr).find(".Weight").html());
            })

            var template = $(".mainTablePageSummary tbody");
            template.find(".CountOnPage").html(PrintingForm_SplittingPage.ForDisplay(count, countScale, false));
            template.find(".SumOnPage").html(PrintingForm_SplittingPage.ForDisplay(sum, 2, false));
            template.find(".WeightOnPage").html(PrintingForm_SplittingPage.ForDisplay(weight, 3, false));

            $(template.html()).appendTo(table);
        }

        // создание строки итого по документу
        function CreateSummaryForForm(table, content) {
            var template = $(".mainTableEnding tbody").html();
            $(template).appendTo(table);

            if (table.find(".SummaryForPage").length) {
                table.find(".SummaryForDocumentWithoutPageSummary").remove();
            }
            else {
                table.find(".SummaryForDocumentWithPageSummary").remove();
            }
        }
    }
};﻿var PrintingForm_T1PrintingFormSettings = {
    Init: function () {
        $(document).ready(function () {
            $("#btnPrint").click(function () {
                var actionUrl = $("#ActionUrl").val();
                var url = actionUrl + '?WaybillId=' + $("#WaybillId").val();

                if (IsTrue($("#IsNeedSelectPriceType").val())) {
                    url += "&PriceTypeId=" + $("#PriceTypeId option:selected").val();
                }

                // Временная проверка на выбранный раздел для печати
                if (IsTrue($("#IsPrintProductSection:checked").val())) {
                    window.open(url);
                }

                HideModal();
            });
        });
    }
};﻿var PrintingForm_TORG12PrintingForm = {
    Init: function () {
        $(document).ready(function () {
            //Запрос данных формы
            $.ajax({
                type: "GET",
                url: $("#RowsContentURL").val(),
                data: { WaybillId: $("#WaybillId").val(), PriceTypeId: $("#PriceTypeId").val(), ConsiderReturns: $("#ConsiderReturns").val() },
                success: function (result) {
                    ShowContent(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    alert(XMLHttpRequest.responseText);
                }
            });
        });

        //Построение всей печатной формы
        function ShowContent(content) {
            //настраиваем форму
            var mainDiv = $("#mainContentPrintingForm");

            var tmp = CreateFirstPage(content.Rows);    //Создаем первую страницу
            currentIndex = tmp.currentIndex;
            var pageIndex = tmp.pageIndex + 1;

            //Цикл пока есть данные для формирования страниц
            while (currentIndex < content.Rows.length) {
                tmp = CreatePage(pageIndex, currentIndex, content.Rows);
                currentIndex = tmp.currentIndex;
                pageIndex = tmp.pageIndex + 1;
            }
            $("#maxPageNumber").val(pageIndex);
            $("#RowsCountString").text(content.RowsCountString);
            $("#TotalSalePriceString").text(content.TotalSalePriceString);
            $("#WeightBruttoString").text(content.WeightBruttoString);
        }

        //Создание новой страницы
        function CreateNewPage(pageIndex, pageBreak) {
            //Создаем страницу
            var currentPage = $(document.createElement("div"));
            if (pageBreak) {
                $("#page_" + (pageIndex - 1)).addClass("pageBreak");
            }
            if ($.browser.opera) {
                currentPage.addClass("page_Opera");
            }
            else {
                currentPage.addClass("page");
            }
            currentPage.attr("id", "page_" + pageIndex);

            var topDiv = $(document.createElement("div"));
            topDiv.addClass("topDiv");
            topDiv.appendTo(currentPage);

            var mainDiv = $("#mainContentPrintingForm");
            mainDiv.append(currentPage); //Добавляем ее на форму

            return currentPage;
        }

        //Создание первой страницы
        function CreateFirstPage(content) {
            var currentPage = CreateNewPage(0, false);   //Создаем страницу

            //Создаем заголовок печатной формы
            var headerDiv = $(document.createElement("div"));
            headerDiv.attr("id", "headerPrintingForm");
            headerDiv.appendTo(currentPage.find(".topDiv"));

            //Взять header из View!
            $("#PageHeader").appendTo("#headerPrintingForm");

            var tableHeight = currentPage.attr("offsetHeight") - headerDiv.attr("offsetHeight");    //Вычислям высоту таблицы

            var pageIndex = 0;
            var currentIndex = CreateTable(currentPage, tableHeight, content, 0);   //Выводим на первую страницу таблицу
            currentPage.find(".PageNumber").html("Страница 1");

            return { currentIndex: currentIndex, pageIndex: pageIndex };
        }

        //Создание последующих страниц (вторая и т.д.)
        function CreatePage(pageIndex, index, content) {
            var currentPage = CreateNewPage(pageIndex, true);   //Создаем страницу

            var tableHeight = currentPage.attr("offsetHeight"); //Вычисляем высоты таблицы

            var currentIndex = CreateTable(currentPage, tableHeight, content, index);   //Выводим данные на первую страницу таблицы
            currentPage.find(".PageNumber").html("Страница " + (pageIndex + 1));

            return { currentIndex: currentIndex, pageIndex: pageIndex };
        }

        //Создание ячейки таблицы
        function CreateTableCell(tr, value, className, colspan) {
            var td = $(document.createElement("td"));

            td.html(value);
            if (className != undefined && className != null) {
                td.addClass(className);
            }
            if (colspan != undefined && colspan != null) {
                td.attr("colspan", colspan);
            }
            td.appendTo(tr);
        }

        //Генерируем заголовок таблицы
        function CreateTableHeader(table, content) {
            // TODO Взять шапку из View!
            var c = $("#MainTable").find("table").html();
            //var thead = $(document.createElement("thead"));
            //thead.appendTo(table);
            $(c).appendTo(table);
        }

        //Заполняем строку данными
        function FullingTableRow(index, tr, obj, content) {
            //TODO Переделать
            CreateTableCell(tr, "", "R22C0");
            CreateTableCell(tr, obj.RowNumber, "R22C1");
            CreateTableCell(tr, obj.ArticleName, "R22C2");
            CreateTableCell(tr, obj.Id, "R22C3");
            CreateTableCell(tr, obj.MeasureUnit, "R22C4");
            CreateTableCell(tr, obj.MeasureUnitOKEI, "R22C5");
            CreateTableCell(tr, obj.PackType, "R22C6");
            CreateTableCell(tr, obj.PackVolume, "R22C7");
            CreateTableCell(tr, obj.PackCount, "col7 R22C7");
            CreateTableCell(tr, obj.WeightBrutto, "col8 R22C7");
            CreateTableCell(tr, obj.Count, "col9 R22C10");
            CreateTableCell(tr, obj.WithoutVatPrice, "R22C10");
            CreateTableCell(tr, obj.SumWithoutValueAddedTax, "col11 R22C12");
            CreateTableCell(tr, obj.ValueAddedTaxRate, "R22C13");
            CreateTableCell(tr, obj.ValueAddedTax, "col13 R22C14");
            CreateTableCell(tr, obj.WithVatPriceSum, "col14 R22C15");
        }

        //Генерируем таблицу на страницу
        function CreateTable(currentPage, maxHeight, content, index) {

            //Создаем таблицу
            var table = $(document.createElement("table"));
            table.addClass("mainTable");
            //table.attr("style", "width: 0px; height: 0px;");
            table.appendTo(currentPage);

            CreateTableHeader(table, content);  //Создаем заголовок таблицы
            //var footer = CreateFooterTable(currentPage);    //Добавляем "подвал"

            //Цикл заполнения таблицы
            var i;
            var summaryRow = null;
            var footer = null;
            var summaryForForm = null;

            for (i = index; i < content.length; i++) {
                if (summaryRow != null) {
                    summaryRow.remove();
                }

                //Создаем строку таблицы
                var tr = $(document.createElement("tr"));
                tr.addClass("R18");
                tr.appendTo(table);

                FullingTableRow(i, tr, content[i], content);   //Заполняем строку данными
                summaryRow = CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!


                var currentHeight = table.attr("offsetHeight");   //Получает текущую высоту таблицы

                if (i == content.length - 1) {

                    if (currentPage.attr("id") == "page_0") {
                        table.find(".SummaryForPage").remove();
                    }

                    summaryForForm = CreateSummaryForForm(table, content);
                    currentHeight += summaryForForm.attr("offsetHeight");

                    footer = CreateFooterTable(currentPage);    //Добавляем "подвал"
                    currentHeight += footer.attr("offsetHeight");
                }
                //Проверяем условие окончания страницы
                if (currentHeight >= maxHeight) {
                    //Страница закончилась, удаляем последнюю добавленную строку
                    summaryRow.remove();
                    if (footer != null) {
                        footer.remove();
                    }
                    if (summaryForForm != null) {
                        summaryForForm.remove();
                    }
                    tr.remove();
                    CreateSummaryForPage(table);  // Вставить расчет и вставку "Итого" по странице!
                    break;
                }
            }

            return i;
        }

        function CreateSummaryForPage(table) {
            var sum7 = 0;
            var sum8 = 0;
            var sum9 = 0;
            var sum11 = 0;
            var sum13 = 0;
            var sum14 = 0;
            $.each(table.find("tr"), function (index, row) {
                sum7 += parseStrToFloat($(row).find(".col7").html());
                sum8 += parseStrToFloat($(row).find(".col8").html());
                sum9 += parseStrToFloat($(row).find(".col9").html());
                sum11 += parseStrToFloat($(row).find(".col11").html());
                sum13 += parseStrToFloat($(row).find(".col13").html());
                sum14 += parseStrToFloat($(row).find(".col14").html());
            });

            var tr = $(document.createElement("tr"));
            tr.addClass("SummaryForPage R18");
            tr.appendTo(table);

            CreateTableCell(tr, "", "R26C0");
            CreateTableCell(tr, "", "R26C1");
            CreateTableCell(tr, "", "R26C2");
            CreateTableCell(tr, "", "R26C3");
            CreateTableCell(tr, "", "R26C0");
            CreateTableCell(tr, "", "R26C7");
            CreateTableCell(tr, "Итого", "R26C7", 2);
            CreateTableCell(tr, ForDisplay(sum7, true), "R26C8");
            CreateTableCell(tr, ValueForDisplay(sum8, 3, false), "R26C8");
            CreateTableCell(tr, ForDisplay(sum9, true), "R26C8");
            CreateTableCell(tr, "X", "R26C11");
            CreateTableCell(tr, ForDisplay(sum11, false), "R26C8");
            CreateTableCell(tr, "X", "R26C13");
            CreateTableCell(tr, ForDisplay(sum13, false), "R26C14");
            CreateTableCell(tr, ForDisplay(sum14, false), "R26C15");

            return tr;
        }

        // removeTrailingZeroes - удалять ли последние нули в копейках
        function ForDisplay(value, removeTrailingZeroes) {
            var result = "";
            if (!(value == undefined || isNaN(value) || value == null)) {
                result = ValueForDisplay(value, 2, removeTrailingZeroes);
            }

            return result;
        }

        function parseStrToFloat(value) {
            // Проверка одновременно на null и на undefined
            if (value == null)
                return 0;

            result = isString(value) ?
                TryGetDecimal(value.replaceAll(" ", "")) :
                TryGetDecimal(value);

            return !isNaN(result) ? result : 0;
        }

        //Расчет суммы по всей форме
        function CreateSummaryForForm(table, content) {
            var sum8 = 0;
            var sum9 = 0;
            var sum11 = 0;
            var sum13 = 0;
            var sum14 = 0;
            for (var i = 0; i < content.length; i++) {
                var row = content[i];
                sum8 += row.WeightBruttoValue;
                sum9 += parseStrToFloat(row.Count);
                sum11 += parseStrToFloat(row.SumWithoutValueAddedTax);
                sum13 += parseStrToFloat(row.ValueAddedTax);
                sum14 += parseStrToFloat(row.WithVatPriceSum);
            }

            var tr = $(document.createElement("tr"));
            tr.addClass("R18");
            tr.appendTo(table);

            if (table.parent().attr("id") != "page_0") {
                CreateTableCell(tr, "", "R26C0");
                CreateTableCell(tr, "Всего по накладной", "R33C7", 7);
                CreateTableCell(tr, "", "R33C8");
                CreateTableCell(tr, ValueForDisplay(sum8, 3, false), "R33C8");
                CreateTableCell(tr, ForDisplay(sum9, true), "R33C8");
                CreateTableCell(tr, "X", "R33C11");
                CreateTableCell(tr, ForDisplay(sum11, false), "R22C10");
                CreateTableCell(tr, "X", "R33C11");
                CreateTableCell(tr, ForDisplay(sum13, false), "R22C10");
                CreateTableCell(tr, ForDisplay(sum14, false), "R22C10");
            }
            else {
                CreateTableCell(tr, "", "R26C0");
                CreateTableCell(tr, "", "R26C1");
                CreateTableCell(tr, "", "R26C2");
                CreateTableCell(tr, "", "R26C3");
                CreateTableCell(tr, "", "R26C0");
                //CreateTableCell(tr, "", "R26C7");
                CreateTableCell(tr, "Всего по накладной", "R26C7", 3);
                CreateTableCell(tr, "", "R26C8");
                CreateTableCell(tr, ValueForDisplay(sum8, 3, false), "R26C8");
                CreateTableCell(tr, ForDisplay(sum9, true), "R26C8");
                CreateTableCell(tr, "X", "R26C11");
                CreateTableCell(tr, ForDisplay(sum11, false), "R26C15");
                CreateTableCell(tr, "X", "R26C13");
                CreateTableCell(tr, ForDisplay(sum13, false), "R26C15");
                CreateTableCell(tr, ForDisplay(sum14, false), "R26C15");
            }

            return tr;
        }

        //Создаем таблицу подписей
        function CreateFooterTable(currentPage) {
            //Взять footer из View
            var footer = $(document.createElement("div"));
            footer.appendTo(currentPage);
            currentPage.find(".mainTable").after($("#PageFooter"));

            return footer;
        }
    }
};﻿var Producer_Details = {
    Init: function () {
        $(document).ready(function () {

            $("#btnCreateProductionOrder").live("click", function () {
                window.location = "/ProductionOrder/Create?producerId=" + $("#Id").val() + GetBackUrl();
            });

            $('#btnAddRussianBankAccount').live("click", function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Producer/AddRussianBankAccount",
                    data: { producerId: $('#Id').val() },
                    success: function (result) {
                        $('#producerBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#producerBankAccountDetailsForEdit"));
                        ShowModal("producerBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            $('#btnAddForeignBankAccount').live("click", function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Producer/AddForeignBankAccount",
                    data: { producerId: $('#Id').val() },
                    success: function (result) {
                        $('#producerForeignBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#producerForeignBankAccountDetailsForEdit"));
                        ShowModal("producerForeignBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $('#gridRussianBankAccounts .edit_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();

                $.ajax({
                    type: "GET",
                    url: "/Producer/EditRussianBankAccount",
                    data: { producerId: $('#Id').val(), bankAccountId: accountId },
                    success: function (result) {
                        $('#producerBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#producerBankAccountDetailsForEdit"));
                        ShowModal("producerBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            $('#gridForeignBankAccounts .edit_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();

                $.ajax({
                    type: "GET",
                    url: "/Producer/EditForeignBankAccount",
                    data: { producerId: $('#Id').val(), bankAccountId: accountId },
                    success: function (result) {
                        $('#producerForeignBankAccountDetailsForEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#producerForeignBankAccountDetailsForEdit"));
                        ShowModal("producerForeignBankAccountDetailsForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $('#gridRussianBankAccounts .delete_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();

                if (confirm('Вы уверены?')) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/Producer/RemoveRussianBankAccount",
                        data: { producerId: $('#Id').val(), bankAccountId: accountId },
                        success: function (result) {
                            RefreshGrid("gridRussianBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageRussianBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                        }
                    });
                }
            });

            $('#gridForeignBankAccounts .delete_link').live('click', function () {
                var accountId = $(this).parent('td').parent('tr').find('.BankAccountId').text();

                if (confirm('Вы уверены?')) {
                    StartGridProgress($(this).closest(".grid"));

                    $.ajax({
                        type: "POST",
                        url: "/Producer/RemoveForeignBankAccount",
                        data: { producerId: $('#Id').val(), bankAccountId: accountId },
                        success: function (result) {
                            RefreshGrid("gridForeignBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageForeignBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                        }
                    });
                }
            });


            $("#btnBackTo").live('click', function () {
                window.location = $('#BackURL').val();
            });

            $('#btnEdit').live("click", function () {
                var id = $('#Id').val();
                window.location = "/Producer/Edit?id=" + id + GetBackUrl();
            });

            $('#btnDelete').live("click", function () {
                if (confirm('Вы уверены?')) {
                    var id = $('#Id').val();

                    $.ajax({
                        type: "POST",
                        url: "/Producer/Delete/",
                        data: { producerId: id },
                        success: function () {
                            window.location = "/Producer/List";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProducerEdit");
                        }
                    });
                }
            });
        });

        $("#productionOrderPaymentEdit #linkChangePaymentCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderPaymentEdit #PaymentCurrencyId").val();
            if (!IsDefaultOrEmpty(currencyId)) {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnProductionOrderPaymentEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $("#currencyRateSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentEdit");
                    }
                });
            }
        });
    },

    RefreshMainDetails: function (obj) {
        $("#OrderSum").text(obj.OrderSum);
        $("#OpenOrderSum").text(obj.OpenOrderSum);
        $("#ProductionSum").text(obj.ProductionSum);
        $("#PaymentSum").text(obj.PaymentSum);
    },

    OnSuccessRussianBankAccountEdit: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridRussianBankAccounts", function () {
                ShowSuccessMessage('Сохранено.', 'messageRussianBankAccountList');
            });
        });
    },

    OnSuccessForeignBankAccountEdit: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridForeignBankAccounts", function () {
                ShowSuccessMessage('Сохранено.', 'messageForeignBankAccountList');
            });
        });
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования оплаты
    OnProductionOrderPaymentEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        var productionOrderPaymentId = $("#productionOrderPaymentEdit #ProductionOrderPaymentId").val();
        $.ajax({
            type: "POST",
            url: "/ProductionOrderPayment/ChangeProductionOrderPaymentCurrencyRate",
            data: { productionOrderPaymentId: productionOrderPaymentId, currencyRateId: currencyRateId },
            success: function (result) {
                // Обновление модальной формы
                $("#productionOrderPaymentEdit #PaymentCurrencyRateId").val(productionOrderPaymentId);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateName").text(result.PaymentCurrencyRateName);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text(result.PaymentCurrencyRateString);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val(result.PaymentCurrencyRateValue);
                ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();

                RefreshGrid("gridProducerPayments", function () {
                    var productionOrderPlannedPaymentId = $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentId").val();
                    var producerId = $('#Id').val();
                    $.ajax({
                        type: "GET",
                        url: "/Producer/GetMainChangeableIndicators",
                        data: { producerId: producerId },
                        success: function (result) {
                            Producer_Details.RefreshMainDetails(result);
                            // Если плановый платеж указан, то ...
                            if (productionOrderPaymentId != "00000000-0000-0000-0000-000000000000") {
                                // ... запрашиваем детали плановой оплаты
                                $.ajax({
                                    type: "POST",
                                    url: "/ProductionOrder/GetPlannedPaymentInfo",
                                    data: { productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                                    success: function (result) {
                                        // Обновление полей
                                        $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentSumInCurrency").text(result.PlannedPaymentSumInCurrency);
                                        $("#productionOrderPaymentEdit .ProductionOrderPlannedPaymentCurrencyLiteralCode").text(result.PlannedPaymentCurrencyLiteralCode);
                                        $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentPaidSumInBaseCurrency").text(result.PaymentSumInBaseCurrency);

                                        HideModal(function () {
                                            ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                                        });
                                    },
                                    error: function (XMLHttpRequest, textStatus, thrownError) {
                                        ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
                                    }
                                });
                            } else {    // иначе закрываем МФ
                                HideModal(function () {
                                    ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                                });
                            }

                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
                        }
                    }); // end AJAX

                }); // end RefreshGrid
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
            }
        });
    }
};﻿var Producer_Details_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            if (IsTrue($("#AllowToViewCuratorDetails").val())) {
                $("#CuratorName").attr("href", "/User/Details?id=" + $("#CuratorId").val() + GetBackUrl());
            }
            else {
                $("#CuratorName").addClass("disabled");
            }
        });
    }
};﻿var Producer_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();
        });

        $("#btnBack").live("click", function () {
            window.location = $("#BackURL").val();
        });
    },

    OnSuccessProducerSave: function (ajaxContext) {
        if (IsDefaultOrEmpty($("#Id").val())) {
            window.location = "/Producer/Details?id=" + ajaxContext + GetBackUrlFromString($("#BackURL").val());
        } else {
            window.location = $("#BackURL").val();
        }
    },

    OnFailProducerSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProducerEdit");
    }
};﻿var Producer_ProducerPaymentsGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridProducerPayments table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $(".paymentDelete").click(function () {
                var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                var paymentId = $(this).parent("td").parent("tr").find(".Id").text();

                if (confirm("Вы действительно хотите удалить оплату?")) {
                    $.ajax({
                        type: "POST",
                        url: "/Producer/DeleteProducerPayment",
                        data: { productionOrderId: productionOrderId, paymentId: paymentId },
                        success: function (result) {
                            Producer_Details.RefreshMainDetails(result);
                            RefreshGrid("gridProducerPayments", function () {
                                ShowSuccessMessage("Оплата удалена", "messagePaymentsList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messagePaymentsList");
                        }
                    });
                }
            });

            $(".paymentDetails").click(function () {
                var paymentId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderPayment/Details",
                    data: { productionOrderPaymentId: paymentId },
                    success: function (result) {
                        $("#productionOrderPaymentEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderPaymentEdit"));
                        ShowModal("productionOrderPaymentEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messagePaymentsList");
                    }
                });
            });

        });
    }
};﻿var Producer_ProducersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridProducers table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Producer/Details?id=" + id + GetBackUrl());
            });

            $("#btnCreateProducer").click(function () {
                window.location = "/Producer/Create?backURL=" + $("#currentUrl").val();
            });
        });               
    }
};﻿var Producer_SelectGrid = {
    Init: function () {
        $(document).ready(function () {
            // Действия после выбора производителя из грида (ссылка "Выбрать")
            $(".linkProducerSelect").click(function () {
                var producerId = $(this).parent("td").parent("tr").find(".Id").text();
                var producerName = $(this).parent("td").parent("tr").find(".ProducerName").text();
                OnProducerSelectLinkClick(producerId, producerName);
            });
        });
     }
};﻿var ProductionOrder_BatchRowEdit = {
    Init: function () {
        $(document).ready(function () {

            SetFieldScale("#Count", 12, $("#MeasureUnitScale").val(), "#productionOrderBatchRowEdit", true);

            $("#productionOrderBatchRowEdit #ManufacturerName").click(function () {
                var producerId = $('#ProducerId').val();
                $.ajax({
                    type: "GET",
                    url: "/Manufacturer/SelectManufacturerOfProducer/",
                    data: { producerId: producerId },
                    success: function (result) {
                        $('#manufacturerSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#manufacturerSelector"));
                        ShowModal("manufacturerSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowEdit");
                    }
                });
            });

            $('#ProductionCost').focus();
            var articleId = $("#ArticleId").val();
            if (articleId == "" || articleId == 0) {
                $('#productionOrderBatchRowEdit input[type!="button"][type!="submit"][type!="hidden"]').attr("disabled", "disabled");
            }

            // открытие формы выбора товара
            $("#productionOrderBatchRowEdit #ArticleName").bind("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/Article/SelectArticle",
                    success: function (result) {
                        $('#articleSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#articleSelector"));
                        ShowModal("articleSelector");

                        ProductionOrder_BatchRowEdit.BindArticleSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowEdit");
                    }
                });
            });

            //Обрабатываем выбор фабрики-изготовителя
            $("#manufacturerSelector .select").die("click");
            $("#manufacturerSelector .select").live("click", function () {

                var manufacturerId = $(this).parent("td").parent("tr").find(".Id").html();
                var manufacturerName = $(this).parent("td").parent("tr").find(".ManufacturerName").html();

                $("#ManufacturerName").html(manufacturerName);
                $("#ManufacturerId").val(manufacturerId);

                HideModal();
            });

            if ($("#PackHeight").val() > 0 && $("#PackWidth").val() > 0 && $("#PackLength").val() > 0) {
                $("#PackVolume").attr("disabled", "disabled");
            }

            $("#PackHeight, #PackLength, #PackWidth").die("change");
            $("#PackHeight, #PackLength, #PackWidth").live("change", function () {
                var height = parseFloat($("#PackHeight").val());
                var width = parseFloat($("#PackWidth").val());
                var length = parseFloat($("#PackLength").val());

                var volume = height * width * length / 1000000000; //мм3 переводим в м3

                if (volume < 0.000001) volume = 0; //если объем меньше 0.000001, то значение volume становится 1е-7 и ValueForDisplay на нем неверно срабатывает

                if ((isNaN(height) || height <= 0) || (isNaN(width) || width <= 0) || (isNaN(length) || length <= 0)) {
                    $("#PackVolume").removeAttr("disabled");
                }
                else {
                    $("#PackVolume").attr("disabled", "disabled");

                    if (height > 0 && width > 0 && length > 0) {
                        $("#PackVolume").val(ValueForEdit(volume, 4));
                    }
                }

                if (isNaN(volume)) return false;

                var packCount = TryGetDecimal($("#PackCount").val());

                if (!isNaN(packCount)) {
                    ProductionOrder_BatchRowEdit.CalculateVolumes(packCount);
                }
            });

            $("#Count").die("change");
            $("#Count").live("change", function () {
                var count = TryGetDecimal($("#Count").val(), $("#MeasureUnitScale").val());
                if (isNaN(count)) return false;

                var packCount;
                var packSize = TryGetDecimal($("#PackSize").text().replaceAll(" ", ""));
                if (!isNaN(packSize && packSize > 0)) {
                    packCount = Math.floor(count / packSize);
                    $("#PackCount").val(ValueForEdit(packCount));
                    count = packSize * packCount;
                    $("#Count").val(ValueForEdit(count));
                }

                var productionCost = BankRound($("#ProductionCost").val(), 2);
                if (!isNaN(productionCost)) {
                    var totalCost = BankRound(productionCost * count, 2);
                    $("#TotalCost").val(ValueForEdit(totalCost));
                }

                ProductionOrder_BatchRowEdit.CalculateMeasures(packCount);
            });

            $("#PackCount").die("change");
            $("#PackCount").live("change", function () {
                var packCount = TryGetDecimal($("#PackCount").val());
                if (isNaN(packCount)) return false;

                var count;
                var packSize = TryGetDecimal($("#PackSize").text().replaceAll(" ", ""));
                if (!isNaN(packSize)) {
                    count = packSize * packCount;
                    $("#Count").val(ValueForEdit(count));
                }

                var productionCost = BankRound($("#ProductionCost").val(), 2);
                if (!isNaN(productionCost) && !isNaN(count)) {
                    var totalCost = BankRound(productionCost * count, 2);
                    $("#TotalCost").val(ValueForEdit(totalCost));
                }

                ProductionOrder_BatchRowEdit.CalculateMeasures(packCount);
            });

            $("#TotalCost").die("change");
            $("#TotalCost").live("change", function () {
                var totalCost = BankRound($("#TotalCost").val(), 2);
                if (isNaN(totalCost)) return false;

                var productionCost = BankRound($("#ProductionCost").val(), 2);
                if (isNaN(productionCost) || productionCost <= 0) return false;

                var count = TryGetDecimal(totalCost / productionCost, $("#MeasureUnitScale").val());
                
                var packSize = TryGetDecimal($("#PackSize").text().replaceAll(" ", ""));
                if (!isNaN(packSize) && packSize > 0) {
                    var packCount = Math.floor(count / packSize);
                    $("#PackCount").val(ValueForEdit(packCount));

                    count = packSize * packCount;
                    $("#Count").val(ValueForEdit(count));

                    totalCost = BankRound(productionCost * count, 2);
                    $("#TotalCost").val(ValueForEdit(totalCost));

                    ProductionOrder_BatchRowEdit.CalculateMeasures(packCount);
                }
            });

            $("#ProductionCost").die("keyup paste cut");
            $("#ProductionCost").live("keyup paste cut", function () {
                var productionCost = BankRound($("#ProductionCost").val(), 2);
                if ($("#Count, #TotalCost, #PackCount").attr("disabled") && !isNaN(productionCost) && productionCost > 0) {
                    $("#Count, #TotalCost, #PackCount").removeAttr("disabled").val('0');
                }
            });

            $("#ProductionCost").die("change");
            $("#ProductionCost").live("change", function () {
                var productionCost = BankRound($("#ProductionCost").val(), 2);

                if (!isNaN(productionCost) && productionCost > 0) {
                    var countStr = $("#Count").val();
                    if (countStr != "") {
                        var count = TryGetDecimal(countStr, $("#MeasureUnitScale").val());
                        if (!isNaN(count) && count > 0) {
                            var totalCost = BankRound(productionCost * count, 2);
                            $("#TotalCost").val(ValueForEdit(totalCost));
                        }
                    }
                }
                else {
                    $("#Count, #TotalCost, #PackCount").attr("disabled", "disabled").val("");
                }
            });

            $("#PackWeight, #PackVolume").die("keyup change paste cut");
            $("#PackWeight, #PackVolume").live("keyup change paste cut", function () {
                var packCount = TryGetDecimal($("#PackCount").val());
                if (isNaN(packCount)) return false;

                ProductionOrder_BatchRowEdit.CalculateMeasures(packCount);
            });

            $("#AddCountry").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Country/Create/",
                    success: function (result) {
                        $('#countryAdd').hide().html(result);
                        $.validator.unobtrusive.parse($("#countryAdd"));
                        ShowModal("countryAdd");
                        $("#countryAdd #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowEdit");
                    }
                });
            });

        });
    },

    CalculateMeasures: function (count) {
        if ($("#ArticleId").val() != "") {
            ProductionOrder_BatchRowEdit.CalculateWeights(count);
            ProductionOrder_BatchRowEdit.CalculateVolumes(count);
        }
    },

    CalculateWeights: function (packCount) {
        var weight = Number($("#PackWeight").val().replaceAll(",", "."));
        if (isNaN(weight)) weight = 0;

        var previousTotalWeight = Number($("#TotalWeight").text().replaceAll(" ", ""));
        if (isNaN(previousTotalWeight)) previousTotalWeight = 0;

        var totalWeight = weight * packCount;
        $("#TotalWeight").text(ValueForDisplay(totalWeight));

        var previousBatchWeight = Number($("#BatchWeight").text().replaceAll(" ", ""));
        if (isNaN(previousBatchWeight)) previousBatchWeight = 0;
        $("#BatchWeight").text(ValueForDisplay(previousBatchWeight - previousTotalWeight + totalWeight));
    },

    CalculateVolumes: function (packCount) {
        var volume = Number($("#PackVolume").val().replaceAll(",", "."));

        var previousTotalVolume = Number($("#TotalVolume").text().replaceAll(" ", ""));
        if (isNaN(previousTotalVolume)) previousTotalVolume = 0;

        var totalVolume = volume * packCount;
        $("#TotalVolume").text(ValueForDisplay(totalVolume, 4));

        var previousBatchVolume = Number($("#BatchVolume").text().replaceAll(" ", ""));
        if (isNaN(previousBatchVolume)) previousBatchVolume = 0;
        $("#BatchVolume").text(ValueForDisplay(previousBatchVolume - previousTotalVolume + totalVolume, 4));
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            var articleId = $(this).parent("td").parent("tr").find(".articleId").text();
            $("#ArticleId").val(articleId);

            var producerId = $("#ProducerId").val();

            var measureUnitName = $(this).parent("td").parent("tr").find(".MeasureUnitShortName").text();
            $("#MeasureUnitName").text(measureUnitName);
            $("#MeasureUnitNameForPackSize").text(measureUnitName);

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            $("#MeasureUnitScale").val(measureUnitScale);
            SetFieldScale("#Count", 12, measureUnitScale, "#productionOrderBatchRowEdit", true);

            HideModal();

            $.ajax({
                type: "GET",
                url: "/ProductionOrder/GetArticleInfo/",
                data: { articleId: articleId, producerId: producerId },
                success: function (result) {
                    $('#productionOrderBatchRowEdit #PackHeight').removeAttr("disabled").val(result.PackHeight);
                    $('#productionOrderBatchRowEdit #PackLength').removeAttr("disabled").val(result.PackLength);
                    $('#productionOrderBatchRowEdit #PackWidth').removeAttr("disabled").val(result.PackWidth);
                    $('#productionOrderBatchRowEdit #PackWeight').removeAttr("disabled").val(result.PackWeight);

                    $('#productionOrderBatchRowEdit #PackSize').text(result.PackSize);
                    $('#productionOrderBatchRowEdit #PackVolume').val(result.PackVolume);

                    $('#productionOrderBatchRowEdit #ProductionCost').val("");
                    $('#productionOrderBatchRowEdit #Count').val("");
                    $('#productionOrderBatchRowEdit #PackCount').val("");
                    $('#productionOrderBatchRowEdit #TotalCost').val("");

                    if (result.PackHeight > 0 && result.PackLength > 0 && result.PackWidth > 0) {
                        $("#PackVolume").attr("disabled", "disabled");
                    }
                    else {
                        $("#PackVolume").removeAttr("disabled");
                    }

                    if (result.ProductionCountryId != "") {
                        $('#productionOrderBatchRowEdit #ProductionCountryId').attr('value', result.ProductionCountryId);
                    }

                    $('#productionOrderBatchRowEdit #ManufacturerId').val(result.ManufacturerId);
                    $('#productionOrderBatchRowEdit #ManufacturerName').text(result.ManufacturerName);

                    if (result.ProductionCountryId == "") {
                        $('#productionOrderBatchRowEdit #ProductionCountryId').focus();
                    }
                    else {
                        if (result.ManufacturerId == "") {
                            $('#productionOrderBatchRowEdit #ProductionCountryId').focus();
                        }
                        else {
                            $("#productionOrderBatchRowEdit #ProductionCost").focus();
                        }
                    }

                    $('#ProductionCost').removeAttr("disabled");

                    var packCount = Number($("#PackCount").val());
                    if (!isNaN(packCount)) {
                        ProductionOrder_BatchRowEdit.CalculateMeasures(packCount);
                    }
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowEdit");
                }
            });
        });
    },

    OnFailProductionOrderBatchRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderBatchRowEdit");
    },

    OnBeginProductionOrderBatchRowEdit: function () {
        StartButtonProgress($("#btnSaveProductionOrderBatchRow"));
    },

    OnSuccessManufacturerSave: function (ajaxContext) {
        $("#ManufacturerName").html(ajaxContext.Name);
        $("#ManufacturerId").val(ajaxContext.Id);

        HideModal(function () {
            HideModal();
        });
    },

    OnSuccessCountrySave: function (ajaxContext) {
        HideModal();
        $.ajax({
            type: "GET",
            url: "/Country/GetList/",
            success: function (result) {
                $("#ProductionCountryId").fillSelect(result);
                $("#ProductionCountryId").val(ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowEdit");
            }
        });
    }
};﻿var ProductionOrder_Details = {

    // Переходы между этапами - 3 обработчика: Next, Previous, ToUnsuccessful
    // Редактирование этапов - 6 обработчиков: SaveStage, MoveUp, MoveDown, DeleteStage, LoadStagesFromTemplate, ClearCustomStages

    Init: function () {
        $(document).ready(function () {
            var showExecutionGraph = IsTrue($("#AllowToViewStageList").val());
            if (showExecutionGraph) {

                var isScaleOfOrder = false;
                if ($(".graphData").length > 1)
                    isScaleOfOrder = true;

                //Отрисовываем графики партий
                $(".graphData").each(function (index, element) {
                    var graphData = $(element).text();
                    //получаем ид партии из ид элемента
                    var batchId = $(element).attr("id").substr(10);
                    drawExecutionGraph("graph-" + batchId, graphData, isScaleOfOrder);
                });

                //Получаем дату начала и конца заказа
                var data = $.parseJSON($(".graphData").html());
                var startDate = new Date(parseInt(data.ProductionOrderStartDate.slice(6, 19)));
                var endDate = new Date(parseInt(data.ProductionOrderEndDate.slice(6, 19)));

                //Выводим даты
                var dateDiv = $('<div style="height: 20px;"><div style="background: #fff;float: left; width: 50%; padding: 5px 0px 3px;">' + dateToString(startDate, 2) + ' - Старт</div>' +
                '<div style="background: #fff;float: left; width: 50%; padding: 5px 0px 3px; text-align: right">Завершение - ' + dateToString(endDate, 2) + '</div><div class="clear"></div></div>');

                $("#executionGraph .grid").append(dateDiv);
            }


            ProductionOrder_Details.RefreshColorOfSumIndicators();

            $("#btnPlannedExpensesSumDetails").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditPlannedExpenses",
                    data: { id: $("#Id").val() },
                    success: function (result) {
                        $("#ProductionOrderPlannedExpensesEdit").html(result);
                        $.validator.unobtrusive.parse($("#ProductionOrderPlannedExpensesEdit"));
                        ShowModal("ProductionOrderPlannedExpensesEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            });

            // Возврат на прежнюю страницу
            $("#btnBack").click(function () {
                window.location = $("#BackUrl").val();
            });

            // Формирование ссылок
            if (IsTrue($("#AllowToViewProducerDetails").val())) {
                $("#ProducerName").attr("href", "/Producer/Details?id=" + $("#ProducerId").val() + GetBackUrl());
            }

            ProductionOrder_Details.UpdateCuratorLink();
            ProductionOrder_Details.UpdateAccountOrganizationLink();
            ProductionOrder_Details.UpdateStorageLink();

            $("#btnEditPlannedPayments").click(function () {
                var productionOrderId = $("#Id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditPlannedPayments",
                    data: { productionOrderId: productionOrderId },
                    success: function (result) {
                        $("#productionOrderEditPlannedPayments").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderEditPlannedPayments"));
                        ShowModal("productionOrderEditPlannedPayments");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            });

            $("#btnEdit").click(function () {
                window.location = "/ProductionOrder/Edit?id=" + $("#Id").val() + GetBackUrl();
            });

            //btnClose - кнопка закрытия в деталях, 
            $("#btnClose").click(function () {
                StartButtonProgress($(this));
                var productionOrderId = $("#Id").val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/Close",
                    data: { productionOrderId: productionOrderId },
                    success: function (result) {
                        window.location = window.location;
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            });


            $("#btnOpen").click(function () {
                StartButtonProgress($(this));
                var productionOrderId = $("#Id").val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/Open",
                    data: { productionOrderId: productionOrderId },
                    success: function (result) {
                        window.location = window.location;
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            });

            $("#btnArticlePrimeCost").click(function () {
                StartButtonProgress($(this));
                var productionOrderId = $("#Id").val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/ArticlePrimeCostSettingsForm",
                    data: { productionOrderId: productionOrderId },
                    success: function (result) {
                        $("#productionOrderArticlePrimeCostSettingsForm").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderArticlePrimeCostSettingsForm"));
                        ShowModal("productionOrderArticlePrimeCostSettingsForm");
                        $("#productionOrderArticlePrimeCostSettingsForm #ArticlePrimeCostCalculationType").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            });
        });

        // Формирование ссылок
        if (IsTrue($("#AllowToViewProducerDetails").val())) {
            $("#ProducerName").attr("href", "/Producer/Details?id=" + $("#ProducerId").val() + GetBackUrl());
        }

        if (IsTrue($("#AllowToViewCuratorDetails").val())) {
            $("#CuratorName").attr("href", "/User/Details?id=" + $("#CuratorId").val() + GetBackUrl());
        }
        else {
            $("#CuratorName").addClass("disabled");
        }

        ProductionOrder_Details.UpdateCuratorLink();
        ProductionOrder_Details.UpdateAccountOrganizationLink();
        ProductionOrder_Details.UpdateStorageLink();


        $("#productionOrderArticlePrimeCostSettingsForm #btnCalculateArticlePrimeCost").live("click", function () {
            var isValid = true;
            var productionOrderId = $("#Id").val();
            var articlePrimeCostCalculationTypeId = $("#productionOrderArticlePrimeCostSettingsForm #ArticlePrimeCostCalculationTypeId").val();
            if (isNaN(TryGetDecimal(articlePrimeCostCalculationTypeId))) {
                $("#productionOrderArticlePrimeCostSettingsForm #ArticlePrimeCostCalculationTypeId")
                        .ValidationError("Укажите, по каким значениям считать себестоимость"); isValid = false;
            }
            var divideCustomsExpenses = $("#productionOrderArticlePrimeCostSettingsForm #DivideCustomsExpenses").val();
            var showArticleVolumeAndWeight = $("#productionOrderArticlePrimeCostSettingsForm #ShowArticleVolumeAndWeight").val();
            var articleTransportingPrimeCostCalculationTypeId = $("#productionOrderArticlePrimeCostSettingsForm #ArticleTransportingPrimeCostCalculationTypeId").val();
            if (isNaN(TryGetDecimal(articleTransportingPrimeCostCalculationTypeId))) {
                $("#productionOrderArticlePrimeCostSettingsForm #ArticleTransportingPrimeCostCalculationTypeId")
                        .ValidationError("Укажите, как считать себестоимость транспортировки"); isValid = false;
            }
            var includeUnsuccessfullyClosedBatches = $("#productionOrderArticlePrimeCostSettingsForm #IncludeUnsuccessfullyClosedBatches").val();
            var includeUnapprovedBatches = $("#productionOrderArticlePrimeCostSettingsForm #IncludeUnapprovedBatches").val();
            if (isValid) {
                var url = "/ProductionOrder/ArticlePrimeCostForm?productionOrderId=" + productionOrderId +
                "&articlePrimeCostCalculationTypeId=" + articlePrimeCostCalculationTypeId +
                "&divideCustomsExpenses=" + divideCustomsExpenses +
                "&showArticleVolumeAndWeight=" + showArticleVolumeAndWeight +
                "&articleTransportingPrimeCostCalculationTypeId=" + articleTransportingPrimeCostCalculationTypeId +
                "&includeUnsuccessfullyClosedBatches=" + includeUnsuccessfullyClosedBatches +
                "&includeUnapprovedBatches=" + includeUnapprovedBatches;
                window.open(url);
                HideModal();
            }
        });

        $("#linkChangeStage").live("click", function () {
            var productionOrderBatchId = $("#SingleProductionOrderBatchId").val();

            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ChangeStage",
                data: { productionOrderBatchId: productionOrderBatchId, isSingleBatch: "1" },
                success: function (result) {
                    $('#productionOrderBatchChangeStage').hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderBatchChangeStage"));
                    ShowModal("productionOrderBatchChangeStage");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                }
            });
        });

        $("#productionOrderBatchChangeStage #btnMoveToUnsuccessfulClosingStage").live("click", function () {
            if (confirm('Вы уверены?')) {
                StartButtonProgress($(this));
                var productionOrderBatchId = $("#SingleProductionOrderBatchId").val();
                var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveToUnsuccessfulClosingStage",
                    data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "1" },
                    success: function (result) {
                        HideModal(function () {
                            ProductionOrder_Details.RefreshExecutionGraph(function () {
                                ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderEdit");
                                ProductionOrder_Details.RefreshMainDetailsAndPermissions(result.mainDetails);

                                if (result.allowToCloseProductionOrder)
                                    ProductionOrder_Details.ShowConfirmCloseOrder();
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                    }
                });
            }
        });

        $("#productionOrderBatchChangeStage #btnMoveToNextStage").live("click", function () {
            StartButtonProgress($(this));
            var productionOrderBatchId = $("#SingleProductionOrderBatchId").val();
            var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
            $.ajax({
                type: "POST",
                url: "/ProductionOrder/MoveToNextStage",
                data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "1" },
                success: function (result) {
                    HideModal(function () {
                        ProductionOrder_Details.RefreshExecutionGraph(function () {
                            ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderEdit");
                            ProductionOrder_Details.RefreshMainDetailsAndPermissions(result.mainDetails);

                            if (result.allowToCloseProductionOrder)
                                ProductionOrder_Details.ShowConfirmCloseOrder();
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                }
            });
        });

        $("#productionOrderBatchChangeStage #btnMoveToPreviousStage").live("click", function () {
            if (confirm('Вы уверены?')) {
                StartButtonProgress($(this));
                var productionOrderBatchId = $("#SingleProductionOrderBatchId").val();
                var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveToPreviousStage",
                    data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "1" },
                    success: function (result) {
                        HideModal(function () {
                            ProductionOrder_Details.RefreshExecutionGraph(function () {
                                ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderEdit");
                                ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                    }
                });
            }
        });



        $("#linkCreateContract").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/CreateContract",
                data: { productionOrderId: productionOrderId },
                success: function (result) {
                    $("#producerContractEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#producerContractEdit"));
                    ShowModal("producerContractEdit");
                    $("#producerContractEdit #Number").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                }
            });
        });

        $("#linkEditContract").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/EditContract",
                data: { productionOrderId: productionOrderId },
                success: function (result) {
                    $("#producerContractEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#producerContractEdit"));
                    ShowModal("producerContractEdit");
                    $("#producerContractEdit #Number").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                }
            });
        });

        $("#main_page #linkChangeCurrencyRate").live("click", function () {
            var currencyId = $("#main_page #CurrencyId").val();
            $.ajax({
                type: "GET",
                url: "/Currency/SelectCurrencyRate",
                data: { currencyId: currencyId, selectFunctionName: "OnCurrencyRateSelectLinkClick" },
                success: function (result) {
                    $('#currencyRateSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#currencyRateSelector"));
                    ShowModal("currencyRateSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                }
            });
        });

        // Операции над транспортными листами

        $("#gridProductionOrderTransportSheet #btnCreateTransportSheet").live("click", function () {
            var productionOrderId = $("#Id").val();
            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderCurrencyDeterminationTypeSelect",
                data: { productionOrderId: productionOrderId, productionOrderCurrencyDocumentType: "1" },
                success: function (result) {
                    $("#productionOrderCurrencyDeterminationTypeSelector").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderCurrencyDeterminationTypeSelector"));
                    ShowModal("productionOrderCurrencyDeterminationTypeSelector");
                    $("#productionOrderCurrencyDeterminationTypeSelector #ProductionOrderCurrencyDeterminationType").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTransportSheetList");
                }
            });
        });

        $("#gridProductionOrderTransportSheet .linkTransportSheetEdit").live("click", function () {
            var productionOrderId = $("#Id").val();
            var transportSheetId = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/EditProductionOrderTransportSheet",
                data: { productionOrderId: productionOrderId, transportSheetId: transportSheetId },
                success: function (result) {
                    $("#productionOrderTransportSheetEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderTransportSheetEdit"));
                    ShowModal("productionOrderTransportSheetEdit");
                    $("#productionOrderTransportSheetEdit #ForwarderName").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTransportSheetList");
                }
            });
        });

        // Сбрасываем курс валюты при смене валюты во время редактирования транспортного листа
        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyId").live("change", function () {
            $("#productionOrderTransportSheetEdit .TransportSheetCurrencyLiteralCode").text($("#productionOrderTransportSheetEdit #TransportSheetCurrencyId option:selected").text());
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateId").val("");
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateName").text("текущий");
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRate").text("---");
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val("");
            ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
            // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
            var currencyId = $("#productionOrderTransportSheetEdit #TransportSheetCurrencyId").val();
            if (currencyId != "" && currencyId != "0") {
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRate").text(result.CurrencyRate);
                        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val(result.CurrencyRateForEdit);
                        ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderTransportSheetEdit");
                    }
                });
            }
        });

        $("#productionOrderTransportSheetEdit #linkChangeCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderTransportSheetEdit #TransportSheetCurrencyId").val();
            if (currencyId != "" && currencyId != "0") {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnTransportSheetEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $('#currencyRateSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderTransportSheetEdit");
                    }
                });
            }
            else {
                StopLinkProgress();
                $("#productionOrderTransportSheetEdit #TransportSheetCurrencyId").ValidationError("Укажите валюту");
            }
        });

        $("#productionOrderTransportSheetEdit #CostInCurrency").live("keyup change paste cut", function () {
            ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
        });

        $("#gridProductionOrderTransportSheet .linkTransportSheetDelete").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderId = $("#Id").val();
                var transportSheetId = $(this).parent("td").parent("tr").find(".Id").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/DeleteProductionOrderTransportSheet/",
                    data: { productionOrderId: productionOrderId, transportSheetId: transportSheetId },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderTransportSheet", function () {
                            ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                            ShowSuccessMessage("Транспортный лист удален.", "messageTransportSheetList");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTransportSheetList");
                    }
                });
            }
        });

        // Операции над листами дополнительных расходов

        $("#gridProductionOrderExtraExpensesSheet #btnCreateExtraExpensesSheet").live("click", function () {
            var productionOrderId = $("#Id").val();
            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderCurrencyDeterminationTypeSelect",
                data: { productionOrderId: productionOrderId, productionOrderCurrencyDocumentType: "2" },
                success: function (result) {
                    $("#productionOrderCurrencyDeterminationTypeSelector").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderCurrencyDeterminationTypeSelector"));
                    ShowModal("productionOrderCurrencyDeterminationTypeSelector");
                    $("#productionOrderCurrencyDeterminationTypeSelector #ProductionOrderCurrencyDeterminationType").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExtraExpensesSheetList");
                }
            });
        });

        $("#gridProductionOrderExtraExpensesSheet .linkExtraExpensesSheetEdit").live("click", function () {
            var productionOrderId = $("#Id").val();
            var extraExpensesSheetId = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/EditProductionOrderExtraExpensesSheet",
                data: { productionOrderId: productionOrderId, extraExpensesSheetId: extraExpensesSheetId },
                success: function (result) {
                    $("#productionOrderExtraExpensesSheetEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderExtraExpensesSheetEdit"));
                    ShowModal("productionOrderExtraExpensesSheetEdit");
                    $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesContractorName").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExtraExpensesSheetList");
                }
            });
        });

        // Сбрасываем курс валюты при смене валюты во время редактирования листа дополнительных расходов
        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId").live("change", function () {
            $("#productionOrderExtraExpensesSheetEdit .ExtraExpensesSheetCurrencyLiteralCode").text($("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId option:selected").text());
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateId").val("");
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateName").text("текущий");
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRate").text("---");
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val("");
            ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
            // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
            var currencyId = $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId").val();
            if (currencyId != "" && currencyId != "0") {
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRate").text(result.CurrencyRate);

                        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val(result.CurrencyRateForEdit);
                        ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderExtraExpensesSheetEdit");
                    }
                });
            }
        });

        $("#productionOrderExtraExpensesSheetEdit #linkChangeCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId").val();
            if (currencyId != "" && currencyId != "0") {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnExtraExpensesSheetEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $('#currencyRateSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderExtraExpensesSheetEdit");
                    }
                });
            }
            else {
                StopLinkProgress();
                $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId").ValidationError("Укажите валюту");
            }
        });

        $("#productionOrderExtraExpensesSheetEdit #CostInCurrency").live("keyup change paste cut", function () {
            ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
        });

        $("#gridProductionOrderExtraExpensesSheet .linkExtraExpensesSheetDelete").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderId = $("#Id").val();
                var extraExpensesSheetId = $(this).parent("td").parent("tr").find(".Id").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/DeleteProductionOrderExtraExpensesSheet/",
                    data: { productionOrderId: productionOrderId, extraExpensesSheetId: extraExpensesSheetId },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderExtraExpensesSheet", function () {
                            ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                            ShowSuccessMessage("Лист дополнительных расходов удален.", "messageExtraExpensesSheetList");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageExtraExpensesSheetList");
                    }
                });
            }
        });

        // Операции над таможенными листами

        $("#gridProductionOrderCustomsDeclaration #btnCreateCustomsDeclaration").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/AddProductionOrderCustomsDeclaration",
                data: { productionOrderId: productionOrderId },
                success: function (result) {
                    $("#productionOrderCustomsDeclarationEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderCustomsDeclarationEdit"));
                    ShowModal("productionOrderCustomsDeclarationEdit");
                    $("#productionOrderCustomsDeclarationEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageCustomsDeclarationList");
                }
            });
        });

        $("#gridProductionOrderCustomsDeclaration .linkCustomsDeclarationEdit").live("click", function () {
            var productionOrderId = $("#Id").val();
            var customsDeclarationId = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/EditProductionOrderCustomsDeclaration",
                data: { productionOrderId: productionOrderId, customsDeclarationId: customsDeclarationId },
                success: function (result) {
                    $("#productionOrderCustomsDeclarationEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderCustomsDeclarationEdit"));
                    ShowModal("productionOrderCustomsDeclarationEdit");
                    $("#productionOrderCustomsDeclarationEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageCustomsDeclarationList");
                }
            });
        });

        $("#gridProductionOrderCustomsDeclaration .linkCustomsDeclarationDelete").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderId = $("#Id").val();
                var customsDeclarationId = $(this).parent("td").parent("tr").find(".Id").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/DeleteProductionOrderCustomsDeclaration/",
                    data: { productionOrderId: productionOrderId, customsDeclarationId: customsDeclarationId },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderCustomsDeclaration", function () {
                            ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                            ShowSuccessMessage("Таможенный лист удален.", "messageCustomsDeclarationList");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageCustomsDeclarationList");
                    }
                });
            }
        });

        // Операции над плановыми оплатами

        $("#productionOrderEditPlannedPayments #btnAddPlannedPayment").live("click", function () {
            var productionOrderId = $("#Id").val();

            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/CreateProductionOrderPlannedPayment",
                data: { productionOrderId: productionOrderId },
                success: function (result) {
                    $("#productionOrderPlannedPaymentEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderPlannedPaymentEdit"));
                    ShowModal("productionOrderPlannedPaymentEdit");
                    $("#productionOrderPlannedPaymentEdit #SumInCurrency").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEditPlannedPayments");
                }
            });
        });

        $("#productionOrderEditPlannedPayments #gridProductionOrderPlannedPayment .linkEditPlannedPayment").live("click", function () {
            var productionOrderPlannedPaymentId = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/EditProductionOrderPlannedPayment",
                data: { productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                success: function (result) {
                    $("#productionOrderPlannedPaymentEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderPlannedPaymentEdit"));
                    ShowModal("productionOrderPlannedPaymentEdit");
                    $("#productionOrderPlannedPaymentEdit #SumInCurrency").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEditPlannedPayments");
                }
            });
        });

        $("#productionOrderEditPlannedPayments #gridProductionOrderPlannedPayment .linkDeletePlannedPayment").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderPlannedPaymentId = $(this).parent("td").parent("tr").find(".Id").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/DeleteProductionOrderPlannedPayment/",
                    data: { productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderPlannedPayment", function () {
                            ShowSuccessMessage("Оплата удалена.", "messageProductionOrderEditPlannedPayments");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEditPlannedPayments");
                    }
                });
            }
        });

        // Сбрасываем курс валюты при смене валюты во время редактирования плановой оплаты и меняем поле с ее названием
        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId").live("change", function () {
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyLiteralCode").text($("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId option:selected").text());
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateId").val("");
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateName").text("текущий");
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateString").text("---");
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateValue").val("");
            // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
            var currencyId = $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId").val();
            if (!IsDefaultOrEmpty(currencyId)) {
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateString").text(result.CurrencyRate);
                        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateValue").val(result.CurrencyRateForEdit);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPlannedPaymentEdit");
                    }
                });
            }
        });

        $("#productionOrderPlannedPaymentEdit #linkChangePlannedPaymentCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId").val();
            if (!IsDefaultOrEmpty(currencyId)) {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnPlannedPaymentEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $('#currencyRateSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPlannedPaymentEdit");
                    }
                });
            }
            else {
                StopLinkProgress();
                $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId").ValidationError("Укажите валюту");
            }
        });

        // Оплаты

        $("#gridProductionOrderPayment #btnCreateProductionOrderPayment").live("click", function () {
            var productionOrderId = $("#Id").val();
            StartButtonProgress($(this));
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderPaymentTypeSelect",
                data: { productionOrderId: productionOrderId },
                success: function (result) {
                    $("#productionOrderPaymentTypeSelector").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderPaymentTypeSelector"));
                    ShowModal("productionOrderPaymentTypeSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentList");
                }
            });
        });

        $("#productionOrderPaymentTypeSelector #linkProduction").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/CreateProductionOrderPayment",
                data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: "1", productionOrderPaymentDocumentId: "00000000-0000-0000-0000-000000000000" },
                success: function (result) {
                    $("#productionOrderPaymentEdit").hide().html(result);
                    HideModal(function () {
                        $.validator.unobtrusive.parse($("#productionOrderPaymentEdit"));
                        ShowModal("productionOrderPaymentEdit");
                        $("#productionOrderPaymentEdit #PaymentDocumentNumber").focus();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentTypeSelect");
                }
            });
        });

        $("#productionOrderPaymentTypeSelector #linkTransportation").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderPaymentDocumentSelect",
                data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: "2" },
                success: function (result) {
                    $("#productionOrderPaymentDocumentSelector").hide().html(result);
                    HideModal(function () {
                        $.validator.unobtrusive.parse($("#productionOrderPaymentDocumentSelector"));
                        ShowModal("productionOrderPaymentDocumentSelector");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentTypeSelect");
                }
            });
        });

        $("#productionOrderPaymentTypeSelector #linkExtraExpenses").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderPaymentDocumentSelect",
                data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: "3" },
                success: function (result) {
                    $("#productionOrderPaymentDocumentSelector").hide().html(result);
                    HideModal(function () {
                        $.validator.unobtrusive.parse($("#productionOrderPaymentDocumentSelector"));
                        ShowModal("productionOrderPaymentDocumentSelector");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentTypeSelect");
                }
            });
        });

        $("#productionOrderPaymentTypeSelector #linkCustoms").live("click", function () {
            var productionOrderId = $("#Id").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ProductionOrderPaymentDocumentSelect",
                data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: "4" },
                success: function (result) {
                    $("#productionOrderPaymentDocumentSelector").hide().html(result);
                    HideModal(function () {
                        $.validator.unobtrusive.parse($("#productionOrderPaymentDocumentSelector"));
                        ShowModal("productionOrderPaymentDocumentSelector");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentTypeSelect");
                }
            });
        });

        $("#productionOrderPaymentDocumentSelector #gridProductionOrderPaymentDocument .linkPaymentDocumentSelect").live("click", function () {
            var productionOrderId = $("#Id").val();
            var productionOrderPaymentTypeId = $("#productionOrderPaymentDocumentSelector #ProductionOrderPaymentTypeId").val();
            var productionOrderPaymentDocumentId = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/CreateProductionOrderPayment",
                data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: productionOrderPaymentTypeId,
                    productionOrderPaymentDocumentId: productionOrderPaymentDocumentId
                },
                success: function (result) {
                    $("#productionOrderPaymentEdit").hide().html(result);
                    HideModal(function () {
                        $.validator.unobtrusive.parse($("#productionOrderPaymentEdit"));
                        ShowModal("productionOrderPaymentEdit");
                        $("#productionOrderPaymentEdit #PaymentDocumentNumber").focus();
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentDocumentSelectList");
                }
            });
        });

        $("#productionOrderPaymentEdit #SumInCurrency").live("keyup change paste cut", function () {
            var sumInCurrency = TryGetDecimal($("#productionOrderPaymentEdit #SumInCurrency").val());
            var currencyRate = TryGetDecimal($("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val());
            var sumInBaseCurrency = (sumInCurrency * currencyRate);

            if (isNaN(sumInBaseCurrency)) {
                $("#productionOrderPaymentEdit #SumInBaseCurrency").text("---");
            } else {
                $("#productionOrderPaymentEdit #SumInBaseCurrency").text(ValueForDisplay(sumInBaseCurrency, 2));
            }
        });

        $("#gridProductionOrderPayment .linkPaymentDelete").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderId = $("#Id").val();
                var paymentId = $(this).parent("td").parent("tr").find(".Id").text();
                var paymentTypeId = $(this).parent("td").parent("tr").find(".PaymentTypeId").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/DeleteProductionOrderPayment/",
                    data: { productionOrderId: productionOrderId, paymentId: paymentId },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderPayment", function () {
                            ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                            ShowSuccessMessage("Оплата удалена.", "messageProductionOrderPaymentList");
                        });

                        ProductionOrder_Details.RefreshPaymentDependentGrids(paymentTypeId, "Оплата удалена.");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentList");
                    }
                });
            }
        });

        $("#gridProductionOrderPayment .linkPaymentDetails").live("click", function () {
            var id = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrderPayment/Details",
                data: { productionOrderPaymentId: id },
                success: function (result) {
                    $('#productionOrderPaymentEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderPaymentEdit"));
                    ShowModal("productionOrderPaymentEdit");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentList");
                }
            });
        });

        $("#productionOrderPaymentEdit #linkChangePaymentCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderPaymentEdit #PaymentCurrencyId").val();
            if (currencyId != "" && currencyId != "0") {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnProductionOrderPaymentEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $('#currencyRateSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentEdit");
                    }
                });
            }
        });


    },

    // Обновить ссылку на куратора. Если параметр определен, то произошло обновление главных деталей, и html-код ссылки тоже пересоздается
    UpdateCuratorLink: function (text) {
        var curatorId = $("#CuratorId").val();
        if (text != undefined) {
            if (curatorId != "") text = '<a id="CuratorLink">' + text + '</a>';
            $("#CuratorName").html(text);
        }

        if (IsTrue($("#AllowToViewCuratorDetails").val())) {
            $("#CuratorName").attr("href", "/User/Details?id=" + curatorId + GetBackUrl());
        }
        else {
            $("#CuratorName").addClass("disabled");
        }
    },

    // Обновить ссылку на собственную организацию. Если параметр определен, то произошло обновление главных деталей, и html-код ссылки тоже пересоздается
    UpdateAccountOrganizationLink: function (text) {
        var accountOrganizationId = $("#AccountOrganizationId").val();
        if (text != undefined) {
            if (accountOrganizationId != "") text = '<a id="AccountOrganizationLink">' + text + '</a>';
            $("#AccountOrganizationName").html(text);
        }
        $("#AccountOrganizationLink").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + GetBackUrl());
    },

    // Обновить ссылку на место хранения. Если параметр определен, то произошло обновление главных деталей, и html-код ссылки тоже пересоздается
    UpdateStorageLink: function (text) {
        if (IsTrue($("#AllowToViewStorageDetails").val())) {
            var storageId = $("#StorageId").val();
            if (text != undefined) {
                if (storageId != "") text = '<a id="StorageLink">' + text + '</a>';
                $("#StorageName").html(text);
            }
            $("#StorageLink").attr("href", "/Storage/Details?id=" + storageId + GetBackUrl());
        }
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из главных деталей
    OnCurrencyRateSelectLinkClick: function (currencyId, currencyRateId) {
        var productionOrderId = $("#Id").val();
        $.ajax({
            type: "POST",
            url: "/ProductionOrder/ChangeCurrencyRate",
            data: { productionOrderId: productionOrderId, currencyId: currencyId, currencyRateId: currencyRateId },
            success: function (result) {
                ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);
                RefreshGrid("gridProductionOrderPayment", function () {
                    HideModal(function () {
                        ProductionOrder_Details.RefreshBatchGrid("messageBatchList");
                    });
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyRateSelectList");
            }
        });
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора собственных организаций (при создании контракта)
    OnAccountOrganizationSelectLinkClick: function (accountOrganizationId, accountOrganizationShortName) {
        $("#producerContractEdit #AccountOrganizationId").val(accountOrganizationId).ValidationValid();
        $("#producerContractEdit #AccountOrganizationName").text(accountOrganizationShortName);
        HideModal();
    },

    OnSuccessContractEdit: function (result) {
        ProductionOrder_Details.RefreshMainDetailsAndPermissions(result);

        if ($("#producerContractEdit #Id").val() != "0") {
            ShowSuccessMessage("Сохранено.", "messageProductionOrderEdit");
        }
        else {
            ShowSuccessMessage("Контракт создан.", "messageProductionOrderEdit");
        }
        HideModal();
    },

    OnBeginProductionOrderSave: function () {
        StartButtonProgress($("#btnSave"));
    },

    OnSuccessProductionOrderCurrencyDeterminationTypeSelect: function (ajaxContext) {
        var productionOrderCurrencyDocumentType = $("#productionOrderCurrencyDeterminationTypeSelector #ProductionOrderCurrencyDocumentType").val();
        if (productionOrderCurrencyDocumentType == "1") {
            // Транспортный лист
            $("#productionOrderTransportSheetEdit").hide().html(ajaxContext);
            HideModal(function () {
                $.validator.unobtrusive.parse($("#productionOrderTransportSheetEdit"));
                ShowModal("productionOrderTransportSheetEdit");
                $("#productionOrderTransportSheetEdit #ForwarderName").focus();
            });
        } else if (productionOrderCurrencyDocumentType == "2") {
            // Лист дополнительных расходов
            $("#productionOrderExtraExpensesSheetEdit").hide().html(ajaxContext);
            HideModal(function () {
                $.validator.unobtrusive.parse($("#productionOrderExtraExpensesSheetEdit"));
                ShowModal("productionOrderExtraExpensesSheetEdit");
                $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesContractorName").focus();
            });
        }
    },

    OnFailProductionOrderCurrencyDeterminationTypeSelect: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderCurrencyDeterminationTypeSelect");
    },

    OnBeginProductionOrderCurrencyDeterminationTypeSelect: function () {
        StartButtonProgress($("#btnProductionOrderCurrencyDeterminationTypeSelect"));
    },

    // Работа с транспортными листами

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования транспортного листа
    OnTransportSheetEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateId").val(currencyRateId);
        if (currencyRateId != "") { // конкретный курс
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateName").text("на " + currencyRateStartDate);
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRate").text(currencyRate);
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val(currencyRateForEdit);
            ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
            HideModal();
        } else { // текущий курс
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateName").text("текущий");
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRate").text("---");
            $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val("");
            ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
            HideModal(function () {
                // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
                var currencyId = $("#productionOrderTransportSheetEdit #TransportSheetCurrencyId").val();
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRate").text(result.CurrencyRate);
                        $("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val(result.CurrencyRateForEdit);
                        ProductionOrder_Details.RecalculateTransportSheetCostInBaseCurrency();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderTransportSheetEdit");
                    }
                });
            });
        }
    },

    OnSuccessProductionOrderTransportSheetEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderTransportSheet", function () {
            ProductionOrder_Details.RefreshMainDetailsAndPermissions(ajaxContext);
            if ($("#productionOrderTransportSheetEdit #TransportSheetId").val() != "00000000-0000-0000-0000-000000000000") {
                RefreshGrid("gridProductionOrderPayment", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageTransportSheetList");
                    });
                });
            }
            else {
                HideModal(function () {
                    ShowSuccessMessage("Транспортный лист создан.", "messageTransportSheetList");
                });
            }
        });
    },

    OnFailProductionOrderTransportSheetEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderTransportSheetEdit");
    },

    RecalculateTransportSheetCostInBaseCurrency: function () {
        var costInCurrency = TryGetDecimal($("#productionOrderTransportSheetEdit #CostInCurrency").val());
        var currencyRate = TryGetDecimal($("#productionOrderTransportSheetEdit #TransportSheetCurrencyRateForEdit").val());
        var costInBaseCurrency = (costInCurrency * currencyRate);

        if (isNaN(costInBaseCurrency)) {
            $("#productionOrderTransportSheetEdit #CostInBaseCurrency").text("---");
        } else {
            $("#productionOrderTransportSheetEdit #CostInBaseCurrency").text(ValueForDisplay(costInBaseCurrency, 2));
        }
    },

    // Работа с листами дополнительных расходов

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования листа дополнительных расходов
    OnExtraExpensesSheetEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateId").val(currencyRateId);
        if (currencyRateId != "") { // конкретный курс
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateName").text("на " + currencyRateStartDate);
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRate").text(currencyRate);
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val(currencyRateForEdit);
            ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
            HideModal();
        } else { // текущий курс
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateName").text("текущий");
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRate").text("---");
            $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val("");
            ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
            HideModal(function () {
                // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
                var currencyId = $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyId").val();
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRate").text(result.CurrencyRate);
                        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val(result.CurrencyRateForEdit);
                        ProductionOrder_Details.RecalculateExtraExpensesSheetCostInBaseCurrency();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderExtraExpensesSheetEdit");
                    }
                });
            });
        }
    },

    OnSuccessProductionOrderExtraExpensesSheetEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderExtraExpensesSheet", function () {
            ProductionOrder_Details.RefreshMainDetailsAndPermissions(ajaxContext);
            if ($("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetId").val() != "00000000-0000-0000-0000-000000000000") {
                RefreshGrid("gridProductionOrderPayment", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageExtraExpensesSheetList");
                    });
                });
            }
            else {
                HideModal(function () {
                    ShowSuccessMessage("Лист дополнительных расходов создан.", "messageExtraExpensesSheetList");
                });
            }
        });
    },

    OnFailProductionOrderExtraExpensesSheetEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderExtraExpensesSheetEdit");
    },

    OnBeginProductionOrderExtraExpensesSheetEdit: function () {
        StartButtonProgress($("#btnProductionOrderExtraExpensesSheetEdit"));
    },

    OnBeginProductionOrderCustomsDeclarationEdit: function () {
        StartButtonProgress($("#btnProductionOrderCustomsDeclarationSave"));
    },

    RecalculateExtraExpensesSheetCostInBaseCurrency: function () {
        var costInCurrency = TryGetDecimal($("#productionOrderExtraExpensesSheetEdit #CostInCurrency").val());
        var currencyRate = TryGetDecimal($("#productionOrderExtraExpensesSheetEdit #ExtraExpensesSheetCurrencyRateForEdit").val());
        var costInBaseCurrency = (costInCurrency * currencyRate);

        if (isNaN(costInBaseCurrency)) {
            $("#productionOrderExtraExpensesSheetEdit #CostInBaseCurrency").text("---");
        } else {
            $("#productionOrderExtraExpensesSheetEdit #CostInBaseCurrency").text(ValueForDisplay(costInBaseCurrency, 2));
        }
    },

    // Работа с таможенными листами

    OnSuccessProductionOrderCustomsDeclarationEdit: function (ajaxContext) {
        ProductionOrder_Details.RefreshMainDetailsAndPermissions(ajaxContext);
        RefreshGrid("gridProductionOrderCustomsDeclaration", function () {
            if ($("#productionOrderCustomsDeclarationEdit #CustomsDeclarationId").val() != "00000000-0000-0000-0000-000000000000") {
                RefreshGrid("gridProductionOrderPayment", function () {
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageCustomsDeclarationList");
                    });
                });
            }
            else {
                HideModal(function () {
                    ShowSuccessMessage("Таможенный лист создан.", "messageCustomsDeclarationList");
                });
            }
        });
    },

    OnFailProductionOrderCustomsDeclarationEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderCustomsDeclarationEdit");
    },

    // Плановые оплаты

    OnBeginProductionOrderPlannedPaymentEdit: function (ajaxContext) {
        StartButtonProgress($("#btnSaveProductionOrderPlannedPayment"));
    },

    OnSuccessProductionOrderPlannedPaymentEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderPlannedPayment", function () {
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderEditPlannedPayments");
            });
        });
    },

    OnFailProductionOrderPlannedPaymentEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderPlannedPaymentEdit");
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования плановой оплаты
    OnPlannedPaymentEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateId").val(currencyRateId);
        if (!IsDefaultOrEmpty(currencyRateId)) { // конкретный курс
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateName").text("на " + currencyRateStartDate);
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateString").text(currencyRate);
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateValue").val(currencyRateForEdit);
            HideModal();
        } else { // текущий курс
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateName").text("текущий");
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateString").text("---");
            $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateValue").val("");
            HideModal(function () {
                // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
                var currencyId = $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyId").val();
                $.ajax({
                    type: "GET",
                    url: "/Currency/GetCurrentCurrencyRate",
                    data: { currencyId: currencyId },
                    success: function (result) {
                        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateString").text(result.CurrencyRate);
                        $("#productionOrderPlannedPaymentEdit #PlannedPaymentCurrencyRateValue").val(result.CurrencyRateForEdit);
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPlannedPaymentEdit");
                    }
                });
            });
        }
    },

    // Оплаты

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования оплаты
    OnProductionOrderPaymentEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        var paymentId = $("#productionOrderPaymentEdit #ProductionOrderPaymentId").val();
        if (IsDefaultOrEmpty(paymentId)) {
            $("#productionOrderPaymentEdit #PaymentCurrencyRateId").val(currencyRateId);
            if (currencyRateId != "") { // конкретный курс
                $("#productionOrderPaymentEdit #PaymentCurrencyRateName").text("на " + currencyRateStartDate);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text(currencyRate);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val(currencyRateForEdit);
                ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();
                HideModal();
            } else { // текущий курс
                $("#productionOrderPaymentEdit #PaymentCurrencyRateName").text("текущий");
                $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text("---");
                $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val("");
                ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();
                HideModal(function () {
                    // Шлем запрос на получение текущего курса выбранной на модальной форме валюты
                    var currencyId = $("#productionOrderPaymentEdit #PaymentCurrencyId").val();
                    $.ajax({
                        type: "GET",
                        url: "/Currency/GetCurrentCurrencyRate",
                        data: { currencyId: currencyId },
                        success: function (result) {
                            $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text(result.CurrencyRate);
                            $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val(result.CurrencyRateForEdit);
                            ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentEdit");
                        }
                    });
                });
            }
        } else {
            ProductionOrder_Details.ChangeProductionOrderPaymentCurrencyRate(paymentId, currencyRateId);
        }
    },

    ChangeProductionOrderPaymentCurrencyRate: function (productionOrderPaymentId, currencyRateId) {
        $.ajax({
            type: "POST",
            url: "/ProductionOrderPayment/ChangeProductionOrderPaymentCurrencyRate",
            data: { productionOrderPaymentId: productionOrderPaymentId, currencyRateId: currencyRateId },
            success: function (result) {
                // Обновление модальной формы
                $("#productionOrderPaymentEdit #PaymentCurrencyRateId").val(productionOrderPaymentId);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateName").text(result.PaymentCurrencyRateName);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text(result.PaymentCurrencyRateString);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val(result.PaymentCurrencyRateValue);
                ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();

                // Обновление главных деталей заказа
                $("#main_page #PaymentSumInCurrency").text(result.PaymentSumInCurrency);
                $("#main_page #PaymentSumInCurrencyValue").val(result.PaymentSumInCurrencyValue);
                $("#main_page #PaymentSumInBaseCurrency").text(result.PaymentSumInBaseCurrency);
                $("#main_page #PaymentSumInBaseCurrencyValue").val(result.PaymentSumInBaseCurrencyValue);
                $("#main_page #PaymentPercent").text(result.PaymentPercent);
                ProductionOrder_Details.RefreshColorOfSumIndicators();

                RefreshGrid("gridProductionOrderPayment", function () {

                    var productionOrderPlannedPaymentId = $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentId").val();
                    // Если плановый платеж указан, то ...
                    if (productionOrderPlannedPaymentId.length > 0) {
                        // ... запрашиваем детали плановой оплаты
                        $.ajax({
                            type: "POST",
                            url: "/ProductionOrder/GetPlannedPaymentInfo",
                            data: { productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                            success: function (result) {
                                // Обновление полей
                                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentSumInCurrency").text(result.PlannedPaymentSumInCurrency);
                                $("#productionOrderPaymentEdit .ProductionOrderPlannedPaymentCurrencyLiteralCode").text(result.PlannedPaymentCurrencyLiteralCode);
                                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentPaidSumInBaseCurrency").text(result.PaymentSumInBaseCurrency);
                                HideModal(function () {
                                    ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                                });
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
                            }
                        });
                    } else {    // иначе закрываем МФ
                        HideModal(function () {
                            ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                        });
                    }

                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
            }
        });
    },

    RefreshPaymentDependentGrids: function (paymentTypeId, message) {
        switch (paymentTypeId) {
            case "1":
                ShowSuccessMessage(message, "messageProductionOrderPaymentList");
                break;
            case "2":
                RefreshGrid("gridProductionOrderTransportSheet", function () {
                    ShowSuccessMessage(message, "messageProductionOrderPaymentList");
                });
                break;
            case "3":
                RefreshGrid("gridProductionOrderExtraExpensesSheet", function () {
                    ShowSuccessMessage(message, "messageProductionOrderPaymentList");
                });
                break;
            case "4":
                RefreshGrid("gridProductionOrderCustomsDeclaration", function () {
                    ShowSuccessMessage(message, "messageProductionOrderPaymentList");
                });
                break;
            default:
                ShowErrorMessage("Неизвестное назначение оплаты.", "messageProductionOrderPaymentList");
        };
    },

    OnSuccessProductionOrderPaymentEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderPayment", function () {
            ProductionOrder_Details.RefreshMainDetailsAndPermissions(ajaxContext);
            HideModal(function () {
                // Освежаем один из трех гридов, в которых может измениться процент оплаты
                var productionOrderPaymentTypeId = $("#main_page #ProductionOrderPaymentTypeId").val();
                ProductionOrder_Details.RefreshPaymentDependentGrids(productionOrderPaymentTypeId, "Оплата добавлена.");
            });
        });
    },

    OnFailProductionOrderPaymentEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderPaymentEdit");
    },

    OnBeginProductionOrderPaymentEdit: function () {
        StartButtonProgress($("#btnSaveProductionOrderPayment"));
    },

    ShowConfirmCloseOrder: function () {
        ShowConfirm("Закрыть заказ?", "При закрытии заказа будет рассчитана себестоимость товара.", "Закрыть заказ",
                "Отмена",
                function () {
                    var productionOrderId = $("#Id").val();
                    $.ajax({
                        type: "GET",
                        url: "/ProductionOrder/Close",
                        data: { productionOrderId: productionOrderId },
                        success: function (result) {
                            window.location = window.location;
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageConfirmError");
                        }
                    });
                });
    },

    // Вызывается также из деталей производителя, а также из страницы списка оплат по заказам. Можно вынести в Shared или в POPayment
    RecalculateProductionOrderPaymentSumInBaseCurrency: function () {
        var sumInCurrency = TryGetDecimal($("#productionOrderPaymentEdit #SumInCurrency").val().replaceAll(' ', ''));
        var currencyRate = TryGetDecimal($("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val());
        var sumInBaseCurrency = sumInCurrency * currencyRate;

        if (isNaN(sumInBaseCurrency)) {
            $("#productionOrderPaymentEdit #SumInBaseCurrency").text("---");
        } else {
            $("#productionOrderPaymentEdit #SumInBaseCurrency").text(ValueForDisplay(sumInBaseCurrency, 2));
        }
    },

    // ===============================

    RefreshMainDetailsAndPermissions: function (result) {
        ProductionOrder_Details.RefreshMainDetails(result.MainDetails);
        ProductionOrder_Details.RefreshPermissions(result.MainDetails);
    },

    RefreshMainDetails: function (details) {
        $(".page_title_item_name").text(details.Name);
        $("#main_page #Name").text(details.Name);
        $("#main_page #ProducerName").text(details.ProducerName);
        $("#main_page #CurrentStageName").text(details.CurrentStageName);
        $("#main_page #CurrentStageActualStartDate").text(details.CurrentStageActualStartDate);
        $("#main_page #CurrentStageDaysPassed").text(details.CurrentStageDaysPassed);
        $("#main_page #CurrentStageExpectedEndDate").text(details.CurrentStageExpectedEndDate);
        $("#main_page #CurrentStageDaysLeft").text(details.CurrentStageDaysLeft);
        $("#main_page #State").text(details.State);
        $("#main_page #MinOrderBatchStageName").text(details.MinOrderBatchStageName);
        $("#main_page #MaxOrderBatchStageName").text(details.MaxOrderBatchStageName);
        $("#main_page #ContractName").text(details.ContractName);
        $("#main_page #CurrencyLiteralCode").text(details.CurrencyLiteralCode);
        $("#main_page #CurrencyRateName").text(details.CurrencyRateName);
        $("#main_page #CurrencyRate").text(details.CurrencyRate);
        $("#main_page #Date").text(details.Date);
        $("#main_page #DeliveryPendingDate").text(details.DeliveryPendingDate);
        $("#main_page #DivergenceFromPlan").text(details.DivergenceFromPlan);
        $("#main_page #PlannedExpensesSumInCurrency").text(details.PlannedExpensesSumInCurrency);
        $("#main_page #PlannedExpensesSumInCurrencyValue").val(details.PlannedExpensesSumInCurrencyValue);
        $("#main_page #PlannedExpensesSumInBaseCurrency").text(details.PlannedExpensesSumInBaseCurrency);
        $("#main_page #PlannedExpensesSumInBaseCurrencyValue").val(details.PlannedExpensesSumInBaseCurrencyValue);
        $("#main_page #ActualCostSumInCurrency").text(details.ActualCostSumInCurrency);
        $("#main_page #ActualCostSumInCurrencyValue").val(details.ActualCostSumInCurrencyValue);
        $("#main_page #ActualCostSumInBaseCurrency").text(details.ActualCostSumInBaseCurrency);
        $("#main_page #ActualCostSumInBaseCurrencyValue").val(details.ActualCostSumInBaseCurrencyValue);
        $("#main_page #PaymentSumInCurrency").text(details.PaymentSumInCurrency);
        $("#main_page #PaymentSumInCurrencyValue").val(details.PaymentSumInCurrencyValue);
        $("#main_page #PaymentSumInBaseCurrency").text(details.PaymentSumInBaseCurrency);
        $("#main_page #PaymentSumInBaseCurrencyValue").val(details.PaymentSumInBaseCurrencyValue);
        $("#main_page #PaymentPercent").text(details.PaymentPercent);
        $("#main_page #AccountingPriceSum").text(details.AccountingPriceSum);
        $("#main_page #MarkupPendingSum").text(details.MarkupPendingSum);
        $("#main_page #ArticleTransportingPrimeCostCalculationType").text(details.ArticleTransportingPrimeCostCalculationType);
        $("#main_page #Comment").html(details.Comment);

        $("#main_page #AllowToViewStageList").val(details.AllowToViewStageList);

        $("#main_page #CurrencyId").val(details.CurrencyId);
        $("#main_page #CurrencyRateId").val(details.CurrencyRateId);

        $("#main_page #CuratorId").val(details.CuratorId);
        ProductionOrder_Details.UpdateCuratorLink(details.CuratorName);
        $("#main_page #AccountOrganizationId").val(details.AccountOrganizationId);
        ProductionOrder_Details.UpdateAccountOrganizationLink(details.AccountOrganizationName);
        $("#main_page #StorageId").val(details.StorageId);
        ProductionOrder_Details.UpdateStorageLink(details.StorageName);

        ProductionOrder_Details.RefreshColorOfSumIndicators();

        var showExecutionGraph = IsTrue($("#AllowToViewStageList").val());
        UpdateElementVisibility("executionGraph", showExecutionGraph);
    },

    RefreshColorOfSumIndicators: function () {
        //Расчитываем условие окраски фактических затрат
        var actualCostSumInBaseCurrency = TryGetDecimal($("#ActualCostSumInBaseCurrencyValue").val());
        var plannedExpensesSumInBaseCurrency = TryGetDecimal($("#PlannedExpensesSumInBaseCurrencyValue").val());
        var cond1 = actualCostSumInBaseCurrency > plannedExpensesSumInBaseCurrency;

        //Расчитываем условие окраски оплат
        var actualCostSumInCurrency = TryGetDecimal($("#ActualCostSumInCurrencyValue").val());
        var paymentSumInCurrency = TryGetDecimal($("#PaymentSumInCurrencyValue").val());
        var paymentSumInBaseCurrency = TryGetDecimal($("#PaymentSumInBaseCurrencyValue").val());
        var cond2 = actualCostSumInBaseCurrency * paymentSumInCurrency / actualCostSumInCurrency < paymentSumInBaseCurrency;

        if (cond1) {
            $("#ActualCostSumInCurrency").addClass("orangetext").removeClass("greentext");
            $("#ActualCostSumInBaseCurrency").addClass("orangetext").removeClass("greentext");
        }
        else {
            $("#ActualCostSumInCurrency").addClass("greentext").removeClass("orangetext");
            $("#ActualCostSumInBaseCurrency").addClass("greentext").removeClass("orangetext");
        }

        if (cond2) {
            $("#PaymentSumInCurrency").addClass("orangetext").removeClass("greentext");
            $("#PaymentSumInBaseCurrency").addClass("orangetext").removeClass("greentext");
        }
        else {
            $("#PaymentSumInCurrency").addClass("greentext").removeClass("orangetext");
            $("#PaymentSumInBaseCurrency").addClass("greentext").removeClass("orangetext");
        }
    },

    RefreshPermissions: function (permissions) {
        UpdateButtonCaption("btnEditStages", IsTrue(permissions.AllowToEditStages) ? "Задать этапы" : "Этапы заказа");
        UpdateButtonAvailability("btnEditStages", permissions.AllowToViewStageList);
        UpdateElementVisibility("btnEditStages", permissions.AllowToViewStageList);
        UpdateButtonAvailability("btnEditPlannedPayments", permissions.AllowToViewPlannedPayments);
        UpdateElementVisibility("btnEditPlannedPayments", permissions.AllowToViewPlannedPayments);
        UpdateButtonAvailability("btnEdit", permissions.AllowToEdit);
        UpdateElementVisibility("btnEdit", permissions.AllowToEdit);

        UpdateElementVisibility("linkChangeCurator", permissions.AllowToChangeCurator);
        UpdateElementVisibility("linkChangeStage", permissions.AllowToChangeBatchStage);
        UpdateElementVisibility("linkCreateContract", permissions.AllowToCreateContract);
        UpdateElementVisibility("linkEditContract", permissions.AllowToEditContract);
        UpdateLinkCaption("linkPlannedExpensesSumDetails", IsTrue(permissions.AllowToEditPlannedExpenses) ? "[&nbsp;Ред.&nbsp;]" : "[&nbsp;Дет.&nbsp;]");
        UpdateElementVisibility("linkPlannedExpensesSumDetails", permissions.AllowToViewPlannedExpenses);
    },

    OnSuccessPlannedExpensesEdit: function (ajaxContext) {
        HideModal(function () {
            $("#PlannedExpensesSumInCurrency").text(ajaxContext.PlannedExpensesSumInCurrency);
            $("#PlannedExpensesSumInCurrencyValue").val(ajaxContext.PlannedExpensesSumInCurrencyValue);
            $("#PlannedExpensesSumInBaseCurrency").text(ajaxContext.PlannedExpensesSumInBaseCurrency);
            $("#PlannedExpensesSumInBaseCurrencyValue").val(ajaxContext.PlannedExpensesSumInBaseCurrencyValue);

            ProductionOrder_Details.RefreshColorOfSumIndicators();
        });
    },

    RefreshBatchGrid: function (messageId, onSuccessFunction) {
        var productionOrderId = $("#main_page #Id").val();
        $.ajax({
            type: "POST",
            url: "/ProductionOrder/ShowProductionOrderBatchGrid/",
            data: { id: productionOrderId },
            success: function (result) {
                $("#gridProductionOrderBatch").html(result);
                if (onSuccessFunction != undefined)
                // Вызываем переданный метод
                    onSuccessFunction();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, messageId);
            }
        });
    },

    RefreshExecutionGraph: function (onSuccessFunction) {
        var showExecutionGraph = IsTrue($("#AllowToViewStageList").val());
        if (showExecutionGraph) {
            var productionOrderBatchId = $("#SingleProductionOrderBatchId").val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ShowOrderExecutionGraph/",
                data: { id: productionOrderBatchId },
                success: function (result) {
                    drawExecutionGraph("graph-" + productionOrderBatchId, result);

                    if (onSuccessFunction != undefined)
                    // Вызываем переданный метод
                        onSuccessFunction();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExecutionGraph");
                }
            });
        }
        else {
            if (onSuccessFunction != undefined)
            // Вызываем переданный метод
                onSuccessFunction();
        }
    }

};﻿var ProductionOrder_Details_ProductionOrderBatchGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridProductionOrderBatch table.production_order_batch tr").each(function () {
                var id = $(this).find(".Id").val();
                $(this).find("a.linkDetails").attr("href", "/ProductionOrder/ProductionOrderBatchDetails?id=" + id + GetBackUrl());

                var receiptWaybillId = $(this).find(".ReceiptWaybillId").val();
                if (receiptWaybillId != "" && receiptWaybillId != "00000000-0000-0000-0000-000000000000") {
                    $(this).find("a.ReceiptWaybillName").attr("href", "/ReceiptWaybill/Details?id=" + receiptWaybillId + GetBackUrl());
                }
            });

            //Вызвать модальное окно создания партии
            $("#btnCreateNewOrderBatch").click(function () {
                var productionOrderId = $("#Id").val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/AddProductionOrderBatch",
                    data: { productionOrderId: productionOrderId },

                    success: function (result) {
                        $("#productionOrderAddBatch").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderAddBatch"));
                        ShowModal("productionOrderAddBatch");
                    },

                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAddProductionOrderBatch");
                    }
                });
            });


        });

    }

};﻿var ProductionOrder_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();

            $("#btnSave").click(function () {
                if (!ProductionOrder_Edit.IsWorkDay("MondayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("TuesdayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("WednesdayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("ThursdayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("FridayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("SaturdayIsWorkDay") &&
                    !ProductionOrder_Edit.IsWorkDay("SundayIsWorkDay")) {
                    ShowErrorMessage("График рабочих дней должен содержать хотя бы один рабочий день.", "messageProductionOrderEdit");
                    return false;
                }
            });
        });

        $("#btnBack").live("click", function () {
            window.location = $('#BackUrl').val();
        });

        $("#SystemStagePlannedDuration").live("keyup change paste cut", function () {
            var duration = Number($("#SystemStagePlannedDuration").val());
            if (isNaN(+duration)) return false;

            var startDate = stringToDate($("#Date").val());
            if (!isValidDate(startDate)) return false;

            startDate.setDate(startDate.getDate() + duration);

            $("#SystemStagePlannedEndDate").val(dateToString(startDate));
        });

        $("#SystemStagePlannedEndDate").live("keyup change paste cut", function () {

            var startDate = stringToDate($("#Date").val());
            var endDate = stringToDate($("#SystemStagePlannedEndDate").val());
            if (!isValidDate(endDate)) return false;

            $("#SystemStagePlannedDuration").val(Math.ceil((endDate - startDate) / (1000 * 60 * 60 * 24)));
        });

        $("#ProducerName").live("click", function () {
            if (IsTrue($("#AllowToChangeProducer").val())) {
                $.ajax({
                    type: "GET",
                    url: "/Producer/SelectProducer",
                    success: function (result) {
                        $("#producerSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#producerSelector"));
                        ShowModal("producerSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderEdit");
                    }
                });
            }
        });
    },

    OnSuccessProductionOrderEdit: function (ajaxContext) {
        if ($("#Id").val() == "00000000-0000-0000-0000-000000000000" || $("#BackUrl").val() == "") {
            window.location = "/ProductionOrder/Details?id=" + ajaxContext + GetBackUrlFromString($('#BackUrl').val());
        } else {
            window.location = $("#BackUrl").val();
        }
    },

    OnBeginProductionOrderSave: function () {
        StartButtonProgress($("#btnSave"));
    },

    OnFailProductionOrderEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderEdit");
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора производителя
    OnProducerSelectLinkClick: function (producerId, producerName) {
        $("#ProducerId").val(producerId);
        $("#ProducerId").ValidationValid();
        $("#ProducerName").text(producerName);
        HideModal();
    },

    // Читаем значение, является ли день рабочим днем, из CheckBox или Hidden (смотря какой контрол имеет нужный id)
    // Если CheckBox disabled, id достается Hidden, а CheckBox без Id. Если CheckBox enabled, id есть у CheckBox, а hidden MVC делает без Id
    IsWorkDay: function (controlId) {
        if ($('#' + controlId + '[type=checkbox]').length != 0) {
            return $('#' + controlId + '[type=checkbox]').attr("checked");
        } else if ($('#' + controlId + '[type=hidden]').length != 0) {
            return IsTrue($('#' + controlId + '[type=hidden]').val())
        } else {
            return false;
        }
    }
};﻿var ProductionOrder_List_ActiveProductionOrderGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridActiveProductionOrder table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());
                var producerId = $(this).find(".ProducerId").text();
                $(this).find("a.ProducerName").attr("href", "/Producer/Details?id=" + producerId + GetBackUrl());
            });
        });
    }
};﻿var ProductionOrder_List_ClosedProductionOrderGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridClosedProductionOrder table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());
                var producerId = $(this).find(".ProducerId").text();
                $(this).find("a.ProducerName").attr("href", "/Producer/Details?id=" + producerId + GetBackUrl());
            });
        });
    }
};﻿var ProductionOrder_List = {
    Init: function () {
        $(document).ready(function () {
            
            $("#btnCreateProductionOrder").click(function () {
                window.location = "/ProductionOrder/Create?" + GetBackUrl(true);
            });
        });
    }
};﻿var ProductionOrder_ProducerContractEdit = {
    Init: function () {
        $(document).ready(function () {
            // Вывод модальной формы "Добавление собственной организации"
            $("#linkAccountOrganizationSelector").click(function () {
                if (IsTrue($("#producerContractEdit #AllowToChangeAccountOrganization").val())) {
                    var storageId = $("#main_page #StorageId").val();
                    $.ajax({
                        type: "GET",
                        url: "/AccountOrganization/SelectAccountOrganizationForStorage",
                        data: { storageId: storageId },
                        success: function (result) {
                            $("#accountOrganizationSelector").hide().html(result);
                            $.validator.unobtrusive.parse($("#accountOrganizationSelector"));
                            ShowModal("accountOrganizationSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProducerContractEdit");
                        }
                    });
                }
            });

        });
    },

    OnFailContractEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProducerContractEdit");
    }

};﻿var ProductionOrder_ProductionOrderBatchAdd = {
    OnBeginProductionOrderBatchSave: function () {
        StartButtonProgress($("#btnProductionOrderAddBatch"));
    },

    OnFailProductionOrderBatchSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageModalWindowAddBatch");
    },

    OnSuccessProductionOrderBatchSave: function (result) {
        if ($("#productionOrderAddBatch #Id").val() == "00000000-0000-0000-0000-000000000000") {
            window.location = "/ProductionOrder/ProductionOrderBatchDetails?id=" + result + GetBackUrl();
        } 
        else {
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/GetProductionOrderBatchName",
                data: { productionOrderBatchId: result },
                success: function (name) {
                    $(".page_title_item_name").text(name);
                    ShowSuccessMessage("Партия переименована.", "messageProductionOrderBatchEdit");
                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageModalWindowAddBatch");
                }
            });
        }
    }



};﻿var ProductionOrder_ProductionOrderBatchDetails = {
    Init: function () {
        $(document).ready(function () {
            var graphData = $('#graphData').text();
            ProductionOrder_ProductionOrderBatchDetails.DrawExecutionGraph(graphData);

            // Возврат на прежнюю страницу
            $("#btnBack").click(function () {
                window.location = $("#BackUrl").val();
            });

            // Формируем ссылки
            ProductionOrder_ProductionOrderBatchDetails.UpdateCuratorLink();

            var productionOrderId = $("#ProductionOrderId").val();
            $("#ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + GetBackUrl());

            var producerId = $("#ProducerId").val();
            $("#ProducerName").attr("href", "/Producer/Details?id=" + producerId + GetBackUrl());

            var receiptWaybillId = $("#ReceiptWaybillId").val();
            if (!IsDefaultOrEmpty(receiptWaybillId)) {
                $("#ReceiptWaybillName").attr("href", "/ReceiptWaybill/Details?id=" + receiptWaybillId + GetBackUrl());
            }

            $("#linkCreateReceiptWaybill").click(function () {
                var productionOrderBatchId = $('#Id').val();

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/CheckPossibilityToCreateReceiptWaybill",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        window.location = "/ReceiptWaybill/Create?productionOrderBatchId=" + productionOrderBatchId + GetBackUrl();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#linkDeleteReceiptWaybill").click(function () {
                if (confirm("Вы уверены?")) {
                    var waybill_id = $("#ReceiptWaybillId").val();

                    StartLinkProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/Delete/",
                        data: { id: waybill_id, returnProductionOrderBatchDetails: "1" },
                        success: function (result) {
                            StopLinkProgress();
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Накладная удалена.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnProductionOrderClose").click(function () {
                StartButtonProgress($(this));
                var productionOrderId = $("#ProductionOrderId").val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/Close",
                    data: { productionOrderId: productionOrderId },
                    success: function (result) {
                        window.location = "/ProductionOrder/Details?id=" + productionOrderId;
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageModalCloseOrder");
                    }
                });
            });

            $("#btnSplitBatch").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/CheckPossibilityToSplitBatch",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        var productionOrderBatchId = $('#Id').val();
                        window.location = "/ProductionOrder/SplitBatch?productionOrderBatchId=" + productionOrderBatchId + GetBackUrl();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnAccept").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/Accept",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        RefreshGrid("gridProductionOrderBatchRow", function () {
                            ShowSuccessMessage("Проведено.", "messageProductionOrderBatchEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelAcceptance").click(function () {
                if (confirm("Вы уверены?")) {
                    var productionOrderBatchId = $('#Id').val();
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelAcceptance",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            RefreshGrid("gridProductionOrderBatchRow", function () {
                                ShowSuccessMessage("Проводка отменена.", "messageProductionOrderBatchEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApprove").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/Approve",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Готово.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovement").click(function () {
                if (confirm("Вы уверены?")) {
                    var productionOrderBatchId = $('#Id').val();
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovement",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Готовность отменена.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApproveByLineManager").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/ApproveByLineManager",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Утверждено.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovementByLineManager").click(function () {
                if (confirm("Вы уверены?")) {
                    var productionOrderBatchId = $('#Id').val();
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovementByLineManager",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Утверждение отменено.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApproveByFinancialDepartment").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/ApproveByFinancialDepartment",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Утверждено.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovementByFinancialDepartment").click(function () {
                if (confirm("Вы уверены?")) {
                    StartButtonProgress($(this));
                    var productionOrderBatchId = $('#Id').val();
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovementByFinancialDepartment",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Утверждение отменено.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApproveBySalesDepartment").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/ApproveBySalesDepartment",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Утверждено.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovementBySalesDepartment").click(function () {
                if (confirm("Вы уверены?")) {
                    StartButtonProgress($(this));
                    var productionOrderBatchId = $('#Id').val();
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovementBySalesDepartment",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Утверждение отменено.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApproveByAnalyticalDepartment").click(function () {
                var productionOrderBatchId = $('#Id').val();
                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/ApproveByAnalyticalDepartment",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Утверждено.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovementByAnalyticalDepartment").click(function () {
                if (confirm("Вы уверены?")) {
                    StartButtonProgress($(this));
                    var productionOrderBatchId = $('#Id').val();
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovementByAnalyticalDepartment",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Утверждение отменено.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnApproveByProjectManager").click(function () {
                StartButtonProgress($(this));
                var productionOrderBatchId = $('#Id').val();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/ApproveByProjectManager",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                        ShowSuccessMessage("Утверждено.", "messageProductionOrderBatchEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnCancelApprovementByProjectManager").click(function () {
                if (confirm("Вы уверены?")) {
                    StartButtonProgress($(this));
                    var productionOrderBatchId = $('#Id').val();
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/CancelApprovementByProjectManager",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            ShowSuccessMessage("Утверждение отменено.", "messageProductionOrderBatchEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnEditStages").click(function () {
                var productionOrderBatchId = $("#Id").val();
                StartButtonProgress($(this));

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditStages",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        $("#productionOrderBatchEditStages").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchEditStages"));
                        ShowModal("productionOrderBatchEditStages");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            $("#btnDeleteBatch").click(function () {
                var productionOrderBatchId = $('#Id').val();
                if (confirm("Вы уверены?")) {
                    $.ajax({
                        type: "GET",
                        url: "/ProductionOrder/DeleteProductionOrderBatch",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function () {
                            //Переходим на детали заказа
                            window.location = $(".main_details_table #ProductionOrderName").attr("href");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                        }
                    });
                }
            });

            $("#btnRenameBatch").click(function () {
                var productionOrderBatchId = $('#Id').val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/RenameProductionOrderBatch",
                    data: { productionOrderBatchId: productionOrderBatchId },
                    success: function (result) {
                        $("#productionOrderRenameBatch").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderRenameBatch"));
                        ShowModal("productionOrderRenameBatch");
                    },

                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                    }
                });
            });

            // добавление строки
            $("#btnAddRow").live("click", function () {
                var batchId = $('#Id').val();
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/AddRow",
                    data: { batchId: batchId },
                    success: function (result) {
                        $('#productionOrderBatchRowEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchRowEdit"));
                        ShowModal("productionOrderBatchRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowList");
                    }
                });
            });

            $("#gridProductionOrderBatchRow .linkRowEdit").live("click", function () {
                var batchId = $('#Id').val();
                var batchRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditRow",
                    data: { batchId: batchId, rowId: batchRowId },
                    success: function (result) {
                        $('#productionOrderBatchRowEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchRowEdit"));
                        ShowModal("productionOrderBatchRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowList");
                    }
                });
            });

            $("#gridProductionOrderBatchRow .linkRowDelete").live("click", function () {
                if (confirm('Вы уверены?')) {
                    var batchId = $('#Id').val();
                    var batchRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteRow",
                        data: { batchId: batchId, rowId: batchRowId },
                        success: function (result) {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            RefreshGrid("gridProductionOrderBatchRow", function () { ShowSuccessMessage("Позиция удалена.", "messageProductionOrderBatchRowList"); });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchRowList");
                        }
                    });
                }
            });
        });

        $("#linkChangeStage").live("click", function () {
            var productionOrderBatchId = $('#Id').val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ChangeStage",
                data: { productionOrderBatchId: productionOrderBatchId, isSingleBatch: "0" },
                success: function (result) {
                    $('#productionOrderBatchChangeStage').hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderBatchChangeStage"));
                    ShowModal("productionOrderBatchChangeStage");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEdit");
                }
            });
        });

        $("#productionOrderBatchChangeStage #btnMoveToNextStage").live("click", function () {
            var productionOrderBatchId = $('#Id').val();
            StartButtonProgress($(this));
            var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
            $.ajax({
                type: "POST",
                url: "/ProductionOrder/MoveToNextStage",
                data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "0", isReturnBatchDetails: "1" },
                success: function (result) {
                    HideModal(function () {
                        ProductionOrder_ProductionOrderBatchDetails.RefreshExecutionGraph(function () {
                            ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderBatchEdit");
                            // RefreshMainDetails может вывести сообщение, забивающее первое, и должно идти вторым
                            ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result.mainDetails);
                            if (result.allowToCloseProductionOrder)
                                ProductionOrder_ProductionOrderBatchDetails.ShowConfirmCloseOrder();
                        });
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                }
            });
        });

        $("#productionOrderBatchChangeStage #btnMoveToPreviousStage").live("click", function () {
            if (confirm('Вы уверены?')) {
                StartButtonProgress($(this));
                var productionOrderBatchId = $('#Id').val();
                var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveToPreviousStage",
                    data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "0", isReturnBatchDetails: "1" },
                    success: function (result) {
                        HideModal(function () {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshExecutionGraph(function () {
                                ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderBatchEdit");
                                ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result);
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                    }
                });
            }
        });

        $("#productionOrderBatchChangeStage #btnMoveToUnsuccessfulClosingStage").live("click", function () {
            if (confirm('Вы уверены?')) {
                StartButtonProgress($(this));
                var productionOrderBatchId = $('#Id').val();
                var currentStageId = $("#productionOrderBatchChangeStage #CurrentStageId").val();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveToUnsuccessfulClosingStage",
                    data: { productionOrderBatchId: productionOrderBatchId, currentStageId: currentStageId, isSingleBatch: "0", isReturnBatchDetails: "1" },
                    success: function (result) {
                        HideModal(function () {
                            ProductionOrder_ProductionOrderBatchDetails.RefreshExecutionGraph(function () {
                                ShowSuccessMessage("Текущий этап изменен.", "messageProductionOrderBatchEdit");
                                // RefreshMainDetails может вывести сообщение, забивающее первое, и должно идти вторым
                                ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(result.mainDetails);
                                if (result.allowToCloseProductionOrder)
                                    ProductionOrder_ProductionOrderBatchDetails.ShowConfirmCloseOrder();
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageChange");
                    }
                });
            }
        });

    },

    ShowConfirmCloseOrder: function () {
        ShowConfirm("Закрыть заказ?", "При закрытии заказа будет рассчитана себестоимость товара.", "Закрыть заказ",
                "Отмена",
                function () {
                    var productionOrderId = $("#ProductionOrderId").val();
                    $.ajax({
                        type: "GET",
                        url: "/ProductionOrder/Close",
                        data: { productionOrderId: productionOrderId },
                        success: function (result) {
                            window.location = "/ProductionOrder/Details?id=" + productionOrderId;
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageConfirmError");
                        }
                    });
                });
    },


    UpdateCuratorLink: function () {
        var curatorId = $("#CuratorId").val();
        if (IsTrue($("#AllowToViewCuratorDetails").val())) {
            $("#CuratorName").attr("href", "/User/Details?id=" + curatorId + GetBackUrl());
        }
        else {
            $("#CuratorName").addClass("disabled");
        }
    },

    UpdateReceiptWaybillLink: function () {
        var receiptWaybillId = $("#ReceiptWaybillId").val();
        if (IsTrue($("#AllowToViewReceiptWaybillDetails").val())) {
            $("#ReceiptWaybillName").attr("href", "/ReceiptWaybill/Details?id=" + receiptWaybillId + GetBackUrl());
        }
        else {
            $("#ReceiptWaybillName").addClass("disabled");
        }
    },

    OnSuccessProductionOrderBatchRowEdit: function (ajaxContext) {
        if ($('#productionOrderBatchRowEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
            HideModal();
            ShowSuccessMessage("Сохранено.", "messageProductionOrderBatchRowList");
        }
        else {
            $("#productionOrderBatchRowEdit #ArticleName").text("Выберите товар");
            $("#productionOrderBatchRowEdit #ArticleId").val("");
            $("#productionOrderBatchRowEdit #ManufacturerName").text("Выберите фабрику-изготовителя");
            $("#productionOrderBatchRowEdit #ManufacturerId").val("");
            $("#productionOrderBatchRowEdit #ProductionCountryId").val(0);
            $('#productionOrderBatchRowEdit #PackHeight').val("0");
            $('#productionOrderBatchRowEdit #PackLength').val("0");
            $('#productionOrderBatchRowEdit #PackWidth').val("0");

            $('#productionOrderBatchRowEdit #PackSize').text("---");
            $('#productionOrderBatchRowEdit #PackWeight').val("");
            $('#productionOrderBatchRowEdit #PackVolume').val("");
            $('#productionOrderBatchRowEdit #Count').val("");
            $('#productionOrderBatchRowEdit #PackCount').val("");
            $('#productionOrderBatchRowEdit #ProductionCost').val("");
            $('#productionOrderBatchRowEdit #TotalCost').val("");

            $('#productionOrderBatchRowEdit #TotalWeight').text("---");
            $('#productionOrderBatchRowEdit #TotalVolume').text("---");

            $('#productionOrderBatchRowEdit #MeasureUnitName').text("");

            SetFieldScale("#Count", 12, 0, "#productionOrderBatchRowEdit", true);

            $('#productionOrderBatchRowEdit input[type!="button"][type!="submit"][type!="hidden"]').attr("disabled", "disabled");

            ShowSuccessMessage("Сохранено.", "messageProductionOrderBatchRowEdit");
        }

        ProductionOrder_ProductionOrderBatchDetails.RefreshMainDetails(ajaxContext);
        RefreshGrid("gridProductionOrderBatchRow");
    },

    RefreshMainDetails: function (details) {
        $("#ProductionOrderName").text(details.ProductionOrderName);
        $("#StateName").text(details.StateName);
        $("#ProducerName").text(details.ProducerName);
        $("#CurrentStageName").text(details.CurrentStageName);
        $("#CurrentStageActualStartDate").text(details.CurrentStageActualStartDate);
        $("#CurrentStageDaysPassed").text(details.CurrentStageDaysPassed);
        $("#CurrentStageExpectedEndDate").text(details.CurrentStageExpectedEndDate);
        $("#CurrentStageDaysLeft").text(details.CurrentStageDaysLeft);
        $("#ContainerPlacement").text(details.ContainerPlacement);
        $("#ContainerPlacementFreeVolume").text(details.ContainerPlacementFreeVolume);
        $("#CurrencyLiteralCode").text(details.CurrencyLiteralCode);
        $("#CurrencyRateName").text(details.CurrencyRateName);
        $("#CurrencyRate").text(details.CurrencyRate);
        $("#Date").text(details.Date);
        $("#ProducingPendingDate").text(details.ProducingPendingDate);
        $("#DeliveryPendingDate").text(details.DeliveryPendingDate);
        $("#DivergenceFromPlan").text(details.DivergenceFromPlan);
        $("#Weight").text(details.Weight);
        $("#Volume").text(details.Volume);
        $("#ProductionCostSumInCurrency").text(details.ProductionCostSumInCurrency);
        $("#ProductionCostSumInBaseCurrency").text(details.ProductionCostSumInBaseCurrency);
        $("#AccountingPriceSum").text(details.AccountingPriceSum);

        $("#AllowToViewStageList").val(details.AllowToViewStageList);
        $("#AllowToViewCuratorDetails").val(details.AllowToViewCuratorDetails);
        $("#AllowToViewReceiptWaybillDetails").val(details.AllowToViewReceiptWaybillDetails);

        $("#CuratorId").val(details.CuratorId);
        if (!IsDefaultOrEmpty(details.CuratorId)) {
            $("#CuratorName").html('<a id="CuratorLink">' + details.CuratorName + '</a>');
            ProductionOrder_ProductionOrderBatchDetails.UpdateCuratorLink();
        } else {
            $("#CuratorName").html(details.CuratorName);
        }

        $("#ReceiptWaybillId").val(details.ReceiptWaybillId);
        if (!IsDefaultOrEmpty(details.ReceiptWaybillId)) {
            $("#receiptWaybillLink").html('<a id="ReceiptWaybillName">' + details.ReceiptWaybillName + '</a>');
            ProductionOrder_ProductionOrderBatchDetails.UpdateReceiptWaybillLink();
        } else {
            $("#receiptWaybillLink").html(details.ReceiptWaybillName);
        }

        ProductionOrder_ProductionOrderBatchDetails.UpdateOptionColor("IsApprovedByLineManager", details.IsApprovedByLineManager);
        ProductionOrder_ProductionOrderBatchDetails.UpdateOptionColor("IsApprovedByFinancialDepartment", details.IsApprovedByFinancialDepartment);
        ProductionOrder_ProductionOrderBatchDetails.UpdateOptionColor("IsApprovedBySalesDepartment", details.IsApprovedBySalesDepartment);
        ProductionOrder_ProductionOrderBatchDetails.UpdateOptionColor("IsApprovedByAnalyticalDepartment", details.IsApprovedByAnalyticalDepartment);
        ProductionOrder_ProductionOrderBatchDetails.UpdateOptionColor("IsApprovedByProjectManager", details.IsApprovedByProjectManager);
        UpdateElementVisibility("ApprovementState", details.IsApprovementState);

        UpdateButtonAvailability("btnSplitBatch", details.AllowToSplitBatch);
        UpdateElementVisibility("btnSplitBatch", details.AllowToSplitBatch);

        UpdateButtonAvailability("btnAddRow", details.AllowToEditRows);
        UpdateElementVisibility("btnAddRow", details.AllowToEditRows);

        UpdateButtonAvailability("btnRenameBatch", details.AllowToRename);
        UpdateElementVisibility("btnRenameBatch", details.AllowToRename);

        UpdateButtonAvailability("btnDeleteBatch", details.AllowToDeleteBatch);
        UpdateElementVisibility("btnDeleteBatch", details.AllowToDeleteBatch);

        UpdateButtonAvailability("btnEditStages", details.AllowToEditStages);
        UpdateElementVisibility("btnEditStages", details.AllowToEditStages);

        UpdateButtonAvailability("btnAccept", details.AllowToAccept);
        UpdateElementVisibility("btnAccept", details.AllowToAccept);
        UpdateButtonAvailability("btnCancelAcceptance", details.AllowToCancelAcceptance);
        UpdateElementVisibility("btnCancelAcceptance", details.AllowToCancelAcceptance);
        UpdateButtonAvailability("btnApprove", details.AllowToApprove);
        UpdateElementVisibility("btnApprove", details.AllowToApprove);
        UpdateButtonAvailability("btnCancelApprovement", details.AllowToCancelApprovement);
        UpdateElementVisibility("btnCancelApprovement", details.AllowToCancelApprovement);

        UpdateButtonAvailability("btnApproveByLineManager", details.AllowToApproveByLineManager);
        UpdateElementVisibility("btnApproveByLineManager", details.AllowToApproveByLineManager);
        UpdateButtonAvailability("btnCancelApprovementByLineManager", details.AllowToCancelApprovementByLineManager);
        UpdateElementVisibility("btnCancelApprovementByLineManager", details.AllowToCancelApprovementByLineManager);

        UpdateButtonAvailability("btnApproveByFinancialDepartment", details.AllowToApproveByFinancialDepartment);
        UpdateElementVisibility("btnApproveByFinancialDepartment", details.AllowToApproveByFinancialDepartment);
        UpdateButtonAvailability("btnCancelApprovementByFinancialDepartment", details.AllowToCancelApprovementByFinancialDepartment);
        UpdateElementVisibility("btnCancelApprovementByFinancialDepartment", details.AllowToCancelApprovementByFinancialDepartment);

        UpdateButtonAvailability("btnApproveBySalesDepartment", details.AllowToApproveBySalesDepartment);
        UpdateElementVisibility("btnApproveBySalesDepartment", details.AllowToApproveBySalesDepartment);
        UpdateButtonAvailability("btnCancelApprovementBySalesDepartment", details.AllowToCancelApprovementBySalesDepartment);
        UpdateElementVisibility("btnCancelApprovementBySalesDepartment", details.AllowToCancelApprovementBySalesDepartment);

        UpdateButtonAvailability("btnApproveByAnalyticalDepartment", details.AllowToApproveByAnalyticalDepartment);
        UpdateElementVisibility("btnApproveByAnalyticalDepartment", details.AllowToApproveByAnalyticalDepartment);
        UpdateButtonAvailability("btnCancelApprovementByAnalyticalDepartment", details.AllowToCancelApprovementByAnalyticalDepartment);
        UpdateElementVisibility("btnCancelApprovementByAnalyticalDepartment", details.AllowToCancelApprovementByAnalyticalDepartment);

        UpdateButtonAvailability("btnApproveByProjectManager", details.AllowToApproveByProjectManager);
        UpdateElementVisibility("btnApproveByProjectManager", details.AllowToApproveByProjectManager);
        UpdateButtonAvailability("btnCancelApprovementByProjectManager", details.AllowToCancelApprovementByProjectManager);
        UpdateElementVisibility("btnCancelApprovementByProjectManager", details.AllowToCancelApprovementByProjectManager);

        UpdateElementVisibility("linkChangeStage", details.AllowToChangeStage);
        UpdateElementVisibility("linkCreateReceiptWaybill", details.AllowToCreateReceiptWaybill);
        UpdateElementVisibility("linkDeleteReceiptWaybill", details.AllowToDeleteReceiptWaybill);

        var showExecutionGraph = IsFalse($("#IsSingleBatch").val()) && IsTrue($("#AllowToViewStageList").val());
        UpdateElementVisibility("executionGraph", showExecutionGraph);
    },

    UpdateOptionColor: function (id, value) {
        if (IsTrue(value)) {
            $("#" + id).removeClass("grey_option").addClass("green_option");
        } else {
            $("#" + id).removeClass("green_option").addClass("grey_option");
        }
    },

    RefreshExecutionGraph: function (onSuccessFunction) {
        var showExecutionGraph = IsFalse($("#IsSingleBatch").val()) && IsTrue($("#AllowToViewStageList").val());
        if (showExecutionGraph) {
            var productionOrderBatchId = $('#Id').val();
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/ShowOrderExecutionGraph/",
                data: { id: productionOrderBatchId },
                success: function (result) {
                    ProductionOrder_ProductionOrderBatchDetails.DrawExecutionGraph(result);
                    if (onSuccessFunction != undefined)
                    // Вызываем переданный метод
                        onSuccessFunction();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageExecutionGraph");
                }
            });
        }
        else {
            if (onSuccessFunction != undefined)
            // Вызываем переданный метод
                onSuccessFunction();
        }
    },

    DrawExecutionGraph: function (graphData) {
        var showExecutionGraph = IsTrue($("#AllowToViewStageList").val());
        if (showExecutionGraph) {
            drawExecutionGraph("graph", graphData, false);

            //Получаем дату начала и конца заказа
            if (typeof graphData == "string") {
                var data = $.parseJSON(graphData);
            }
            else {
                var data = graphData;
            }
            var startDate = new Date(parseInt(data.StartDate.slice(6, 19)));
            var endDate = new Date(parseInt(data.EndDate.slice(6, 19)));

            var startDateString = dateToString(startDate, 2) + ' - Старт';
            var endDateString = 'Завершение - ' + dateToString(endDate, 2);

            //если отрисовываем граф не в первый раз, то просто меняем даты
            if ($("#executionGraph .grid").children().is("#startDate")) {
                $("#startDate").text(startDateString);
                $("#endDate").text(endDateString);
            }
            else{//создаем div для дат и выводим их
                var startDateDiv = $('<div id="startDate" style="margin:5px;position:absolute;left:0;bottom:3px">' + startDateString + '</div>');
                var endDateDiv = $('<div id="endDate" style="margin:5px;position:absolute;right:0;bottom:3px">' + endDateString + '</div>');
                $("#executionGraph .grid").append(startDateDiv).append(endDateDiv);
            }

        }
    }
};
﻿var ProductionOrder_ProductionOrderBatchEditStages = {
    Init: function () {
        $(document).ready(function () {

            $("#linkLoadFromTemplate").click(function () {
                StartLinkProgress($(this));
                var id = $("#ProductionOrderBatchLifeCycleTemplateId").val();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderBatchLifeCycleTemplate/SelectProductionOrderBatchLifeCycleTemplate",
                    success: function (result) {
                        $("#productionOrderBatchLifeCycleTemplateSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchLifeCycleTemplateSelector"));
                        ShowModal("productionOrderBatchLifeCycleTemplateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                    }
                });
            });

            $("#gridProductionOrderBatchStage .linkAddStage").live("click", function () {
                var productionOrderBatchId = $("#Id").val();
                var idPreviousStage = $(this).parent("td").parent("tr").find(".Id").text();
                var position = $(this).parent("td").parent("tr").find(".OrdinalNumber").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/AddStage",
                    data: { productionOrderBatchId: productionOrderBatchId, idPreviousStage: idPreviousStage, position: position },
                    success: function (result) {
                        $("#productionOrderBatchStageEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchStageEdit"));
                        ShowModal("productionOrderBatchStageEdit");
                        $("#productionOrderBatchStageEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                    }
                });
            });

            $("#gridProductionOrderBatchStage .linkEditStage").live("click", function () {
                var productionOrderBatchId = $("#Id").val();
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditStage",
                    data: { productionOrderBatchId: productionOrderBatchId, id: id },
                    success: function (result) {
                        $("#productionOrderBatchStageEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchStageEdit"));
                        ShowModal("productionOrderBatchStageEdit");
                        $("#productionOrderBatchStageEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                    }
                });
            });

            $("#gridProductionOrderBatchStage .linkDeleteStage").live("click", function () {
                if (confirm('Вы уверены?')) {
                    var productionOrderBatchId = $("#Id").val();
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteStage",
                        data: { productionOrderBatchId: productionOrderBatchId, id: id },
                        success: function (result) {
                            RefreshOrderBatchAfterModifiedStages(result, function () {
                                ShowSuccessMessage("Этап удален.", "messageProductionOrderBatchEditStages");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                        }
                    });
                }
            });

            $("#gridProductionOrderBatchStage .linkMoveStageUp").live("click", function () {
                var productionOrderBatchId = $("#Id").val();
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveStageUp",
                    data: { productionOrderBatchId: productionOrderBatchId, id: id },
                    success: function (result) {
                        $(".main_details_table #ProducingPendingDate").text(result.producingPendingDate);
                        RefreshGrid("gridProductionOrderBatchStage", function () {
                            RefreshExecutionGraph();
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                    }
                });
            });

            $("#gridProductionOrderBatchStage .linkMoveStageDown").live("click", function () {
                var productionOrderBatchId = $("#Id").val();
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrder/MoveStageDown",
                    data: { productionOrderBatchId: productionOrderBatchId, id: id },
                    success: function (result) {
                        $(".main_details_table #ProducingPendingDate").text(result.producingPendingDate);
                        RefreshGrid("gridProductionOrderBatchStage", function () {
                            RefreshExecutionGraph();
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                    }
                });
            });

            $("#linkClearCustomStages").click(function () {
                if (confirm('Вы уверены? Данная операция уничтожит все пользовательские этапы.')) {
                    var productionOrderBatchId = $("#Id").val();
                    StartLinkProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/ClearCustomStages",
                        data: { productionOrderBatchId: productionOrderBatchId },
                        success: function (result) {
                            RefreshOrderBatchAfterModifiedStages(result, function () {
                                ShowSuccessMessage("Этапы удалены.", "messageProductionOrderBatchEditStages");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchEditStages");
                        }
                    });
                }
            });



        });
    },

    // --------- Форма редактирования стадии ---------

    OnFailStageSave: function (XMLHttpRequest, textStatus, thrownError) {
        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchStageEdit");
    },

    OnBeginStageSave: function () {
        StartButtonProgress($("#btnStageSave"));
    },

    OnSuccessStageSave: function (result) {
        RefreshOrderBatchAfterModifiedStages(result, function () {
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderBatchEditStages");
            });
        });
    }

    // ---------------------------------------------------

};

function RefreshExecutionGraph(onSuccessFunction) {
    var productionOrderBatchId = $("#Id").val();

    $.ajax({
        type: "GET",
        url: "/ProductionOrder/ShowOrderExecutionGraph/",
        data: { id: productionOrderBatchId },
        success: function (result) {
            drawExecutionGraph("graph", result);
            if (onSuccessFunction != undefined)
            // Вызываем переданный метод
                onSuccessFunction();
        },
        error: function (XMLHttpRequest, textStatus, thrownError) {
            ShowErrorMessage(XMLHttpRequest.responseText, "messageExecutionGraph");
        }
    });
};

// Пользователь щелкнул на ссылку "Выбрать" в гриде выбора шаблона заказа
function OnProductionOrderBatchLifeCycleTemplateSelectLinkClick (productionOrderBatchLifeCycleTemplateId, productionOrderBatchLifeCycleTemplateName) {
    var productionOrderBatchId = $("#Id").val();
    $.ajax({
        type: "POST",
        url: "/ProductionOrder/LoadStagesFromTemplate/",
        data: { productionOrderBatchId: productionOrderBatchId, productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId },
        success: function (result) {
            RefreshOrderBatchAfterModifiedStages(result, function () {
                HideModal(function () {
                    ShowSuccessMessage("Этапы загружены из шаблона.", "messageProductionOrderBatchEditStages");
                });
            });
        },
        error: function (XMLHttpRequest, textStatus, thrownError) {
            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateSelectList");
        }
    });
};

function RefreshOrderBatchAfterModifiedStages(result, onSuccessFunction) {
    $(".main_details_table #ProducingPendingDate").text(result.producingPendingDate);
    $(".main_details_table #DeliveryPendingDate").text(result.deliveryPendingDate);
    RefreshGrid("gridProductionOrderBatchStage", function () {
        RefreshExecutionGraph(function () {
            if (onSuccessFunction != undefined)
                onSuccessFunction();
        });
    });
};

﻿var ProductionOrder_ProductionOrderBatchSplit = {

    Init: function () {
        $(document).ready(function () {
            ProductionOrder_ProductionOrderBatchSplit.Initialize();

            // Возврат на прежнюю страницу
            $("#btnBack").click(function () {
                window.location = $("#BackUrl").val();
            });

            $("#btnDoSplit").click(function () {
                if (ProductionOrder_ProductionOrderBatchSplit.ValidateCounts()) {
                    if (confirm('Вы уверены?')) {
                        StartButtonProgress($(this));
                        var productionOrderBatchId = $('#ProductionOrderBatchId').val();
                        var splitInfo = $('#SplitInfo').val();
                        $.ajax({
                            type: "POST",
                            url: "/ProductionOrder/PerformBatchSplit",
                            data: { productionOrderBatchId: productionOrderBatchId, splitInfo: splitInfo },
                            success: function (ajaxContext) {
                                var url = "/ProductionOrder/ProductionOrderBatchDetails?id=" + ajaxContext + GetBackUrlFromString($("#BackUrl").val());
                                window.location = url;
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageEditSplitCount");
                            }
                        });
                    }
                }
                else {
                    ShowErrorMessage("Введено некорректное количество. Отредактируйте данные и попробуйте снова.", "messageEditSplitCount");
                }
            });

            $(".IsSplitted").change(function () {
                if ($(this).attr("checked")) {
                    var count = $(this).parent("td").parent("tr").find(".Count").text();

                    // Изменяем состояния TextEdit-ов
                    $(this).parent("td").parent("tr").find(".SplittedCount").removeAttr("disabled").removeClass("disabled");
                    $(this).parent("td").parent("tr").find(".Remainder").removeAttr("disabled").removeClass("disabled");

                    // Изменяем значения TextEdit-ов
                    $(this).parent("td").parent("tr").find(".SplittedCount").val(count);
                    $(this).parent("td").parent("tr").find(".SplittedCount").focus();
                    $(this).parent("td").parent("tr").find(".Remainder").val("0");

                    ProductionOrder_ProductionOrderBatchSplit.RefreshAll();
                }
                else {
                    // Изменяем состояния TextEdit-ов
                    $(this).parent("td").parent("tr").find(".SplittedCount").attr("disabled", "disabled").addClass("disabled");
                    $(this).parent("td").parent("tr").find(".Remainder").attr("disabled", "disabled").addClass("disabled");

                    // Изменяем значения TextEdit-ов
                    $(this).parent("td").parent("tr").find(".SplittedCount").val("0");
                    $(this).parent("td").parent("tr").find(".Remainder").val("0");

                    ProductionOrder_ProductionOrderBatchSplit.RefreshAll();
                };
            });
        });

        $("#gridProductionOrderBatchSplitRow .SplittedCount").live("keyup change paste cut", function () {
            var precision = TryGetDecimal($(this).parent("td").parent("tr").find(".Precision").text());
            var count = TryGetDecimal($(this).parent("td").parent("tr").find(".Count").text(), precision);
            var splittedCount = TryGetDecimal($(this).parent("td").parent("tr").find(".SplittedCount").val(), precision);
            if (!isNaN(splittedCount)) {
                $(this).parent("td").parent("tr").find(".Remainder").val(ValueForEdit(count - splittedCount));
            }
            ProductionOrder_ProductionOrderBatchSplit.RefreshAll();
        });

        $("#gridProductionOrderBatchSplitRow .Remainder").live("keyup change paste cut", function () {
            var precision = TryGetDecimal($(this).parent("td").parent("tr").find(".Precision").text());
            var count = TryGetDecimal($(this).parent("td").parent("tr").find(".Count").text(), precision);
            var remainder = TryGetDecimal($(this).parent("td").parent("tr").find(".Remainder").val(), precision);
            if (!isNaN(remainder)) {
                $(this).parent("td").parent("tr").find(".SplittedCount").val(ValueForEdit(count - remainder));
            }
            ProductionOrder_ProductionOrderBatchSplit.RefreshAll();
        });

    },

    Initialize: function () {
        // Делаем недоступными все органы ввода TextEdit
        $("#gridProductionOrderBatchSplitRow .SplittedCount").each(function () {
            $(this).attr("disabled", "disabled").addClass("disabled");
            // Сбрасываем значение (для FireFox)
            $(this).val("0");
        });
        $("#gridProductionOrderBatchSplitRow .Remainder").each(function () {
            $(this).attr("disabled", "disabled").addClass("disabled");
            // Сбрасываем значение (для FireFox)
            $(this).val("0");
        });

        // Сбрасываем все галочки (для FireFox)
        $("#gridProductionOrderBatchSplitRow .IsSplitted").each(function () {
            $(this).attr("checked", false);
        });

        // Делаем недоступной кнопку (для FireFox)
        UpdateButtonAvailability("btnDoSplit", false);
    },

    RefreshAll: function () {
        ProductionOrder_ProductionOrderBatchSplit.RefreshSplitInfo();
        ProductionOrder_ProductionOrderBatchSplit.RefreshButtonStates();
    },

    // Функция обновления состояний кнопок. Должна вызываться после перезаполнения поля SplitInfo
    RefreshButtonStates: function () {
        UpdateButtonAvailability("btnDoSplit", $("#SplitInfo").val() != "");
    },

    // Заполнить строку информацией о разделяемых позициях и поместить ее в поле SplitInfo
    RefreshSplitInfo: function () {
        var splitInfo = "";
        var eps = 0.0000005;

        $("#gridProductionOrderBatchSplitRow .IsSplitted").each(function () {
            if ($(this).attr("checked")) {
                var precision = TryGetDecimal($(this).parent("td").parent("tr").find(".Precision").text());
                var splittedCount = TryGetDecimal($(this).parent("td").parent("tr").find(".SplittedCount").val(), precision);
                if (!isNaN(splittedCount)) {
                    // Вставляем в строку только ненулевые значения
                    if (splittedCount > eps) {
                        splitInfo += ($(this).parent("td").parent("tr").find(".Id").text() + "=" + splittedCount + ";");
                    }
                }
            }
        });

        $("#SplitInfo").val(splitInfo);
    },

    // Проверить, все ли количества удовлетворяют условиям
    ValidateCounts: function () {
        var validateCountsResult = true;

        $("#gridProductionOrderBatchSplitRow .IsSplitted").each(function () {
            if ($(this).attr("checked")) {
                var eps = 0.0000005;
                var precision = TryGetDecimal($(this).parent("td").parent("tr").find(".Precision").text());
                var count = TryGetDecimal($(this).parent("td").parent("tr").find(".Count").text());
                var packSize = TryGetDecimal($(this).parent("td").parent("tr").find(".PackSize").text(), precision);
                var splittedCount = TryGetDecimal($(this).parent("td").parent("tr").find(".SplittedCount").val(), precision);
                var remainder = TryGetDecimal($(this).parent("td").parent("tr").find(".Remainder").val(), precision);
                var totalCount = (splittedCount + remainder);

                // Проверяем на нечисловые значения
                if (isNaN(splittedCount)) {
                    $(this).parent("td").parent("tr").find(".SplittedCount").focus();
                    validateCountsResult = false;

                    return (false);
                }
                if (isNaN(remainder)) {
                    $(this).parent("td").parent("tr").find(".Remainder").focus();
                    validateCountsResult = false;

                    return (false);
                }

                // Проверяем на отрицательные значения и на равенство суммы 2 полей общему количеству
                if (splittedCount < -eps || totalCount > count + eps || totalCount < count - eps) {
                    $(this).parent("td").parent("tr").find(".SplittedCount").focus();
                    validateCountsResult = false;

                    return (false);
                }
                if (remainder < -eps) {
                    $(this).parent("td").parent("tr").find(".Remainder").focus();
                    validateCountsResult = false;

                    return (false);
                }

                // Округляем значения до целого количества партий вниз
                var splittedCountBatchCount = Math.floor(splittedCount / packSize);
                // Если значение после округления вниз 0, а само число не 0, то делаем его 1
                if (splittedCountBatchCount < eps && splittedCount > eps)
                    splittedCountBatchCount = 1;
                splittedCount = splittedCountBatchCount * packSize;
                remainder = count - splittedCount;

                // Записываем значение назад с заданной точностью
                $(this).parent("td").parent("tr").find(".SplittedCount").val(ValueForEdit(splittedCount, precision));
                $(this).parent("td").parent("tr").find(".Remainder").val(ValueForEdit(remainder, precision));
            }
        });

        // Так как при округлении перерассчитывались значения, формируем заново строку с информацией о разделении и заодно освежаем статус кнопок
        ProductionOrder_ProductionOrderBatchSplit.RefreshAll();

        return (validateCountsResult);
    }

};﻿var ProductionOrder_ProductionOrderPaymentEdit = {
    Init: function () {
        $(document).ready(function () {
            $("#main_page #ProductionOrderPaymentTypeId").val($("#productionOrderPaymentEdit #ProductionOrderPaymentTypeId").val());

            $("#linkChangePlannedPayment").click(function () {
                var productionOrderId = $("#ProductionOrderId").val();
                var productionOrderPaymentTypeId = $("#ProductionOrderPaymentTypeId").val();

                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/SelectPlannedPayment",
                    data: { productionOrderId: productionOrderId, productionOrderPaymentTypeId: productionOrderPaymentTypeId, selectFunctionName: "OnProductionOrderPaymentEditSelectLinkClick" },
                    success: function (result) {
                        $("#productionOrderPlannedPaymentSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderPlannedPaymentSelector"));
                        ShowModal("productionOrderPlannedPaymentSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentEdit");
                    }
                });
            });

            //обработка выбора планового платежа для оплаты
            $("#productionOrderPlannedPaymentSelector .selectPlannedPayment").die("click");
            $("#productionOrderPlannedPaymentSelector .selectPlannedPayment").live("click", function () {
                var productionOrderPlannedPaymentId = $(this).parent("td").parent("tr").find(".Id").text();
                var sumInCurrency = $(this).parent("td").parent("tr").find(".SumInCurrency").text();
                var currencyLiteralCode = $(this).parent("td").parent("tr").find(".CurrencyLiteralCode").text();
                var paymentSumInBaseCurrency = $(this).parent("td").parent("tr").find(".PaymentSumInBaseCurrency").text();

                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentId").val(productionOrderPlannedPaymentId);
                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentSumInCurrency").text(sumInCurrency);
                $("#productionOrderPaymentEdit .ProductionOrderPlannedPaymentCurrencyLiteralCode").text(currencyLiteralCode);
                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentPaidSumInBaseCurrency").text(paymentSumInBaseCurrency);

                var productionOrderPaymentId = $("#ProductionOrderPaymentId").val();
                // Если платеж редактируется, то сразу сохраняем изменение планового платежа
                if (productionOrderPaymentId != "00000000-0000-0000-0000-000000000000") {
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrderPayment/ChangeProductionOrderPaymentPlannedPayment",
                        data: { productionOrderPaymentId: productionOrderPaymentId, productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                        success: function (result) {
                            HideModal(function () {
                                $("#linkChangePlannedPayment").hide();
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPlannedPaymentSelectList");
                        }
                    });
                } // иначе все изменения будут сохранены при сохранении самой оплаты
                else {
                    HideModal(function () {
                    });
                }
            });
        });
    }
};﻿var ProductionOrderBatchLifeCycleTemplate_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#btnEdit").click(function () {
                var id = $("#ProductionOrderBatchLifeCycleTemplateId").val();
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderBatchLifeCycleTemplate/Edit",
                    data: { id: id },
                    success: function (result) {
                        $('#productionOrderBatchLifeCycleTemplateEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchLifeCycleTemplateEdit"));
                        ShowModal("productionOrderBatchLifeCycleTemplateEdit");
                        $("#productionOrderBatchLifeCycleTemplateEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                    }
                });
            });

            $("#btnDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $("#ProductionOrderBatchLifeCycleTemplateId").val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrderBatchLifeCycleTemplate/Delete",
                        data: { id: id },
                        success: function (result) {
                            window.location = $("#BackUrl").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                        }
                    });
                }
            });

            // Возврат на прежнюю страницу
            $("#btnBack").click(function () {
                window.location = $("#BackUrl").val();
            });
        });

        $(".linkAddStage").live("click", function () {
            var productionOrderBatchLifeCycleTemplateId = $("#ProductionOrderBatchLifeCycleTemplateId").val();
            var id = $(this).parent("td").parent("tr").find(".Id").text();
            var position = $(this).parent("td").parent("tr").find(".OrdinalNumber").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrderBatchLifeCycleTemplate/AddStage",
                data: { productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId, id: id, position: position },
                success: function (result) {
                    $("#productionOrderBatchLifeCycleTemplateStageEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderBatchLifeCycleTemplateStageEdit"));
                    ShowModal("productionOrderBatchLifeCycleTemplateStageEdit");
                    $("#productionOrderBatchLifeCycleTemplateStageEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                }
            });
        });

        $(".linkEditStage").live("click", function () {
            var productionOrderBatchLifeCycleTemplateId = $("#ProductionOrderBatchLifeCycleTemplateId").val();
            var id = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "GET",
                url: "/ProductionOrderBatchLifeCycleTemplate/EditStage",
                data: { productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId, id: id },
                success: function (result) {
                    $("#productionOrderBatchLifeCycleTemplateStageEdit").hide().html(result);
                    $.validator.unobtrusive.parse($("#productionOrderBatchLifeCycleTemplateStageEdit"));
                    ShowModal("productionOrderBatchLifeCycleTemplateStageEdit");
                    $("#productionOrderBatchLifeCycleTemplateStageEdit #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                }
            });
        });

        $(".linkDeleteStage").live("click", function () {
            if (confirm('Вы уверены?')) {
                var productionOrderBatchLifeCycleTemplateId = $("#ProductionOrderBatchLifeCycleTemplateId").val();
                var id = $(this).parent("td").parent("tr").find(".Id").text();

                StartGridProgress($(this).closest(".grid"));
                $.ajax({
                    type: "POST",
                    url: "/ProductionOrderBatchLifeCycleTemplate/DeleteStage",
                    data: { productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId, id: id },
                    success: function (result) {
                        RefreshGrid("gridProductionOrderBatchLifeCycleTemplateStage", function () {
                            ShowSuccessMessage("Этап удален.", "messageProductionOrderBatchLifeCycleTemplateEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                    }
                });
            }
        });

        $(".linkMoveStageUp").live("click", function () {
            var productionOrderBatchLifeCycleTemplateId = $("#ProductionOrderBatchLifeCycleTemplateId").val();
            var id = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "POST",
                url: "/ProductionOrderBatchLifeCycleTemplate/MoveStageUp",
                data: { productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId, id: id },
                success: function (result) {
                    RefreshGrid("gridProductionOrderBatchLifeCycleTemplateStage");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                }
            });
        });

        $(".linkMoveStageDown").live("click", function () {
            var productionOrderBatchLifeCycleTemplateId = $("#ProductionOrderBatchLifeCycleTemplateId").val();
            var id = $(this).parent("td").parent("tr").find(".Id").text();
            $.ajax({
                type: "POST",
                url: "/ProductionOrderBatchLifeCycleTemplate/MoveStageDown",
                data: { productionOrderBatchLifeCycleTemplateId: productionOrderBatchLifeCycleTemplateId, id: id },
                success: function (result) {
                    RefreshGrid("gridProductionOrderBatchLifeCycleTemplateStage");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateEdit");
                }
            });
        });

    },

    OnSuccessProductionOrderBatchLifeCycleTemplateEdit: function (ajaxContext) {
        HideModal(function () {
            ProductionOrderBatchLifeCycleTemplate_Details.RefreshMainDetailsAndPermissions(ajaxContext);
            ShowSuccessMessage("Сохранено.", "messageProductionOrderBatchLifeCycleTemplateEdit");            
        });
    },

    OnFailStageSave: function (XMLHttpRequest, textStatus, thrownError) {
        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateStageEdit");
    },

    OnSuccessStageSave: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridProductionOrderBatchLifeCycleTemplateStage", function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderBatchLifeCycleTemplateEdit");
            });
        });
    },

    OnBeginStageSave: function () {
        StartButtonProgress($("#btnStageSave"));
    },
    
    RefreshMainDetailsAndPermissions: function (result) {
        ProductionOrderBatchLifeCycleTemplate_Details.RefreshMainDetails(result.MainDetails);
        ProductionOrderBatchLifeCycleTemplate_Details.RefreshPermissions(result.Permissions);
    },

    RefreshMainDetails: function (details) {
        $(".page_title_item_name").text(details.Name);
    },

    RefreshPermissions: function (permissions) {
    }

};﻿var ProductionOrderBatchLifeCycleTemplate_List = {
    Init: function () {
        $(document).ready(function () {
            $("#btnCreateProductionOrderBatchLifeCycleTemplate").live("click", function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderBatchLifeCycleTemplate/Create",
                    success: function (result) {
                        $('#productionOrderBatchLifeCycleTemplateEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderBatchLifeCycleTemplateEdit"));
                        ShowModal("productionOrderBatchLifeCycleTemplateEdit");
                        $("#productionOrderBatchLifeCycleTemplateEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderBatchLifeCycleTemplateList");
                    }
                });
            });
        });
    },

    OnSuccessProductionOrderBatchLifeCycleTemplateEdit: function (ajaxContext) {
        HideModal(function () {
            window.location = "/ProductionOrderBatchLifeCycleTemplate/Details?id=" + ajaxContext.MainDetails.Id + GetBackUrl();
        });
    }

};﻿var ProductionOrderBatchLifeCycleTemplate_ProductionOrderBatchLifeCycleTemplateGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderBatchLifeCycleTemplate table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrderBatchLifeCycleTemplate/Details?id=" + id + GetBackUrl());
            });
        });
    }
};﻿var ProductionOrderBatchLifeCycleTemplate_SelectGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderBatchLifeCycleTemplateSelect table.grid_table tr").each(function () {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrderBatchLifeCycleTemplate/Details?id=" + id + GetBackUrl());
            });

            // Действия после выбора из грида (ссылка "Выбрать")
            $(".linkProductionOrderBatchLifeCycleTemplateSelect").click(function () {
                var productionOrderBatchLifeCycleTemplateId = $(this).parent("td").parent("tr").find(".Id").text();
                var productionOrderBatchLifeCycleTemplateName = $(this).parent("td").parent("tr").find(".Name").text();
                OnProductionOrderBatchLifeCycleTemplateSelectLinkClick(productionOrderBatchLifeCycleTemplateId, productionOrderBatchLifeCycleTemplateName);
            });
        });
    }
};﻿var ProductionOrderCustomsDeclaration_ProductionOrderCustomsDeclarationGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderCustomsDeclaration table.grid_table tr").each(function () {
                var productionOrderId = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + GetBackUrl());                
            });

            $("#gridProductionOrderCustomsDeclaration .linkCustomsDeclarationEdit").click(function () {
                var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                var customsDeclarationId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditProductionOrderCustomsDeclaration",
                    data: { productionOrderId: productionOrderId, customsDeclarationId: customsDeclarationId },
                    success: function (result) {
                        $("#productionOrderCustomsDeclarationEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderCustomsDeclarationEdit"));
                        ShowModal("productionOrderCustomsDeclarationEdit");
                        $("#productionOrderCustomsDeclarationEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderCustomsDeclarationList");
                    }
                });
            });            

            $("#gridProductionOrderCustomsDeclaration .linkCustomsDeclarationDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                    var customsDeclarationId = $(this).parent("td").parent("tr").find(".Id").text();
                    
                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteProductionOrderCustomsDeclaration/",
                        data: { productionOrderId: productionOrderId, customsDeclarationId: customsDeclarationId },
                        success: function (result) {
                            RefreshGrid("gridProductionOrderCustomsDeclaration", function () {
                                ShowSuccessMessage("Таможенный лист удален.", "messageProductionOrderCustomsDeclarationList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderCustomsDeclarationList");
                        }
                    });
                }
            });

        });

    },

    OnSuccessProductionOrderCustomsDeclarationEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderCustomsDeclaration", function () {           
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderCustomsDeclarationList");
            });           
        });
    },

    OnFailProductionOrderCustomsDeclarationEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderCustomsDeclarationEdit");
    },
};﻿var ProductionOrderExtraExpensesSheet_ProductionOrderExtraExpensesSheetGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderExtraExpensesSheet table.grid_table tr").each(function () {
                var productionOrderId = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + GetBackUrl());
            });

            $("#gridProductionOrderExtraExpensesSheet .linkExtraExpensesSheetEdit").click(function () {
                var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                var extraExpensesSheetId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditProductionOrderExtraExpensesSheet",
                    data: { productionOrderId: productionOrderId, extraExpensesSheetId: extraExpensesSheetId },
                    success: function (result) {
                        $("#productionOrderExtraExpensesSheetEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderExtraExpensesSheetEdit"));
                        ShowModal("productionOrderExtraExpensesSheetEdit");
                        $("#productionOrderExtraExpensesSheetEdit #ExtraExpensesContractorName").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderExtraExpensesSheetList");
                    }
                });
            });

            $("#gridProductionOrderExtraExpensesSheet .linkExtraExpensesSheetDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                    var extraExpensesSheetId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteProductionOrderExtraExpensesSheet/",
                        data: { productionOrderId: productionOrderId, extraExpensesSheetId: extraExpensesSheetId },
                        success: function (result) {
                            RefreshGrid("gridProductionOrderExtraExpensesSheet", function () {
                                ShowSuccessMessage("Лист дополнительных расходов удален.", "messageProductionOrderExtraExpensesSheetList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderExtraExpensesSheetList");
                        }
                    });
                }
            });

        });

    },

    OnSuccessProductionOrderExtraExpensesSheetEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderExtraExpensesSheet", function () {
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderExtraExpensesSheetList");
            });
        });
    },

    OnFailProductionOrderExtraExpensesSheetEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderExtraExpensesSheetEdit");
    },

     OnBeginProductionOrderExtraExpensesSheetEdit: function () {
        StartButtonProgress($('#btnProductionOrderExtraExpensesSheetEdit'));
    }
};﻿var ProductionOrderMaterialsPackage_Details = {
    Init: function () {
        $(document).ready(function () {
            //Формируем ссылку для заказа
            if (IsTrue($("#AllowToViewProductionOrder").val())) {
                $("#ProductionOrder").attr("href", "/ProductionOrder/Details?id=" + $("#ProductionOrderId").val() + "&backURL=" + $("#currentUrl").val());
            }
            else {
                $("#ProductionOrder").addClass("disabled");
            }

            $("#btnEdit").click(function () {
                window.location = "/ProductionOrderMaterialsPackage/Edit?id=" + $("#Id").val() + "&backURL=" + $("#currentUrl").val();
            });

            $("#btnBack").click(function () {
                window.location = $("#BackURL").val();
            });

            $("#btnDelete").click(function () {
                var id = $("#ProductionOrderId").val();
                if (confirm("Вы действительно хотите удалить пакет материалов?")) {
                    $.ajax({
                        type: "GET",
                        url: "/ProductionOrderMaterialsPackage/DeleteMaterialsPackage",
                        data: { id: $("#Id").val() },
                        success: function (result) {
                            window.location = $("#BackURL").val(); /// <reference path="../Deal/Deal.Details.SalesGrid.js" />

                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderMaterialsPackageDetails");
                        }
                    });
                }
            });
        });
    },

    OnSuccessProductionOrderMaterialsPackageDocumentCreate: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridMaterialsPackageDocument", function () {
                RefreshMainDetails(ajaxContext);
                ShowSuccessMessage("Документ сохранен.", "messageProductionOrderMaterialsPackageDocument");
            });
        });
    },

    RefreshMainDetails: function (model) {
        $("#PakageSize").text(model.PakageSize);
        $("#DocumentCount").text(model.DocumentCount);
        $("#LastChangeDate").text(model.LastChangeDate);
    },

    OnSuccessProductionOrderMaterialsPackageDocumentEdit: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridMaterialsPackageDocument", function () {
                ShowSuccessMessage("Документ сохранен.", "messageProductionOrderMaterialsPackageDocument");
            });
        });
    }
};﻿var ProductionOrderMaterialsPackage_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#btnBack").click(function () {
                window.location = $("#BackURL").val();
            });

            $("#ProductionOrder").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/SelectProductionOrderForMaterialsPackageAdding",
                    success: function (result) {
                        $("#selectProductionOrder").hide().html(result);
                        $.validator.unobtrusive.parse($("#selectProductionOrder"));
                        ShowModal("selectProductionOrder");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageMaterialsPackageEdit");
                    }
                });
            });

            $(".select").live("click", function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                var name = $(this).parent("td").parent("tr").find(".Name").text();

                $("#ProductionOrderId").val(id);
                $("#ProductionOrder").text(name);

                HideModal();
            });

        });
    },

    OnBeginMaterialsPackageEdit: function () {
        StartButtonProgress($("#btnMaterialsPackageSave"));
    },

    OnSuccessMaterialsPackageEdit: function (ajaxContext) {
        var isNew = $("#Id").val().length == 0; 
        if (isNew) {
            window.location = "/ProductionOrderMaterialsPackage/Details?id=" + ajaxContext.Id + "&backURL=" + $("#BackURL").val();
        } else {
            window.location = $("#BackURL").val();
        }
    },

    OnFailMaterialsPackageEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageMaterialsPackageEdit");
    }
};﻿var ProductionOrderMaterialsPackage_MaterialsPackageDocumentCreate = {
    Init: function () {
        $(document).ready(function () {
            var upload = new AjaxUpload($('#file_upload_button'),
                {
                    // Отправляем 
                    autoSubmit: false,               // Отправлять ли файл сразу после выбора
                    action: '/ProductionOrderMaterialsPackage/ProductionOrderMaterialsPackageDocumentSave',    // Куда отправлять
                    name: 'myfile',                 // Имя переменной для хранения файла.
                    response: 'json',                // Ответ сервера.

                    // Срабатывает перед загрузкой файла
                    // Тоже можно вернуть false для отмены.
                    onSubmit: function (file, extension) {
                        $("#btnClose").addClass("disabled").attr("disabled", "disabled");
                        $("#Description").addClass("disabled").attr("disabled", "disabled");
                        $("#FileName").addClass("disabled").attr("disabled", "disabled");
                        $("#file_upload_button").addClass("hidden");

                        upload.setData({ "DocumentId": $("#DocumentId").val(), "PackageId": $("#PackageId").val(), "Description": $("#Description").val() });
                    },

                    onChange: function (file, extension) {
                        $("#FileName").val(file);
                        $("#btnSave").removeClass("disabled").removeAttr("disabled");
                    },

                    // Выполняется после получения ответа от сервера.
                    // file - имя файла, который указал клиент.
                    // response - ответ сервера.
                    onComplete: function (file, response) {
                        var resultObject = eval('(' + response + ')');

                        upload.destroy();
                        OnSuccessProductionOrderMaterialsPackageDocumentCreate(resultObject.obj);
                    }
                });

            $("#btnSave").click(function () {
                StartButtonProgress($("#btnSave"));
                upload.submit();
            });
        });
    }
};﻿var ProductionOrderMaterialsPackage_MaterialsPackageDocumentGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridMaterialsPackageDocument table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrderMaterialsPackage/DownloadProductionOrderMaterialsPackageDocument?id=" + id);
            });

            $("#btnAddMaterial").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderMaterialsPackage/ProductionOrderMaterialsPackageDocumentCreate",
                    data: { id: $("#Id").val() },
                    success: function (result) {
                        $("#productionOrderMaterialsPackageDocumentEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderMaterialsPackageDocumentEdit"));
                        ShowModal("productionOrderMaterialsPackageDocumentEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderMaterialsPackageDocument");
                    }
                });
            });

            $(".edit").click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderMaterialsPackage/ProductionOrderMaterialsPackageDocumentEdit",
                    data: { id: id },
                    success: function (result) {
                        $("#productionOrderMaterialsPackageDocumentEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderMaterialsPackageDocumentEdit"));
                        ShowModal("productionOrderMaterialsPackageDocumentEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderMaterialsPackageDocument");
                    }
                });
            });

            $(".delete").click(function () {
                if (confirm("Вы действительно хотите удалить документ?")) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "GET",
                        url: "/ProductionOrderMaterialsPackage/ProductionOrderMaterialsPackageDocumentDelete",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridMaterialsPackageDocument", function () {
                                RefreshMainDetails(result);
                                ShowSuccessMessage("Документ удален.", "messageProductionOrderMaterialsPackageDocument");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderMaterialsPackageDocument");
                        }
                    });
                }
            });
        });
    }
};﻿var ProductionOrderMaterialsPackage_MaterialsPackageGrid = {
    Init: function () {
        $(document).ready(function () {

            var currentUrl = $("#currentUrl").val();
            $("#gridMaterialsPackage table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/ProductionOrderMaterialsPackage/Details?id=" + id + "&backURL=" + currentUrl);

                var productionOrderId = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + "&backURL=" + currentUrl);
            });

            $("#btnCreateMaterialsPackage").click(function () {
                window.location = "/ProductionOrderMaterialsPackage/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var ProductionOrderPayment_List = {
    Init: function () {
        $("#productionOrderPaymentEdit #linkChangePaymentCurrencyRate").live("click", function () {
            var currencyId = $("#productionOrderPaymentEdit #PaymentCurrencyId").val();
            if (!IsDefaultOrEmpty(currencyId)) {
                $.ajax({
                    type: "GET",
                    url: "/Currency/SelectCurrencyRate",
                    data: { currencyId: currencyId, selectFunctionName: "OnProductionOrderPaymentEditCurrencyRateSelectLinkClick" },
                    success: function (result) {
                        $("#currencyRateSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#currencyRateSelector"));
                        ShowModal("currencyRateSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentEdit");
                    }
                });
            }
        });
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора курсов валюты из формы редактирования оплаты
    OnProductionOrderPaymentEditCurrencyRateSelectLinkClick: function (currencyId, currencyRateId, currencyRate, currencyRateForEdit, currencyRateStartDate) {
        var productionOrderPaymentId = $("#productionOrderPaymentEdit #ProductionOrderPaymentId").val();
        $.ajax({
            type: "POST",
            url: "/ProductionOrderPayment/ChangeProductionOrderPaymentCurrencyRate",
            data: { productionOrderPaymentId: productionOrderPaymentId, currencyRateId: currencyRateId },
            success: function (result) {
                // Обновление модальной формы
                $("#productionOrderPaymentEdit #PaymentCurrencyRateId").val(productionOrderPaymentId);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateName").text(result.PaymentCurrencyRateName);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateString").text(result.PaymentCurrencyRateString);
                $("#productionOrderPaymentEdit #PaymentCurrencyRateValue").val(result.PaymentCurrencyRateValue);
                ProductionOrder_Details.RecalculateProductionOrderPaymentSumInBaseCurrency();

                RefreshGrid("gridProductionOrderPayment", function () {

                    var productionOrderPlannedPaymentId = $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentId").val();
                    // Если плановый платеж указан, то ...
                    if (productionOrderPaymentId != "00000000-0000-0000-0000-000000000000") {
                        // ... запрашиваем детали плановой оплаты
                        $.ajax({
                            type: "POST",
                            url: "/ProductionOrder/GetPlannedPaymentInfo",
                            data: { productionOrderPlannedPaymentId: productionOrderPlannedPaymentId },
                            success: function (result) {
                                // Обновление полей
                                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentSumInCurrency").text(result.PlannedPaymentSumInCurrency);
                                $("#productionOrderPaymentEdit .ProductionOrderPlannedPaymentCurrencyLiteralCode").text(result.PlannedPaymentCurrencyLiteralCode);
                                $("#productionOrderPaymentEdit #ProductionOrderPlannedPaymentPaidSumInBaseCurrency").text(result.PaymentSumInBaseCurrency);
                                HideModal(function () {
                                    ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                                });
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
                            }
                        });
                    } else {    // иначе закрываем МФ
                        HideModal(function () {
                            ShowSuccessMessage("Курс оплаты сохранен.", "messageProductionOrderPaymentEdit");
                        });
                    }

                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageCurrencyEdit");
            }
        });
    }
};﻿var ProductionOrderPayment_ProductionOrderPaymentGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderPayment table.grid_table tr").each(function () {
                var productionOrderId = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + GetBackUrl());

                var producerId = $(this).find(".ProducerId").text();
                $(this).find("a.ProducerName").attr("href", "/Producer/Details?id=" + producerId + GetBackUrl());
            });

            $("#gridProductionOrderPayment .linkPaymentDetails").click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrderPayment/Details",
                    data: { productionOrderPaymentId: id },
                    success: function (result) {
                        $("#productionOrderPaymentEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderPaymentEdit"));
                        ShowModal("productionOrderPaymentEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentList");
                    }
                });
            });

            $("#gridProductionOrderPayment .linkPaymentDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                    var paymentId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteProductionOrderPayment/",
                        data: { productionOrderId: productionOrderId, paymentId: paymentId },
                        success: function (result) {
                            RefreshGrid("gridProductionOrderPayment", function () {
                                ShowSuccessMessage("Оплата удалена.", "messageProductionOrderPaymentList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderPaymentList");
                        }
                    });
                }
            });

        });

    }
};﻿var ProductionOrderTransportSheet_ProductionOrderTransportSheetGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProductionOrderTransportSheet table.grid_table tr").each(function () {
                var productionOrderId = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + productionOrderId + GetBackUrl());                
            });


            $("#gridProductionOrderTransportSheet .linkTransportSheetEdit").click(function () {
                var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                var transportSheetId = $(this).parent("td").parent("tr").find(".Id").text();
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/EditProductionOrderTransportSheet",
                    data: { productionOrderId: productionOrderId, transportSheetId: transportSheetId },
                    success: function (result) {
                        $("#productionOrderTransportSheetEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderTransportSheetEdit"));
                        ShowModal("productionOrderTransportSheetEdit");
                        $("#productionOrderTransportSheetEdit #ForwarderName").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderTransportSheetList");
                    }
                });
            });

            $("#gridProductionOrderTransportSheet .linkTransportSheetDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var productionOrderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();
                    var transportSheetId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ProductionOrder/DeleteProductionOrderTransportSheet/",
                        data: { productionOrderId: productionOrderId, transportSheetId: transportSheetId },
                        success: function (result) {
                            RefreshGrid("gridProductionOrderTransportSheet", function () {
                                ShowSuccessMessage("Транспортный лист удален.", "messageProductionOrderTransportSheetList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderTransportSheetList");
                        }
                    });
                }
            });
        });
    },

    OnSuccessProductionOrderTransportSheetEdit: function (ajaxContext) {
        RefreshGrid("gridProductionOrderTransportSheet", function () {
            HideModal(function () {
                ShowSuccessMessage("Сохранено.", "messageProductionOrderTransportSheetList");
            });
        });
    },

    OnFailProductionOrderTransportSheetEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProductionOrderTransportSheetEdit");
    }
};﻿var Provider_ContractEdit = {
    Init: function () {
        $(document).ready(function () {
            // Вывод модальной формы "Добавление собственной организации"
            $("#linkAccountOrganizationSelector.select_link").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/AccountOrganization/SelectAccountOrganization",
                    success: function (result) {
                        $("#accountOrganizationSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationSelector"));
                        ShowModal("accountOrganizationSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageContractEdit");
                    }
                });
            });

            // Вывод модальной формы "Добавление связанной организации"
            $("#linkProviderOrganizationSelector.select_link").click(function () {
                var providerId = $('#MainDetails_Id').val();
                $.ajax({
                    type: "GET",
                    url: "/Provider/SelectContractorOrganization",
                    data: { providerId: providerId, mode: "includeprovider" },
                    success: function (result) {
                        $("#contractorOrganizationSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#contractorOrganizationSelector"));
                        ShowModal("contractorOrganizationSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageContractEdit");
                    }
                });
            });
        });
    }
};﻿var Provider_ContractGrid = {
    Init: function () {
        $(document).ready(function () {

            $("#gridProviderContract table.grid_table tr").each(function () {
                var id = $(this).find(".ContractorId").text();
                $(this).find("a.Provider").attr("href", "/Provider/Details?id=" + id + GetBackUrl());

                id = $(this).find(".AccountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + id + GetBackUrl());

                id = $(this).find(".ProviderOrganizationId").text();
                $(this).find("a.ProviderOrganizationName").attr("href", "/ProviderOrganization/Details?id=" + id + GetBackUrl());
            });

            // Вывод модальной формы "Добавление договора"
            $("#btnAddContract").click(function () {
                var providerId = $('#MainDetails_Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Provider/CreateContract",
                    data: { providerId: providerId },
                    success: function (result) {
                        $("#providerContractEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#providerContractEdit"));
                        ShowModal("providerContractEdit");
                        $("#providerContractEdit #Number").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageContractList");
                    }
                });
            });

            // Удалить договор
            $("#gridProviderContract .linkProviderContractDelete").click(function () {
                if (confirm('Вы действительно хотите удалить договор?')) {
                    var providerId = $('#MainDetails_Id').val();
                    var contractId = $(this).parent("td").parent("tr").find(".providerContractId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Provider/DeleteContract/",
                        data: { providerId: providerId, contractId: contractId },
                        success: function (result) {
                            RefreshGrid("gridProviderContract", function () {
                                RefreshMainDetails(result);
                                ShowSuccessMessage("Договор удален.", "messageContractList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageContractList");
                        }
                    });
                }
            });

            // Редактировать договор
            $("#gridProviderContract .linkProviderContractEdit").click(function () {
                var providerId = $('#MainDetails_Id').val();
                var contractId = $(this).parent("td").parent("tr").find(".providerContractId").text();
                $.ajax({
                    type: "GET",
                    url: "/Provider/EditContract",
                    data: { providerId: providerId, contractId: contractId },
                    success: function (result) {
                        $('#providerContractEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#providerContractEdit"));
                        ShowModal("providerContractEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageContractList");
                    }
                });
            });
        });
    }
};﻿var Provider_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#btnBack").click(function () {
                window.location = $("#BackURL").val();
            });

            // Редактировать
            $("#btnEditProvider").click(function () {
                var providerId = $("#MainDetails_Id").val();
                window.location = "/Provider/Edit?id=" + providerId + GetBackUrl();
            });

            // Удалить поставщика
            $("#btnDeleteProvider").click(function () {
                if (confirm('Вы уверены?')) {
                    var providerId = $("#MainDetails_Id").val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/Provider/Delete/",
                        data: { providerId: providerId },
                        success: function () {
                            window.location = $("#BackURL").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderDetails");
                        }
                    });
                }
            });

        });  // document ready
    },
    // обновление изменяющихся деталей шапки
    RefreshMainDetails: function (details) {
        $("#ProviderOrganizationCount").text(details.ProviderOrganizationCount);
        $("#ContractCount").text(details.ContractCount);
    },

    // после успешного создания новой организации и добавления ее поставщику
    OnSuccessOrganizationEdit: function (result) {
        RefreshGrid("gridProviderOrganization", function () {
            HideModal();
            HideModal();
            Provider_Details.RefreshMainDetails(result);
            // Хак, потом переделать
            if ($("div.modal").length == 0) { // если выбрана организация для добавления поставщику
                ShowSuccessMessage("Организация создана и добавлена в список организаций поставщика.", "messageProviderOrganizationList");
            }
            else { // если выбрана организация для создания по ней договора
                $("#providerContractEdit #ProviderOrganizationId").val(result.ContractorOrganizationId);
                $("#providerContractEdit #ProviderOrganizationId").ValidationValid();
                $("#providerContractEdit #ProviderOrganizationName").text(result.ContractorOrganizationShortName);
                ShowSuccessMessage("Организация создана и добавлена в список организаций поставщика.", "messageProviderOrganizationList");
            }
        });
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора собственных организаций (при создании договора)
    OnAccountOrganizationSelectLinkClick: function (accountOrganizationId, accountOrganizationShortName) {
        $("#providerContractEdit #AccountOrganizationId").val(accountOrganizationId);
        $("#providerContractEdit #AccountOrganizationId").ValidationValid();
        $("#providerContractEdit #AccountOrganizationName").text(accountOrganizationShortName);
        HideModal();
    },

    // Пользователь щелкнул на ссылку "Выбрать" в гриде выбора организаций контрагента
    // Грид может быть вызван для добавления организации поставщику (как 1 уровень) и для выбора организации в договор (как 2 уровень)
    OnContractorOrganizationSelectLinkClick: function (organizationId, organizationShortName) {
        // Хак, потом переделать
        if ($("div.modal2").length == 0) { // если выбрана организация для добавления поставщику
            Provider_Details.AddContractorOrganizationToProvider(organizationId);
        }
        else { // если выбрана организация для создания по ней договора
            $("#providerContractEdit #ProviderOrganizationId").val(organizationId);
            $("#providerContractEdit #ProviderOrganizationId").ValidationValid();
            $("#providerContractEdit #ProviderOrganizationName").text(organizationShortName);
            HideModal();
        }
    },

    AddContractorOrganizationToProvider: function (organizationId) {
        var providerId = $("#MainDetails_Id").val();
        $.ajax({
            type: "POST",
            url: "/Provider/AddContractorOrganization/",
            data: { providerId: providerId, organizationId: organizationId },
            success: function (result) {
                RefreshGrid("gridProviderOrganization", function () {
                    Provider_Details.RefreshMainDetails(result);
                    ShowSuccessMessage("Организация добавлена.", "messageProviderOrganizationList");
                    HideModal();
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageOrganizationSelectList");
            }
        });
    },

    OnSuccessContractEdit: function (result) {
        RefreshGrid("gridProviderOrganization", function () {
            RefreshGrid("gridProviderContract", function () {
                Provider_Details.RefreshMainDetails(result);
                if ($("#providerContractEdit #Id").val() != "0")
                    ShowSuccessMessage("Сохранено.", "messageContractList");
                else
                    ShowSuccessMessage("Договор создан.", "messageContractList");
                HideModal();
            });
        });
    },

    OnFailContractEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageContractEdit");
    },

    OnSuccessEconomicAgentTypeSelect: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#economicAgentEdit").html(ajaxContext);
                $.validator.unobtrusive.parse($("#economicAgentEdit"));
                ShowModal("economicAgentEdit");
            });
        });
    }
};﻿var Provider_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();

            $("#btnBack").click(function () {
                window.location = $("#BackURL").val();
            });

            $("#btnAddProviderType").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ProviderType/Create",
                    success: function (result) {
                        $("#providerTypeEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#providerTypeEdit"));
                        ShowModal("providerTypeEdit");
                        $("#providerTypeEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderEdit");
                    }
                });
            });

        }); // document ready        
    },

    OnSuccessProviderTypeEdit: function (ajaxContext) {
        $.ajax({
            type: "GET",
            url: "/Provider/GetProviderTypes",
            success: function (result) {
                $("#Type").fillSelect(result);
                $("#Type").attr("value", ajaxContext.Id);
                ShowSuccessMessage("Тип поставщика добавлен.", "messageProviderEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderEdit");
            }
        });

        HideModal();
    },

    OnFailProviderSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProviderEdit");
    },

    OnSuccessProviderSave: function (ajaxContext) {
        window.location = "/Provider/Details?id=" + ajaxContext + "&backURL=/Provider/List";
    }
};﻿var Provider_List = {    
     OnSuccessProviderSave:function(ajaxContext) {
            RefreshGrid("gridProvider", function () {
                ShowSuccessMessage("Поставщик добавлен.", "messageProviderList");
            });
            HideModal();
        }
};﻿var Provider_List_ProviderGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            
            $("#gridProvider table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Provider/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $('#btnCreateProvider').click(function () {
                window.location = "/Provider/Create?" + GetBackUrl(true);
            });
        });
    }
};﻿var Provider_OrganizationGrid = {
    Init: function () {
        $(document).ready(function () {

            var currentUrl = $("#currentUrl").val();
            $("#gridProviderOrganization table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.ShortName").attr("href", "/ProviderOrganization/Details?id=" + id + "&backURL=" + currentUrl);
            });

            // Удалить организацию поставщика
            $("#gridProviderOrganization .linkProviderOrganizationDelete").click(function () {
                if (confirm('Вы уверены?')) {
                    var providerId = $('#MainDetails_Id').val();
                    var providerOrganizationId = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Provider/RemoveProviderOrganization/",
                        data: { providerId: providerId, providerOrganizationId: providerOrganizationId },
                        success: function (result) {
                            RefreshGrid("gridProviderOrganization", function () {
                                RefreshMainDetails(result);
                                ShowSuccessMessage("Организация удалена из списка.", "messageProviderOrganizationList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderOrganizationList");
                        }
                    });
                }
            });

            // Вывод модальной формы "Добавление связанной организации"
            $("#btnAddOrganization").click(function () {
                var providerId = $('#MainDetails_Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Provider/SelectContractorOrganization",
                    data: { providerId: providerId, mode: "excludeprovider" },
                    success: function (result) {
                        $("#contractorOrganizationSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#contractorOrganizationSelector"));
                        ShowModal("contractorOrganizationSelector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderOrganizationList");
                    }
                });
            });
        });
    }
};﻿var Provider_ReceiptWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridReceiptWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".ReceiptWaybillId").text();
                $(this).find("a.Number").attr("href", "/ReceiptWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                id = $(this).find(".ReceiptStorageId").text();
                $(this).find("a.ReceiptStorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
            
            // Кнопка "Создать новую накладную"
            $("#btnCreateReceiptWaybill").click(function () {
                window.location = "/ReceiptWaybill/Create?providerId=" + $("#MainDetails_Id").val() + GetBackUrl();
            });
        });
    }
};
﻿var ProviderOrganization_Details = {
    Init: function () {
        $(document).ready(function () {
            $('#btnBack').click(function () {
                window.location = $('#BackURL').val();
            });

            $('#btnAddRussianBankAccount').live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ProviderOrganization/AddRussianBankAccount/",
                    data: { providerOrganizationId: $('#Id').val() },
                    success: function (result) {
                        $('#RussianBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#RussianBankAccountEdit"));
                        ShowModal("RussianBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            //Добавление счета в иностранном банке
            $('#btnAddForeignBankAccount').live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ProviderOrganization/AddForeignBankAccount/",
                    data: { providerOrganizationId: $('#Id').val() },
                    success: function (result) {
                        $('#ForeignBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#ForeignBankAccountEdit"));
                        ShowModal("ForeignBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $(".linkRussianBankAccountEdit").live("click", function () {
                var bankAccountId = $(this).parent("td").parent("tr").find(".BankAccountId").text();
                $.ajax({
                    type: "GET",
                    url: "/ProviderOrganization/EditRussianBankAccount/",
                    data: { providerOrganizationId: $('#Id').val(), bankAccountId: bankAccountId },
                    success: function (result) {
                        $('#RussianBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#RussianBankAccountEdit"));
                        ShowModal("RussianBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                    }
                });
            });

            //Редактирование счета в иностранном банке
            $(".linkForeignBankAccountEdit").live("click", function () {
                var bankAccountId = $(this).parent("td").parent("tr").find(".BankAccountId").text();
                $.ajax({
                    type: "GET",
                    url: "/ProviderOrganization/EditForeignBankAccount/",
                    data: { providerOrganizationId: $('#Id').val(), bankAccountId: bankAccountId },
                    success: function (result) {
                        $('#ForeignBankAccountEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#ForeignBankAccountEdit"));
                        ShowModal("ForeignBankAccountEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                    }
                });
            });

            $(".linkRussianBankAccountDelete").live("click", function () {
                var bankAccountId = $(this).parent("td").parent("tr").find(".BankAccountId").text();

                if (confirm("Вы действительно хотите удалить расчетный счет?")) {
                    StartGridProgress($(this).closest(".grid"));
                    
                    $.ajax({
                        type: "POST",
                        url: "/ProviderOrganization/RemoveRussianBankAccount/",
                        data: { providerOrganizationId: $('#Id').val(), bankAccountId: bankAccountId },
                        success: function (result) {
                            RefreshGrid("gridRussianBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageRussianBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageRussianBankAccountList");
                        }
                    });
                }
            });

            //Удаление счета в иностранном банке
            $(".linkForeignBankAccountDelete").live("click", function () {
                var bankAccountId = $(this).parent("td").parent("tr").find(".BankAccountId").text();

                if (confirm("Вы действительно хотите удалить расчетный счет?")) {
                    StartGridProgress($(this).closest(".grid"));
                    
                    $.ajax({
                        type: "POST",
                        url: "/ProviderOrganization/RemoveForeignBankAccount/",
                        data: { providerOrganizationId: $('#Id').val(), bankAccountId: bankAccountId },
                        success: function (result) {
                            RefreshGrid("gridForeignBankAccounts", function () {
                                ShowSuccessMessage("Расчетный счет удален.", "messageForeignBankAccountList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageForeignBankAccountList");
                        }
                    });
                }
            });

            // редактирование организации
            $("#btnEditProviderOrganization").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/ProviderOrganization/Edit",
                    data: { providerOrganizationId: $('#Id').val() },
                    success: function (result) {
                        $('#organizationEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#organizationEdit"));
                        ShowModal("organizationEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderOrganizationEdit");
                    }
                });
            });

            // удаление организации
            $("#btnDeleteProviderOrganization").click(function () {
                if (confirm('Вы действительно хотите удалить организацию?')) {
                    StartButtonProgress($(this));

                    $.ajax({
                        type: "POST",
                        url: "/ProviderOrganization/Delete/",
                        data: { providerOrganizationId: $('#Id').val() },
                        success: function () {
                            window.location = $("#BackURL").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderOrganizationEdit");
                        }
                    });
                }
            });

        });    // document ready       
     },

    OnSuccessRussianBankAccountAdd: function (ajaxContext) {
        RefreshGrid("gridRussianBankAccounts", function () {
            ShowSuccessMessage("Расчетный счет добавлен.", "messageRussianBankAccountList");
            HideModal();
        });
    },

    OnSuccessForeignBankAccountAdd: function (ajaxContext) {
        RefreshGrid("gridForeignBankAccounts", function () {
            ShowSuccessMessage("Расчетный счет добавлен.", "messageForeignBankAccountList");
            HideModal();
        });
    },

    OnSuccessRussianBankAccountEdit: function (ajaxContext) {
        RefreshGrid("gridRussianBankAccounts", function () {
            ShowSuccessMessage("Расчетный счет сохранен.", "messageRussianBankAccountList");
            HideModal();
        });
    },

    OnSuccessForeignBankAccountEdit: function (ajaxContext) {
        RefreshGrid("gridForeignBankAccounts", function () {
            ShowSuccessMessage("Расчетный счет сохранен.", "messageForeignBankAccountList");
            HideModal();
        });
    },

    OnSuccessProviderOrganizationEdit:function(ajaxContext) {
        $.ajax({
            type: "GET",
            url: "/ProviderOrganization/ShowMainDetails",
            data: { providerOrganizationId: $('#Id').val() },
            success: function (result) {
                $('#providerOrganizationMainDetails').html(result);
                $.validator.unobtrusive.parse($("#providerOrganizationMainDetails"));
                $('.page_title_item_name').text($('#providerOrganizationMainDetails #ShortName').text());
                ShowSuccessMessage("Сохранено.", "messageProviderOrganizationEdit");
                HideModal();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderOrganizationEdit");
            }
        });
    }
};﻿var ProviderOrganization_Details_ProviderContractsGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridProviderContract table.grid_table tr").each(function () {
                var id = $(this).find(".ProviderId").text();
                $(this).find("a.ProviderName").attr("href", "/Provider/Details?id=" + id + GetBackUrl());

                id = $(this).find(".AccountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + id + GetBackUrl());
            });
        });
    }
};﻿var ProviderOrganization_Details_ReceiptWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridReceiptWaybill table.grid_table tr").each(function () {
                var id = $(this).find(".ReceiptWaybillId").text();
                $(this).find("a.Number").attr("href", "/ReceiptWaybill/Details?id=" + id + GetBackUrl());

                id = $(this).find(".ReceiptStorageId").text();
                $(this).find("a.ReceiptStorage").attr("href", "/Storage/Details?id=" + id + GetBackUrl());
            });
        });
    }
};﻿var ProviderType_Edit = {
    OnBeginProviderTypeSave: function () {
        StartButtonProgress($("#btnSaveProviderType"));
    },

    OnFailProviderTypeSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageProviderTypeEdit");
    }
};
﻿var ProviderType_List = {
    OnSuccessProviderTypeSave: function () {
        HideModal();
        RefreshGrid("gridProviderType", function () {
            ShowSuccessMessage("Сохранено.", "messageProviderTypeList");
        });
    }
};
﻿var ProviderType_ProviderTypeGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateProviderType').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ProviderType_ProviderTypeGrid.ShowProviderTypeDetailsForEdit(id);
            });

            $('#gridProviderType .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ProviderType_ProviderTypeGrid.ShowProviderTypeDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ProviderType";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridProviderType", function () {
                                ShowSuccessMessage("Удалено.", "messageProviderTypeList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderTypeList");
                        }
                    });
                }
            });
        });
    },

    ShowProviderTypeDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ProviderType";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#providerTypeEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#providerTypeEdit"));
                ShowModal("providerTypeEdit");
                $("#providerTypeEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageProviderTypeList");
            }
        });
    }
};
﻿var ReceiptWaybill_AddWaybillRowFromReceipt = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#ReceiptedCount", 12, 0, "#receiptArticleAdd", false);
            SetFieldScale("#ProviderCount", 12, 0, "#receiptArticleAdd", true);
        });

        // Переход к выбору товара
        $("span#ArticleName.select_link").bind("click", function () {
            $.ajax({
                type: "GET",
                url: "/Article/SelectArticle",
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    ReceiptWaybill_AddWaybillRowFromReceipt.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowAdd");
                }
            });
        });

        $("#ManufacturerName.select_link").click(function () {
            $.ajax({
                type: "GET",
                url: "/Manufacturer/SelectManufacturer/",
                success: function (result) {
                    $('#manufacturerAdd').hide().html(result);
                    $.validator.unobtrusive.parse($("#manufacturerAdd"));
                    ShowModal("manufacturerAdd");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowAdd");
                }
            });
        });

        // Обрабатываем выбор фабрики-изготовителя
        $("#manufacturerAdd .select").live("click", function () {
            var manufacturerId = $(this).parent("td").parent("tr").find(".Id").html();
            var manufacturerName = $(this).parent("td").parent("tr").find(".ManufacturerName").html();

            $("#ManufacturerName").html(manufacturerName);
            $("#ManufacturerId").val(manufacturerId);

            HideModal();
        });

        $("#AddCountry").click(function () {
            $.ajax({
                type: "GET",
                url: "/Country/Create/",
                success: function (result) {
                    $('#countryAdd').hide().html(result);
                    $.validator.unobtrusive.parse($("#countryAdd"));
                    ShowModal("countryAdd");
                    $("#countryAdd #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowAdd");
                }
            });
        });
    },

    // При успешной попытке добавления строки в накладную
    OnSuccessReceiptWaybillRowAdd: function () {
        ReceiptWaybill_Receipt.SuccessAddedRowToWaybill();
    },

    // При ошибке добавления строки в накладную
    OnFailReceiptWaybillRowAdd: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageReceiptWaybillRowAdd");
    },

    OnSuccessCountrySave: function (ajaxContext) {
        HideModal();
        $.ajax({
            type: "GET",
            url: "/Country/GetList/",
            success: function (result) {
                $("#ProductionCountryId").fillSelect(result);
                $("#ProductionCountryId").val(ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowAdd");
            }
        });
    },

    OnSuccessManufacturerSave: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#receiptArticleAdd #ManufacturerId").val(ajaxContext.Id);
                $("#receiptArticleAdd #ManufacturerName").text(ajaxContext.Name);
            })
        });
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $('#measureUnitNameOfReceiptedCount').text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());
            $('#measureUnitNameOfProviderCount').text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());
            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#ReceiptedCount", 12, measureUnitScale, "#receiptArticleAdd", false);
            SetFieldScale("#ProviderCount", 12, measureUnitScale, "#receiptArticleAdd", true);

            $.ajax({
                type: "POST",
                url: "/ReceiptWaybill/GetArticleInfo/",
                data: { articleId: $("#ArticleId").val() },
                success: function (result) {
                    $('#ProductionCountryId').attr('value', result.ProductionCountryId);
                    $('#ManufacturerId').val(result.ManufacturerId);
                    $('#ManufacturerName').text(result.ManufacturerName);

                    if (result.ProductionCountryId == "") {
                        $('#ProductionCountryId').focus();
                    }
                    else {
                        if (result.ManufacturerId == "") {
                            $('#ProductionCountryId').focus();
                        }
                        else {
                            $("#ReceiptedCount").focus();
                        }
                    }
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowAdd");
                }
            });

            HideModal();
        });
    }
}; ﻿ReceiptWaybill_Approve = {
    Init: function () {
        $(document).ready(function () {
            ReceiptWaybill_Approve.DisableZeroCountRows();
            ReceiptWaybill_Approve.SetGridFieldAttributes();

            $('#btnCloseApprovement').live('click', function () {
                var waybillId = $("#WaybillId").val();
                window.location = '/ReceiptWaybill/Details?id=' + waybillId + GetBackUrlFromString($('#BackURL').val());
            });

            // Обработка изменения кол-ва согласованного товара
            $("#gridApproveArticles input.approveArticleCount").live("change", function () {
                ReceiptWaybill_Approve.UpdateEditableSumParameter($(this));
            });

            var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();

            if (IsTrue(allowToViewPurchaseCosts)) {
                $("#gridApproveArticles input.ApprovedSum").live("change", function () {
                    ReceiptWaybill_Approve.UpdateEditableSumParameter($(this));
                });

                $("#gridApproveArticles input.ApprovedPurchaseCost").live("change", function () {
                    ReceiptWaybill_Approve.UpdateEditableSumParameter($(this));
                });

                $('#TotalApprovedSum').live('change', function () {
                    var approvedSumValid = CheckValueScale($(this).val(), 2, 16);
                    var approvedSum = TryGetDecimal($(this).val());

                    if (approvedSumValid && approvedSum >= 0) {
                        $('[data-valmsg-for="TotalApprovedSum"]').removeClass("field-validation-error").addClass("field-validation-valid");
                        $(this).removeClass("field-validation-error");
                    }
                    else {
                        $('[data-valmsg-for="TotalApprovedSum"]').removeClass("field-validation-valid").addClass("field-validation-error");
                        $(this).addClass("field-validation-error");
                    }
                });
            }

            // Изменение выпадающего списка с НДС
            $(".ApprovedValueAddedTax").live("change", function () {
                // Пересчитываем НДС в текущей строке
                ReceiptWaybill_Approve.CalcValueAddedTaxForArticle($(this).parent("td").parent("tr"));

                var valueAddedTaxId = TryGetDecimal($(this).find("option:selected").val());

                if (!isNaN(valueAddedTaxId)) {
                    var waybillId = $("#WaybillId").val();
                    var rowId = $(this).parent("td").parent("tr").find(".rowId").text();
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/EditWaybillRowValueAddedTaxFromApprovement/",
                        data: { waybillId: waybillId, rowId: rowId, valueAddedTaxId: valueAddedTaxId },
                        success: function (result) {
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageEditApproveCount");
                        }
                    });
                }
            });

            // выполнение согласования
            $('#btnApprove').live('click', function () {
                if (ReceiptWaybill_Approve.ValidateApprove()) {
                    var waybillId = $("#WaybillId").val();
                    var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();
                    if (IsTrue(allowToViewPurchaseCosts))
                        var approvedSum = TryGetDecimal($('#TotalApprovedSum').val(), 2);
                    else
                        var approvedSum = -1;

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/PerformApprovement",
                        data: { waybillId: waybillId, sum: approvedSum },
                        success: function (result) {
                            window.location = "/ReceiptWaybill/Details?Id=" + waybillId + GetBackUrlFromString($('#BackURL').val());
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageApproveWaybill");
                        }
                    });
                }
            });

            //Согласование задним числом
            $("#btnApproveRetroactively").live('click', function () {
                if (ReceiptWaybill_Approve.ValidateApprove()) {
                    StartButtonProgress($(this));
                    $.ajax({
                        type: "GET",
                        url: "/ReceiptWaybill/ApproveRetroactively",
                        success: function (result) {
                            $('#dateTimeSelector').hide().html(result);
                            $.validator.unobtrusive.parse($("#dateTimeSelector"));
                            BindRetroactivelyApprovementDateSelection();
                            ShowModal("dateTimeSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageApproveWaybill");
                        }
                    });
                }
            });

            function BindRetroactivelyApprovementDateSelection() {
                $('#btnSelectDateTime').click(function (e) {

                    e.preventDefault();
                    if (!$('#dateTimeSelectForm').valid()) return false;

                    var receiptWaybillId = $("#WaybillId").val();
                    var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();
                    if (IsTrue(allowToViewPurchaseCosts))
                        var approvedSum = TryGetDecimal($('#TotalApprovedSum').val(), 2);
                    else
                        var approvedSum = -1;
                    var dateTime = $("#dateTimeSelector #Date").val() + " " + $("#dateTimeSelector #Time").val();

                    StartButtonProgress($("#btnSelectDateTime"));

                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/ApproveRetroactively",
                        data: { receiptWaybillId: receiptWaybillId, approvementDate: dateTime, approvedSum: approvedSum },
                        success: function (result) {
                            HideModal(function () {
                                window.location = "/ReceiptWaybill/Details?Id=" + receiptWaybillId + GetBackUrlFromString($('#BackURL').val());
                                });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDateSelect");
                        }
                    });
                });
            }
        });
    },

    // Действия при изменении одного из показателей по позиции, влияющих на итоговую стоимость (согл. зак. цена / кол-во товара / согл. сумма по позиции)
    UpdateEditableSumParameter: function (_this) {
        var rowId = _this.parent("td").parent("tr").find(".rowId").text();
        var waybillId = $("#WaybillId").val();
        var scale = _this.parent("td").parent("tr").find(".measureUnitScale").text();

        // Признаки, какое из полей изменено (передано нам)
        var approvedCountChanged = _this.hasClass("approveArticleCount");
        var approvedPurchaseCostChanged = _this.hasClass("ApprovedPurchaseCost");
        var approvedSumChanged = _this.hasClass("ApprovedSum");

        // Поля ввода (text edit). Внимание! Функции DisableSumAndPurchaseCost и EnableSumAndPurchaseCost пересоздают эти элементы, после них надо получать заново
        var approvedCountEdit = _this.parent("td").parent("tr").find("input.approveArticleCount");
        var approvedPurchaseCostEdit = _this.parent("td").parent("tr").find("input.ApprovedPurchaseCost");
        var approvedSumEdit = _this.parent("td").parent("tr").find("input.ApprovedSum");

        var approvedSumIsChangedLastSpan = _this.parent("td").parent("tr").find(".ApprovedSumIsChangedLast");

        // Результаты проверки на количество знаков (и корректность формата)
        var approvedCountValid = CheckValueScale(approvedCountEdit.val(), scale, 12);
        var approvedPurchaseCostValid = CheckValueScale(approvedPurchaseCostEdit.val(), 6, 12);
        var approvedSumValid = CheckValueScale(approvedSumEdit.val(), 2, 16);

        // Сами значения (NaN, если формат некорректен)
        var approvedCount = TryGetDecimal(approvedCountEdit.val());
        var approvedPurchaseCost = TryGetDecimal(approvedPurchaseCostEdit.val());
        var approvedSum = TryGetDecimal(approvedSumEdit.val());

        var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();
        //Если нет прав на просмотр закупочных цен, то ничего пересчитывать не надо, просто отправляем на сервер информацию о изменениях в поле количество
        if (IsFalse(allowToViewPurchaseCosts)) {
            $.ajax({
                type: "POST",
                url: "/ReceiptWaybill/EditWaybillRowFromApprovement/",
                data: { waybillId: waybillId, rowId: rowId, approvedCount: approvedCount, purchaseCost: -1 },
                success: function (result) {
                    _this.addClass("field-validation-success");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    _this.addClass("field-validation-error");
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageEditApproveCount");
                }
            });
            return;
        }

        // Признаки, что в каком-то из полей есть ошибка (возможно, уже давно)
        var approvedCountError = !approvedCountValid || approvedCount < 0;
        var approvedPurchaseCostError = !approvedPurchaseCostValid || approvedPurchaseCost < 0;
        var approvedSumError = !approvedSumValid || approvedSum < 0;

        // Признаки, что в каком-то из полей сразу после его изменения была обнаружена ошибка
        var approvedCountRecentError = approvedCountChanged && approvedCountError;
        var approvedPurchaseCostRecentError = approvedPurchaseCostChanged && approvedPurchaseCostError;
        var approvedSumRecentError = approvedSumChanged && approvedSumError;

        // Пересчитываем показатели в зависимости от того, какой был изменен. Пересчитываемым показателям меняем значения и ставим флаг корректности
        if (approvedCountChanged && approvedCountValid) {
            if (approvedCount == 0) {
                approvedPurchaseCost = 0;
                approvedSum = 0;
                approvedPurchaseCostValid = true; approvedPurchaseCostError = approvedPurchaseCostRecentError = false;
                approvedSumValid = true; approvedSumError = approvedSumRecentError = false;
                ReceiptWaybill_Approve.DisableSumAndPurchaseCost(_this.parent("td").parent("tr"));
            } else {
                if (approvedPurchaseCostValid) {
                    ReceiptWaybill_Approve.EnableSumAndPurchaseCost(_this.parent("td").parent("tr"));
                    approvedSum = BankRound(approvedPurchaseCost * approvedCount, 2);
                    approvedSumValid = true; approvedSumError = approvedSumRecentError = false;
                    // input для approvedPurchaseCost и approvedSum могли быть пересозданы EnableSumAndPurchaseCost() и должны быть получены заново
                    _this.parent("td").parent("tr").find("input.ApprovedSum").val(approvedSum);
                }
            }
        }
        if (approvedPurchaseCostChanged && approvedPurchaseCostValid && approvedCountValid) {
            approvedSum = BankRound(approvedPurchaseCost * approvedCount, 2);
            approvedSumValid = true; approvedSumError = approvedSumRecentError = false;
            approvedSumEdit.val(approvedSum);
            approvedSumIsChangedLastSpan.text("0");
        }
        if (approvedSumChanged && approvedSumValid && approvedCountValid) {
            approvedPurchaseCost = BankRound(approvedSum / approvedCount, 6);
            approvedPurchaseCostValid = true; approvedPurchaseCostError = approvedPurchaseCostRecentError = false;
            approvedPurchaseCostEdit.val(approvedPurchaseCost);
            approvedSumIsChangedLastSpan.text("1");
        }

        // input для approvedPurchaseCost и approvedSum могли быть пересозданы EnableSumAndPurchaseCost/DisableSumAndPurchaseCost и должны быть получены заново
        approvedPurchaseCostEdit = _this.parent("td").parent("tr").find("input.ApprovedPurchaseCost");
        approvedSumEdit = _this.parent("td").parent("tr").find("input.ApprovedSum");

        approvedCountEdit.removeClass("field-validation-error").removeClass("field-validation-success");
        approvedPurchaseCostEdit.removeClass("field-validation-error").removeClass("field-validation-success");
        approvedSumEdit.removeClass("field-validation-error").removeClass("field-validation-success");

        if (approvedCountError) {
            approvedCountEdit.addClass("field-validation-error");
        }
        if (approvedPurchaseCostError) {
            approvedPurchaseCostEdit.addClass("field-validation-error");
        }
        if (approvedSumError) {
            approvedSumEdit.addClass("field-validation-error");
        }

        if (approvedCountRecentError || approvedPurchaseCostRecentError || approvedSumRecentError) {
            if (approvedCountRecentError) {
                if (scale == 0)
                    ShowErrorMessage("Укажите целое число.", "messageEditApproveCount");
                else
                    ShowErrorMessage("Неверно указано количество товара. Допускается не более " + scale + " десятичных знаков.", "messageEditApproveCount");
            }
            if (approvedPurchaseCostRecentError) {
                ShowErrorMessage("Указана неверная закупочная цена товара.", "messageEditApproveCount");
            }
            if (approvedSumRecentError) {
                ShowErrorMessage("Указана неверная сумма товара.", "messageEditApproveCount");
            }
        }

        if (!approvedCountError && !approvedPurchaseCostError && !approvedSumError) {
            var _thisGridRow = _this.parent("td").parent("tr");
            $.ajax({
                type: "POST",
                url: "/ReceiptWaybill/EditWaybillRowFromApprovement/",
                data: { waybillId: waybillId, rowId: rowId, approvedCount: approvedCount, purchaseCost: approvedPurchaseCost },
                success: function (result) {
                    _this.addClass("field-validation-success");

                    // Пересчитываем стоимость накладной
                    ReceiptWaybill_Approve.CalcRowsSum();
                    // Пересчитываем НДС в текущей строке
                    ReceiptWaybill_Approve.CalcValueAddedTaxForArticle(_thisGridRow);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    _this.addClass("field-validation-error");
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageEditApproveCount");
                }
            });
        }
    },

    // Проверяет, включены textedit-ы для закупочной цены и суммы в данной строке грида или отключены.
    IsSumAndPurchaseCostEnabled: function (gridRow) {
        return gridRow.find(".ApprovedSum[type=hidden]").length == 0;
    },

    // Включает textedit-ы для закупочной цены и суммы. Устанавливает значение в 0, если до этого они были отключены
    EnableSumAndPurchaseCost: function (gridRow) {
        if (!ReceiptWaybill_Approve.IsSumAndPurchaseCostEnabled(gridRow)) {
            gridRow.find(".ApprovedSum").parent("td").html('<input type="text" value="0" class="text_edit ApprovedSum" maxlength="19">');
            gridRow.find(".ApprovedPurchaseCost").parent("td").html('<input type="text" value="0" class="text_edit ApprovedPurchaseCost" maxlength="19">');
        }
    },

    // Отключает textedit-ы для закупочной цены и суммы. Устанавливает значение в 0, если до этого они были включены
    DisableSumAndPurchaseCost: function (gridRow) {
        if (ReceiptWaybill_Approve.IsSumAndPurchaseCostEnabled(gridRow)) {
            gridRow.find(".ApprovedSum").parent("td").html('<input type="hidden" value="0" class="ApprovedSum"><span class="ApprovedSum">0</span>');
            gridRow.find(".ApprovedPurchaseCost").parent("td").html('<input type="hidden" value="0" class="ApprovedPurchaseCost"><span class="ApprovedPurchaseCost">0</span>');
        }
    },

    // Пройти все строки таблицы и запретить редактировать закупочные цены и суммы там, где стоят нулевые количества
    DisableZeroCountRows: function () {
        $("#gridApproveArticles input.approveArticleCount").each(function () {
            if ($(this).val() == "0") {
                ReceiptWaybill_Approve.DisableSumAndPurchaseCost($(this).parent("td").parent("tr"));
            }
        });
    },

    // Получаем десятичное число из ячейки, которое может быть задано как в виде textedit с заданным классом, так и в виде label
    // TODO: перенести в common.js?
    TryGetCellDecimalValue: function (gridRow, className) {
        if (gridRow.find("input." + className).length > 0) {
            return TryGetDecimal(gridRow.find("input." + className).val());
        } else {
            return TryGetDecimal(gridRow.find("." + className).text().replaceAll(" ", ""));
        }
    },

    // Получаем число из ячейки, которое может быть задано как в виде textedit с заданным классом, так и в виде label
    // TODO: перенести в common.js?
    GetCellValue: function (gridRow, className) {
        if (gridRow.find("input." + className).length > 0) {
            return gridRow.find("input." + className).val();
        } else {
            return gridRow.find("." + className).text().replaceAll(" ", "");
        }
    },

    // Вычисляем НДС товара для указанной строки
    CalcValueAddedTaxForArticle: function (gridRow) {
        var sum = ReceiptWaybill_Approve.TryGetCellDecimalValue(gridRow, "ApprovedSum");
        var valueAddedTax = TryGetDecimal(gridRow.find(".ApprovedValueAddedTax option:selected").attr("param"));
        if (!isNaN(sum) && !isNaN(valueAddedTax)) {
            cost = ValueForDisplay(CalculateVatSum(sum, valueAddedTax), 2);
        }
        else {
            cost = 0;
        }

        var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();
        if (IsTrue(allowToViewPurchaseCosts)) {
            gridRow.find('.articleValueAddedTax').text(cost);
        }
    },

    SetGridFieldAttributes: function () {
        $("#gridApproveArticles input.approveArticleCount").each(function () {
            $(this).attr("maxlength", 19);
            $(this).parent("td").parent("tr").find('input[type="text"].ApprovedSum').attr("maxlength", 19);
            $(this).parent("td").parent("tr").find('input[type="text"].ApprovedPurchaseCost').attr("maxlength", 19);
        });
    },

    // Вычисление суммы накладной по ее позициям и пересчет сумм по позициям
    CalcRowsSum: function () {
        var rowsSum = 0;
        var totalSumValid = true;
        $("#gridApproveArticles .ApprovedPurchaseCost").each(function () {
            var purchaseCostValid = CheckValueScale(ReceiptWaybill_Approve.GetCellValue($(this).parent("td"), "ApprovedPurchaseCost"), 6, 12);
            var purchaseCost = ReceiptWaybill_Approve.TryGetCellDecimalValue($(this).parent("td"), "ApprovedPurchaseCost");
            if (!purchaseCostValid || purchaseCost < 0) {
                totalSumValid = false;

                return false;
            }

            var countValid, count;
            var measureUnitScale = TryGetDecimal($(this).parent("td").parent("tr").find(".measureUnitScale").text());

            // TODO: переделать под TryGetCellDecimalValue, предварительно сделав один класс, а не два approveArticleCount articleCount
            var isRowNotReadOnly = $(this).parent("td").parent("tr").find(".approveArticleCount").length > 0;
            if (isRowNotReadOnly) {
                countValid = CheckValueScale($(this).parent("td").parent("tr").find(".approveArticleCount").val(), measureUnitScale, 12);
                count = TryGetDecimal($(this).parent("td").parent("tr").find(".approveArticleCount").val(), measureUnitScale);
            } else {
                countValid = CheckValueScale($(this).parent("td").parent("tr").find(".articleCount").text().replaceAll(" ", ""), measureUnitScale, 12);
                count = TryGetDecimal($(this).parent("td").parent("tr").find(".articleCount").text().replaceAll(" ", ""), measureUnitScale);
            }
            if (!countValid || count < 0) {
                totalSumValid = false;

                return false;
            }

            if (count > 0) {
                rowsSum += TryGetDecimal(purchaseCost * count, 6);
                if (isRowNotReadOnly) {
                    $(this).parent("td").parent("tr").find(".ApprovedSum").val(BankRound(purchaseCost * count, 2));
                }
            }
        });
        if (totalSumValid)
            $("#ApprovedRowsSum").text(ValueForDisplay(rowsSum, 2));
        else
            $("#ApprovedRowsSum").text("---");
    },

    ValidateApprove: function () {
        var approveValidated = true;
        var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();

        $("#gridApproveArticles input.approveArticleCount").each(function () {
            var stringValid = true;

            var approveValueAddedTax = TryGetDecimal($(this).parent("td").parent("tr").find(".ApprovedValueAddedTax option:selected").attr("param"));
            if (isNaN(approveValueAddedTax))
                stringValid = false;

            // Проверка полей выполняется, только если их можно редактировать. Тогда там гарантированно textedit, и вызывать GetCellValue не нужно
            if ($(this).parent("td").parent("tr").find(".approveArticleCount").length > 0) {
                //Если нет прав на просмотр закупочных цен, то проверка не имеет смысл
                if (IsTrue(allowToViewPurchaseCosts)) {
                    var approveArticleSumValid = CheckValueScale($(this).parent("td").parent("tr").find(".ApprovedSum").val(), 2, 16);
                    var approveArticleSum = TryGetDecimal($(this).parent("td").parent("tr").find(".ApprovedSum").val());
                    if (!approveArticleSumValid || approveArticleSum < 0)
                        stringValid = false;

                    var approveArticlePurchaseCostValid = CheckValueScale($(this).parent("td").parent("tr").find(".ApprovedPurchaseCost").val(), 6, 12);
                    var approveArticlePurchaseCost = TryGetDecimal($(this).parent("td").parent("tr").find(".ApprovedPurchaseCost").val(), 6);
                    if (!approveArticlePurchaseCostValid || approveArticlePurchaseCost < 0)
                        stringValid = false;
                }

                var measureUnitScale = TryGetDecimal($(this).parent("td").parent("tr").find(".measureUnitScale").text());

                var approveArticleCountValid = CheckValueScale($(this).parent("td").parent("tr").find(".approveArticleCount").val(), measureUnitScale, 12);
                var approveArticleCount = TryGetDecimal($(this).parent("td").parent("tr").find(".approveArticleCount").val(), measureUnitScale);
                if (!approveArticleCountValid || approveArticleCount < 0)
                    stringValid = false;
            }

            if (!stringValid) {
                ShowErrorMessage("Суммы и количества должны быть числами с соответствующим количеством знаков после запятой, а ставка НДС выбрана.", "messageEditApproveCount");
                approveValidated = false;

                return false;
            }
        });

        //Если нет прав на просмотр закупочных цен, то проверка не имеет смысл
        if (IsTrue(allowToViewPurchaseCosts)) {
            var sumValid = CheckValueScale($("#TotalApprovedSum").val(), 2, 16);
            var sum = TryGetDecimal($("#TotalApprovedSum").val(), 2);
            if (!sumValid || sum < 0) {
                ShowErrorMessage("Итоговая сумма накладной должна быть числом в правильном формате.", "messageApproveWaybill");
                approveValidated = false;
            }
        }


        return approveValidated;
    }
}; 
﻿var ReceiptWaybill_Details = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            // Вызов окна параметров для печатных форм
            $('#printingForm').live('click', function () {
                var id = $('#Id').val();
                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/ShowPrintingFormSettings/",
                    data: { waybillId: id },
                    success: function (result) {
                        $('#receiptWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#receiptWaybillPrintingForm"));
                        ShowModal("receiptWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                    }
                });
            });

            $('#printingFormTORG12').live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/ShowTORG12PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#receiptWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#receiptWaybillPrintingForm"));
                        ShowModal("receiptWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                    }
                });
            });

            $('#divergenceActPrintingForm').live('click', function () {
                var id = $('#Id').val();
                window.open("/ReceiptWaybill/ShowDivergenceActPrintingForm?" + "WaybillId=" + id);
            });


            $("#btnBackTo").live('click', function () {
                window.location = $('#BackURL').val();
            });

            // редактирование приходной накладной
            $('#btnEditReceiptWaybill').live('click', function () {
                var receiptWaybillId = $('#Id').val();
                window.location = "/ReceiptWaybill/Edit?id=" + receiptWaybillId + GetBackUrlFromString($('#BackURL').val());
            });

            // удаление накладной
            $("#btnDeleteReceiptWaybill").live('click', function () {
                if (confirm('Вы уверены?')) {
                    var waybill_id = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/Delete/",
                        data: { id: waybill_id },
                        success: function () {
                            window.location = "/ReceiptWaybill/List";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                        }
                    });
                }
            });

            // добавление строки
            $("#btnAddReceiptWaybillRow").live("click", function () {
                var receiptWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/AddRow",
                    data: { receiptWaybillId: receiptWaybillId },
                    success: function (result) {
                        $('#receiptWaybillRowForEdit').hide().html(result);
                        //$.validator.unobtrusive.parse($("#receiptWaybillRowForEdit"));
                        ShowModal("receiptWaybillRowForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowList");
                    }
                });
            });

            // проводка накладной
            $('#btnAcceptReceiptWaybill').live('click', function () {
                if (!$('#btnAcceptReceiptWaybill').attr("disabled")) {
                    var receiptWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/Accept/",
                        data: { Id: receiptWaybillId },
                        success: function (result) {
                            RefreshGrid("gridReceiptWaybillRows", function () {
                                ReceiptWaybill_Details.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Проводка произведена.", "messageReceiptWaybillDetailsEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                        }
                    });
                }
            });

            //проводка задним числом
            $("#btnAcceptRetroactivelyReceiptWaybill").live('click', function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/AcceptRetroactively",
                    success: function (result) {
                        $('#dateTimeSelector').hide().html(result);
                        $.validator.unobtrusive.parse($("#dateTimeSelector"));
                        ShowModal("dateTimeSelector");
                        BindRetroactivelyAcceptanceDateSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                    }
                });
            });

            function BindRetroactivelyAcceptanceDateSelection() {
                $('#btnSelectDateTime').click(function (e) {
                
                    e.preventDefault();
                    if (!$('#dateTimeSelectForm').valid()) return false;

                    var dateTime = $("#dateTimeSelector #Date").val() + " " + $("#dateTimeSelector #Time").val();
                    var receiptWaybillId = $('#Id').val();

                    StartButtonProgress($("#btnSelectDateTime"));

                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/AcceptRetroactively",
                        data: { receiptWaybillId: receiptWaybillId, acceptanceDate: dateTime },
                        success: function (result) {
                            RefreshGrid("gridReceiptWaybillRows", function () {
                                ReceiptWaybill_Details.RefreshMainDetails(result.MainDetails);
                                HideModal(function () {
                                    ShowSuccessMessage("Накладная проведена.", "messageReceiptWaybillDetailsEdit");
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDateSelect");
                        }
                    });
                });
            }

            // переход к приемке накладной
            $('#btnReceiptReceiptWaybill').live('click', function () {
                if (!$('#btnReceiptReceiptWaybill').attr("disabled")) {
                    var receiptWaybillId = $('#Id').val();
                    if (IsTrue($("#IsCreatedFromProductionOrderBatch").val())) {
                        StartButtonProgress($(this));
                        $.ajax({
                            type: "POST",
                            url: "/ReceiptWaybill/PerformReceiption",
                            data: { waybillId: receiptWaybillId },
                            success: function (result) {
                                window.location = "/ReceiptWaybill/Details?Id=" + receiptWaybillId + GetBackUrlFromString($("#BackURL").val());
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                            }
                        });
                    } else {
                        window.location = "/ReceiptWaybill/Receipt?Id=" + receiptWaybillId + GetBackUrlFromString($('#BackURL').val());
                    }
                }
            });

            // окончательное согласование
            $('#btnApproveReceiptWaybill').live('click', function () {
                if (!$('#btnApproveReceiptWaybill').attr("disabled")) {
                    var receiptWaybillId = $('#Id').val();
                    window.location = "/ReceiptWaybill/Approve?Id=" + receiptWaybillId + GetBackUrlFromString($('#BackURL').val());
                }
            });

            // Отменить проводку
            $('#btnCancelAcceptanceReceiptWaybill').live('click', function () {
                if (confirm('Вы действительно хотите отменить проводку накладной?')) {
                    var receiptWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/CancelAcceptance/",
                        data: { receiptWaybillId: receiptWaybillId },
                        success: function (result) {
                            RefreshGrid("gridReceiptWaybillRows", function () {
                                ReceiptWaybill_Details.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Отмена проводки произведена.", "messageReceiptWaybillDetailsEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                        }
                    });
                }
            });

            // Отмена приемки
            $('#btnCancelReceiptReceiptWaybill').live('click', function () {
                if (confirm('Вы уверены, что хотите отменить приемку?')) {
                    var receiptWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/CancelReceipt",
                        data: { receiptWaybillId: receiptWaybillId },
                        success: function (result) {
                            window.location = '/ReceiptWaybill/Details?id=' + receiptWaybillId + GetBackUrlFromString($('#BackURL').val());
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                        }
                    });
                }
            });

            // Отмена окончательного согласования
            $('#btnCancelApprovementReceiptWaybill').live('click', function () {
                var waybillId = $('#Id').val();
                if (confirm('Вы уверены, что хотите отменить приемку/окончательное согласование?')) {

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/CancelApprovement/",
                        data: { receiptWaybillId: waybillId },
                        success: function (result) {
                            window.location = '/ReceiptWaybill/Details?id=' + waybillId + GetBackUrlFromString($('#BackURL').val());
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillDetailsEdit");
                        }
                    });
                }
            });

            // Редактирование позиции накладной
            $("#gridReceiptWaybillRows .edit_link").live("click", function () {
                var receiptWaybillId = $('#Id').val();
                var receiptWaybillRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/EditRow",
                    data: { receiptWaybillId: receiptWaybillId, receiptWaybillRowId: receiptWaybillRowId },
                    success: function (result) {
                        $('#receiptWaybillRowForEdit').hide().html(result);
                        ShowModal("receiptWaybillRowForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowList");
                    }
                });
            });

            // Удаление позиции накладной
            $("#gridReceiptWaybillRows .delete_link").live("click", function () {
                if (confirm('Вы уверены?')) {
                    var receiptWaybillId = $('#Id').val();
                    var receiptWaybillRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/DeleteRow/",
                        data: { receiptWaybillId: receiptWaybillId, receiptWaybillRowId: receiptWaybillRowId },
                        success: function (result) {
                            RefreshGrid("gridReceiptWaybillRows", function () { ShowSuccessMessage("Позиция удалена.", "messageReceiptWaybillRowList"); });
                            RefreshGrid("gridReceiptWaybillArticleGroups");
                            ReceiptWaybill_Details.RefreshMainDetails(result.MainDetails);
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowList");
                        }
                    });
                }
            });

            $(".articleDetails").live("click", function () {
                var receiptWaybillId = $('#Id').val();
                var receiptWaybillRowId = $(this).parent("td").parent("tr").find(".hidden_column").text();

                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/EditRow",
                    data: { receiptWaybillId: receiptWaybillId, receiptWaybillRowId: receiptWaybillRowId },
                    success: function (result) {
                        $('#receiptWaybillRowForEdit').hide().html(result);
                        ShowModal("receiptWaybillRowForEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowList");
                    }
                });
            });

            // Создание реестра цен
            $('#btnCreatePriceList').live("click", function () {
                var receiptWaybillId = $('#Id').val();
                window.location = "/AccountingPriceList/Create?reasonCode=1&additionalId=" + receiptWaybillId + GetBackUrl();
            });

            // Изменить куратора
            $("#linkChangeCurator").click(function () {
                var storageIds = $("#StorageId").val();
                Waybill_Edit.ShowCuratorSelectorForm(1/*waybillTypeId*/, storageIds, "", null, "messageReceiptWaybillDetailsEdit");
            });

            // обработка выбора куратора
            $(".select_user").live("click", function () {
                Waybill_Details.HandlerForSelectCurator(1/*waybillTypeId*/, $(this));
            });
        });
    },

    // обновление основной информации о накладной
    RefreshMainDetails: function (details) {
        $("#Sum").text(details.Sum + " р.");
        $("#RowCount").text(details.RowCount);
        $("#ShippingPercent").text(details.ShippingPercent);
        $("#TotalWeight").text(details.TotalWeight);
        $("#TotalVolume").text(details.TotalVolume);
        $("#StateName").text(details.StateName);
        $("#ValueAddedTaxString").text(details.ValueAddedTaxString);
        if (IsTrue(details.AreSumDivergences)) {
            $('#PendingSum').addClass("attention");
            $('#Sum').addClass("attention");
        }
        else {
            $('#PendingSum').removeClass("attention");
            $('#Sum').removeClass("attention");
        }

        $("#AcceptedByName").text(details.AcceptedByName);
        $("#AcceptedById").val(details.AcceptedById);
        $("#AcceptanceDate").text(details.AcceptanceDate);
        $("#ReceiptedByName").text(details.ReceiptedByName);
        $("#ReceiptedById").val(details.ReceiptedById);
        $("#ReceiptDate").text(details.ReceiptDate);
        $("#ApprovedByName").text(details.ApprovedByName);
        $("#ApprovedById").val(details.ApprovedById);
        $("#ApprovementDate").text(details.ApprovementDate);

        $("#AllowToViewAcceptedByDetails").val(details.AllowToViewAcceptedByDetails);
        $("#AllowToViewReceiptedByDetails").val(details.AllowToViewReceiptedByDetails);
        $("#AllowToViewApprovedByDetails").val(details.AllowToViewApprovedByDetails);

        $("#AcceptedByContainer").css("display", details.AcceptedById != "" ? "inline" : "none");
        $("#ReceiptedByContainer").css("display", details.ReceiptedById != "" ? "inline" : "none");
        $("#ApprovedByContainer").css("display", details.ApprovedById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');
        SetEntityDetailsLink('AllowToViewApprovedByDetails', 'ApprovedByName', 'User', 'ApprovedById');

        UpdateButtonAvailability("btnEditReceiptWaybill", IsTrue(details.AllowToEdit) || IsTrue(details.AllowToEditProviderDocuments));
        UpdateElementVisibility("btnEditReceiptWaybill", IsTrue(details.AllowToEdit) || IsTrue(details.AllowToEditProviderDocuments));

        UpdateButtonAvailability("btnDeleteReceiptWaybill", details.AllowToDelete);
        UpdateElementVisibility("btnDeleteReceiptWaybill", details.AllowToDelete);

        UpdateButtonAvailability("btnAcceptReceiptWaybill", details.AllowToAccept);
        UpdateElementVisibility("btnAcceptReceiptWaybill", details.AllowToAccept);
        UpdateButtonAvailability("btnAcceptRetroactivelyReceiptWaybill", details.AllowToAcceptRetroactively);
        UpdateElementVisibility("btnAcceptRetroactivelyReceiptWaybill", details.AllowToAcceptRetroactively);
        UpdateButtonAvailability("btnCancelAcceptanceReceiptWaybill", details.AllowToCancelAcceptance);
        UpdateElementVisibility("btnCancelAcceptanceReceiptWaybill", details.AllowToCancelAcceptance);

        UpdateButtonAvailability("btnReceiptReceiptWaybill", details.AllowToReceipt);
        UpdateElementVisibility("btnReceiptReceiptWaybill", details.AllowToReceipt);

        UpdateElementVisibility("feature_menu_box", details.AllowToPrintForms);
        UpdateElementVisibility("printingForm", details.AllowToPrintForms);
        UpdateElementVisibility("printingFormTORG12", details.AllowToPrintForms);

        UpdateElementVisibility("linkChangeCurator", details.AllowToChangeCurator);
    },

    // обработка удачного редактирования строки
    OnSuccessReceiptWaybillRowEdit: function (ajaxContext) {
        RefreshGrid("gridReceiptWaybillArticleGroups");
        RefreshGrid("gridReceiptWaybillRows", function () {
            // после редактирования мы закрываем модальную форму           
            if ($('#receiptWaybillRowForEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
                HideModal();
                ShowSuccessMessage("Сохранено.", "messageReceiptWaybillRowList");
            }
            // а после добавления мы оставляем модальную форму, но очищаем ее, чтобы она была готова к новому добавлению
            else {
                $("#receiptWaybillRowForEdit #PurchaseCost").val("0");
                $("#receiptWaybillRowForEdit #ValueAddedTaxSum").text("0");
                $("#receiptWaybillRowForEdit #ArticleId").val("");
                $("#receiptWaybillRowForEdit #ArticleName").text("Выберите товар");
                $("#receiptWaybillRowForEdit #PendingCount").val("").ValidationValid();
                $("#receiptWaybillRowForEdit #PendingSum").val("").ValidationValid();
                $("#receiptWaybillRowForEdit #ProductionCountryId").val("").ValidationValid();
                $("#receiptWaybillRowForEdit #ManufacturerId").val("").ValidationValid();
                $("#receiptWaybillRowForEdit #ManufacturerName").text("Выберите фабрику-изготовителя");
                $("#receiptWaybillRowForEdit #MeasureUnitName").text("");
                $("#receiptWaybillRowForEdit #CustomsDeclarationNumber").val("");
                SetFieldScale("#PendingCount", 12, 0, "#receiptWaybillRowForEdit", true);

                ShowSuccessMessage("Сохранено.", "messageReceiptWaybillRowEdit");
            }

            ReceiptWaybill_Details.RefreshMainDetails(ajaxContext.MainDetails);
        });  
    }
}; ﻿var ReceiptWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {

            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");
            }

            if (IsFalse($("#IsCreatedFromProductionOrderBatch").val())) {
                if ($("#IsNew").val() == "False") {
                    $("#ContractId").removeAttr("disabled");
                    $("#AccountOrganizationId").removeAttr("disabled");
                    $("#ReceiptStorageId").removeAttr("disabled");
                }
                ReceiptWaybill_Edit.RefreshComboboxes();
            }

            $("#btnBack").live("click", function () {
                if (IsDefaultOrEmpty($("#Id").val())) {
                    // Не удалять. Таким образом мы исправляем баг 132 из старого Excel-файла.
                    window.location = $("#BackURL").val();
                }
                else {
                    window.location = "/ReceiptWaybill/Details?id=" + $("#Id").val() + GetBackUrlFromString($("#BackURL").val());
                }
            });

            if ($("#IsCustomsDeclarationNumberFromReceiptWaybill").val() == 1) {
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_true").attr("checked", "checked");
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_true").trigger("click");
                $("#CustomsDeclarationNumber").removeAttr("disabled").focus();
            }
            else {
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_false").attr("checked", "checked");
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_false").trigger("click");
                $("#CustomsDeclarationNumber").attr("disabled", "disabled").val("");
            }

            $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_false").click(function () {
                $("#CustomsDeclarationNumber").attr("disabled", "disabled").val("");
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_true").attr("checked", false);
                $("#IsCustomsDeclarationNumberFromReceiptWaybill").val("0");
            });

            $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_true").click(function () {
                $("#CustomsDeclarationNumber").removeAttr("disabled").focus();
                $("#rbIsCustomsDeclarationNumberFromReceiptWaybill_false").attr("checked", false);
                $("#IsCustomsDeclarationNumberFromReceiptWaybill").val("1");
            });

            $("#ProviderId").change(function () {
                ReceiptWaybill_Edit.RefreshComboboxes();
            });

            $("#ContractId").change(function () {
                ReceiptWaybill_Edit.RefreshComboboxes();
            });

            $("#AccountOrganizationId").change(function () {
                ReceiptWaybill_Edit.RefreshComboboxes();
            });

            $("#ReceiptStorageId").change(function () {
                ReceiptWaybill_Edit.RefreshComboboxes();
            });
            var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();

            if (IsTrue(allowToViewPurchaseCosts)) {
                $("#DiscountPercent").bind("keyup change paste cut", function () {
                    var pendingSum = TryGetDecimal($("#PendingSum").val());
                    var discountPercent = TryGetDecimal($("#DiscountPercent").val());
                    if (!isNaN(discountPercent) && !isNaN(pendingSum)) {
                        var discountSum = pendingSum * discountPercent / 100;
                        $("#DiscountSum").val(ValueForEdit(discountSum, 2));
                    }
                });

                $("#DiscountSum").live("keyup change paste cut", function () {
                    var discountSum = TryGetDecimal($("#DiscountSum").val());
                    var pendingSum = TryGetDecimal($("#PendingSum").val());
                    if (!isNaN(discountSum) && !isNaN(pendingSum) && pendingSum != 0) {
                        var discountPercent = discountSum * 100 / pendingSum;
                        $("#DiscountPercent").val(ValueForEdit(discountPercent, 2));
                    }
                });

                $("#PendingSum").live("keyup change paste cut", function () {
                    var discountSum = TryGetDecimal($("#DiscountSum").val());
                    var pendingSum = TryGetDecimal($("#PendingSum").val());
                    if (!isNaN(discountSum) && !isNaN(pendingSum) && pendingSum != 0) {
                        var discountPercent = discountSum * 100 / pendingSum;
                        $("#DiscountPercent").val(ValueForEdit(discountPercent, 2));
                    }
                });
            }

            $("#CuratorName").click(function () {
                var storageId = $("#ReceiptStorageId").val();
                if (storageId != "") {
                    Waybill_Edit.ShowCuratorSelectorForm(1/*WaybillTypeId*/, storageId, "", $(this), "messageReceiptWaybillEdit");
                }
                else {
                    $("#ReceiptStorageId").ValidationError("Укажите место хранения.");
                }
            });
        });
    },

    // при успешной попытке добавления/редактирования приходной накладной
    OnSuccessReceiptWaybillSave: function (ajaxContext) {
        // TODO: если !model.IsValid, контроллер возвращает success, но с моделью вместо id созданной накл. Тогда не надо переходить.
        window.location = "/ReceiptWaybill/Details?id=" + ajaxContext + GetBackUrlFromString($("#BackURL").val());
    },

    // при неудачной попытке добавления/редактирования приходной накладной
    OnFailReceiptWaybillSave: function (ajaxContext) {
        $(".field-validation-error").text("");
        ShowErrorMessage(ajaxContext.responseText, "messageReceiptWaybillEdit");
    },

    RefreshComboboxes: function () {
        var provider = $("#ProviderId").val();
        var contract = $("#ContractId").val();
        var receiptStorage = $("#ReceiptStorageId").val();
        var accountOrganization = $("#AccountOrganizationId").val();

        if ($("#AllowToChangeStorageAndOrganization").val() == "True") {
            ReceiptWaybill_Edit.UpdateComboboxes(provider, contract, receiptStorage, accountOrganization);
        } else {
            ReceiptWaybill_Edit.UpdateContractList(provider, receiptStorage, accountOrganization);
        }
    },

    UpdateComboboxes: function (provider, contract, receiptStorage, accountOrganization) {

        if (provider != "" && contract == "" && receiptStorage == "" && accountOrganization == "") {
            // Заполняем contract, receiptStorage и accountOrganization
            $("#ContractId").removeAttr("disabled");
            ReceiptWaybill_Edit.UpdateContractList(provider, receiptStorage, accountOrganization);

            $("#ReceiptStorageId").removeAttr("disabled");
            ReceiptWaybill_Edit.UpdateReceiptStorageList(provider, contract, accountOrganization);

            $("#AccountOrganizationId").removeAttr("disabled");
            ReceiptWaybill_Edit.UpdateAccountOrganizationList(provider, contract, receiptStorage);
        } else if (provider == "") {
            // Блокируем 3 нижних
            $("#ContractId").val("");
            $("#ContractId").attr("disabled", "disabled");

            $("#ReceiptStorageId").val("");
            $("#ReceiptStorageId").attr("disabled", "disabled");

            $("#AccountOrganizationId").val("");
            $("#AccountOrganizationId").attr("disabled", "disabled");
        } else {
            ReceiptWaybill_Edit.UpdateContractList(provider, receiptStorage, accountOrganization);
            ReceiptWaybill_Edit.UpdateReceiptStorageList(provider, contract, accountOrganization);
            ReceiptWaybill_Edit.UpdateAccountOrganizationList(provider, contract, receiptStorage);
        }
    },

    UpdateContractList: function (provider, receiptStorage, accountOrganization) {
        var contractId = $("#ContractId").val();
        StartComboBoxProgress($("#ContractId"));

        $.ajax({
            type: "GET",
            url: "/ReceiptWaybill/UpdateContractList",
            data: { providerId: provider, receiptStorageId: receiptStorage, accountOrganizationId: accountOrganization },
            success: function (result) {
                $("#ContractId").fillSelect(result);
                if (contractId != "") {
                    $("#ContractId").val(contractId);
                }
                StopComboBoxProgress($("#ContractId"));
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillEdit");
                StopComboBoxProgress($("#ContractId"));
            }
        });
    },

    UpdateReceiptStorageList: function (provider, contract, accountOrganization) {
        var storageId = $("#ReceiptStorageId").val();

        StartComboBoxProgress($("#ReceiptStorageId"));

        $.ajax({
            type: "GET",
            url: "/ReceiptWaybill/UpdateReceiptStorageList",
            data: { providerId: provider, contractId: contract, accountOrganizationId: accountOrganization },
            success: function (result) {
                $("#ReceiptStorageId").fillSelect(result);
                if (storageId != "") {
                    $("#ReceiptStorageId").val(storageId);
                }
                StopComboBoxProgress($("#ReceiptStorageId"));
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillEdit");
                StopComboBoxProgress($("#ReceiptStorageId"));
            }
        });
    },

    UpdateAccountOrganizationList: function (provider, contract, receiptStorage) {
        var accountOrganizationId = $("#AccountOrganizationId").val();

        StartComboBoxProgress($("#AccountOrganizationId"));

        $.ajax({
            type: "GET",
            url: "/ReceiptWaybill/UpdateAccountOrganizationList",
            data: { providerId: provider, contractId: contract, receiptStorageId: receiptStorage },
            success: function (result) {
                $("#AccountOrganizationId").fillSelect(result);
                if (accountOrganizationId != "") {
                    $("#AccountOrganizationId").val(accountOrganizationId);
                }
                StopComboBoxProgress($("#AccountOrganizationId"));
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillEdit");
                StopComboBoxProgress($("#AccountOrganizationId"));
            }
        });
    }

};﻿var ReceiptWaybill_List_ApprovedWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridApprovedReceiptWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReceiptWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                var providerOrProducerId = $(this).find(".ProviderOrProducerId").text();
                var isCreatedFromProductionOrderBatch = $(this).find(".IsCreatedFromProductionOrderBatch").text();
                if (isCreatedFromProductionOrderBatch == "0") {
                    $(this).find("a.ProviderOrProducerName").attr("href", "/Provider/Details?id=" + providerOrProducerId + "&backURL=" + currentUrl);
                } else {
                    $(this).find("a.ProviderOrProducerName").attr("href", "/Producer/Details?id=" + providerOrProducerId + "&backURL=" + currentUrl);
                }

                var storageId = $(this).find(".receiptStorageId").text();
                $(this).find("a.ReceiptStorageName").attr("href", "/Storage/Details?id=" + storageId + "&backURL=" + currentUrl);

                var accountOrganizationId = $(this).find(".accountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + "&backURL=" + currentUrl);
            });           
        });
    }
}; ﻿var ReceiptWaybill_List_DeliveryPendingGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridDeliveryPendingWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReceiptWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                var providerOrProducerId = $(this).find(".ProviderOrProducerId").text();
                var isCreatedFromProductionOrderBatch = $(this).find(".IsCreatedFromProductionOrderBatch").text();
                if (isCreatedFromProductionOrderBatch == "0") {
                    $(this).find("a.ProviderOrProducerName").attr("href", "/Provider/Details?id=" + providerOrProducerId + "&backURL=" + currentUrl);
                } else {
                    $(this).find("a.ProviderOrProducerName").attr("href", "/Producer/Details?id=" + providerOrProducerId + "&backURL=" + currentUrl);
                }

                var storageId = $(this).find(".receiptStorageId").text();
                $(this).find("a.ReceiptStorageName").attr("href", "/Storage/Details?id=" + storageId + "&backURL=" + currentUrl);

                var accountOrganizationId = $(this).find(".accountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + "&backURL=" + currentUrl);
            });
        });
    }
}; ﻿var ReceiptWaybill_List_DivergenceWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridDivergenceWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReceiptWaybill/Details?id=" + id + "&backURL=" + currentUrl);

                var providerId = $(this).find(".providerId").text();
                $(this).find("a.ProviderName").attr("href", "/Provider/Details?id=" + providerId + "&backURL=" + currentUrl);

                var accountOrganizationId = $(this).find(".accountOrganizationId").text();
                $(this).find("a.AccountOrganizationName").attr("href", "/AccountOrganization/Details?id=" + accountOrganizationId + "&backURL=" + currentUrl);
            });           
        });
    }
}; ﻿var ReceiptWaybill_List = {
    Init: function () {
        $(document).ready(function () {
            $("#btnCreateReceiptWaybill").live("click", function () {
                window.location = "/ReceiptWaybill/Create?" + GetBackUrl(true);
            });
        });
    }
}; ﻿var ReceiptWaybill_MainDetails = {
    Init: function () {
        $(document).ready(function () {

            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');

            SetEntityDetailsLink('AllowToViewApprovedByDetails', 'ApprovedByName', 'User', 'ApprovedById');

            SetEntityDetailsLink('AllowToViewStorageDetails', 'StorageName', 'Storage', 'StorageId');

            SetEntityDetailsLink(null, 'AccountOrganizationName', 'AccountOrganization', 'AccountOrganizationId');

            SetEntityDetailsLink('AllowToViewProviderDetails', 'ProviderName', 'Provider', 'ProviderId');

            SetEntityDetailsLink('AllowToViewProducerDetails', 'ProducerName', 'Producer', 'ProducerId');

            SetEntityDetailsLink('AllowToViewProductionOrderDetails', 'ProductionOrderName', 'ProductionOrder', 'ProductionOrderId');

            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');
        });
    }
}; ﻿var ReceiptWaybill_Receipt = {
    Init: function () {
        $(document).ready(function () {
            ReceiptWaybill_Receipt.SetGridFieldAttributes();

            if (IsTrue($("#AllowToViewPurchaseCosts").val())) {
                ReceiptWaybill_Receipt.ChangeReceiptedSumColor();
            }

            // Обработка изменения кол-ва принятого на склад товара
            $(".receiptToStorageTextEditor").live("change", function () {
                ReceiptWaybill_Receipt.UpdateEditableCount($(this));
            });

            // Обработка изменения кол-ва товара от поставщика
            $(".providerCountTextEditor").live("change", function () {
                ReceiptWaybill_Receipt.UpdateEditableCount($(this));
            });

            // Обработка изменения суммы по документу
            $(".ProviderSum").live("change", function () {
                ReceiptWaybill_Receipt.UpdateEditableCount($(this));
            });

            // Принятие накладной
            $("#btnDoReceipt").click(function () {
                if (ReceiptWaybill_Receipt.ValidateReceipt()) {
                    var waybillId = $("#WaybillId").val();
                    var sum = IsTrue($("#AllowToViewPurchaseCosts").val()) ? TryGetDecimal($("#TotalReceiptSum").val(), 2) : 0;

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/PerformReceiption",
                        data: { waybillId: waybillId, sum: sum },
                        success: function (result) {
                            window.location = "/ReceiptWaybill/Details?Id=" + waybillId + GetBackUrlFromString($("#BackURL").val());
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            var messageId = $("#messageReceiptWaybill").length > 0 ? "messageReceiptWaybill" : "messageEditReceiptCount";
                            ShowErrorMessage(XMLHttpRequest.responseText, messageId);
                        }
                    });
                }
            });

            //приемка задним числом
            $("#btnDoReceiptRetroactively").live('click', function () {
                if (ReceiptWaybill_Receipt.ValidateReceipt()) {
                    StartButtonProgress($(this));
                    $.ajax({
                        type: "GET",
                        url: "/ReceiptWaybill/ReceiptRetroactively",
                        success: function (result) {
                            $('#dateTimeSelector').hide().html(result);
                            $.validator.unobtrusive.parse($("#dateTimeSelector"));
                            BindRetroactivelyReceiptanceDateSelection();
                            ShowModal("dateTimeSelector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            var messageId = $("#messageReceiptWaybill").length > 0 ? "messageReceiptWaybill" : "messageEditReceiptCount";
                            ShowErrorMessage(XMLHttpRequest.responseText, messageId);
                        }
                    });
                }
            });

            function BindRetroactivelyReceiptanceDateSelection() {
                $('#btnSelectDateTime').click(function (e) {

                    e.preventDefault();
                    if (!$('#dateTimeSelectForm').valid()) return false;

                    var sum = IsTrue($("#AllowToViewPurchaseCosts").val()) ? TryGetDecimal($("#TotalReceiptSum").val(), 2) : 0;
                    var dateTime = $("#dateTimeSelector #Date").val() + " " + $("#dateTimeSelector #Time").val();
                    var receiptWaybillId = $('#WaybillId').val();

                    StartButtonProgress($("#btnSelectDateTime"));

                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/ReceiptRetroactively",
                        data: { receiptWaybillId: receiptWaybillId, receiptDate: dateTime, receiptanceSum: sum },
                        success: function (result) {
                            HideModal(function () {
                                window.location = "/ReceiptWaybill/Details?Id=" + receiptWaybillId + GetBackUrlFromString($("#BackURL").val());
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDateSelect");
                        }
                    });
                });
            }

            // Возврат к накладной
            $("#btnCloseReceipt").click(function () {
                var waybillId = $("#WaybillId").val();
                window.location = "/ReceiptWaybill/Details?Id=" + waybillId + GetBackUrlFromString($("#BackURL").val());
            });

            // Удаление позиции накладной
            $(".del_link").live("click", function () {
                if (confirm("Вы уверены?")) {
                    var waybillId = $("#WaybillId").val();
                    var rowId = $(this).parent("span").parent("td").parent("tr").find(".rowId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ReceiptWaybill/DeleteWaybillRowFromReceipt/",
                        data: { waybillId: waybillId, rowId: rowId },
                        success: function (result) {
                            RefreshGrid("gridReceipt", function () {
                                ReceiptWaybill_Receipt.SetGridFieldAttributes();
                                ReceiptWaybill_Receipt.ValidateReceipt();
                                ShowSuccessMessage("Позиция удалена.", "messageEditReceiptCount");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageEditReceiptCount");
                        }
                    });
                }
            });

            // Обработка изменения суммы накладной
            // TODO: заменить change на live 4 события (paste cut...)
            $("#TotalReceiptSum").change(function () {
                var sumStr = TryGetDecimal($(this).attr("value"), 2);
                if (!isNaN(sumStr) && sumStr >= 0) {
                    $(this).val(sumStr);
                    $(this).removeClass("input-validation-error");
                    $('#messageReceiptWaybill').empty();
                    ReceiptWaybill_Receipt.ChangeReceiptedSumColor();
                }
                else {
                    $(this).addClass("input-validation-error");
                    ShowErrorMessage("Сумма должна быть числом.", "messageReceiptWaybill");
                }
            });
        });
    },

    SuccessAddedRowToWaybill: function () {
        RefreshGrid("gridReceipt", function () {
            ReceiptWaybill_Receipt.SetGridFieldAttributes();
            ReceiptWaybill_Receipt.ValidateReceipt();
            HideModal(ShowSuccessMessage("Товар добавлен в накладную.", "messageEditReceiptCount"));
        });
    },

    // TODO: проверить право просмотра закупочных цен
    ChangeReceiptedSumColor: function () {
        if (TryGetDecimal($("#TotalReceiptSum").val()) != TryGetDecimal($("#TotalReceiptSumByRows").text().replaceAll(" ", ""))) {
            $("#TotalReceiptSumByRowsCol").addClass("attention");
            $("#TotalReceiptSum").addClass("input-validation-error");
        } else {
            $("#TotalReceiptSum").removeClass("input-validation-error");
        }
    },

    SetGridFieldAttributes: function () {
        $("#gridReceipt .receiptToStorageTextEditor").each(function () {
            $(this).attr("maxlength", 19);
            $(this).parent("td").parent("tr").find(".providerCountTextEditor").attr("maxlength", 19);
            $(this).parent("td").parent("tr").find(".ProviderSum").attr("maxlength", 19);
        });
    },

    ValidateReceipt: function () {
        var allowToViewPurchaseCosts = IsTrue($("#AllowToViewPurchaseCosts").val());
        var receiptValidated = true;
        var allProviderSumsValid = true;
        var receiptSumByRowsCounted = 0;
        $("#gridReceipt .receiptToStorageTextEditor").each(function () {
            var measureUnitScale = TryGetDecimal($(this).parent("td").parent("tr").find(".measureUnitScale").text());
            var receiptCountValid = CheckValueScale($(this).val(), measureUnitScale, 12);
            var providerCountValid = CheckValueScale($(this).parent("td").parent("tr").find(".providerCountTextEditor").val(), measureUnitScale, 12);
            var providerSumValid = allowToViewPurchaseCosts ? CheckValueScale($(this).parent("td").parent("tr").find(".ProviderSum").val(), 2, 16) : true;
            var receiptCount = TryGetDecimal($(this).val(), measureUnitScale);
            var providerCount = TryGetDecimal($(this).parent("td").parent("tr").find(".providerCountTextEditor").val(), measureUnitScale);
            var providerSum = allowToViewPurchaseCosts ? TryGetDecimal($(this).parent("td").parent("tr").find(".ProviderSum").val(), 2) : 0;
            
            if (providerSumValid && providerSum >= 0) {
                receiptSumByRowsCounted += providerSum;
            } else {
                allProviderSumsValid = false;
            }
            if (!receiptCountValid || receiptCount < 0 || !providerCountValid || providerCount < 0 || !providerSumValid || providerSum < 0) {
                ShowErrorMessage(allowToViewPurchaseCosts ? "Суммы и количества должны быть числами с соответствующим количеством знаков после запятой." :
                    "Количества товара должны быть числами с соответствующим количеством знаков после запятой.", "messageEditReceiptCount");
                receiptValidated = false;
            }
            // Если оба признака уже установлены в false, прекращаем перебор (ничего нового уже не будет), т.е. возвращаем false
            // (При allowToViewPurchaseCosts == false игнорируем первый признак)
            if ((!allProviderSumsValid || !allowToViewPurchaseCosts) && !receiptValidated) {
                return false;
            }
        });
        var receiptSumValid = allowToViewPurchaseCosts ? CheckValueScale($("#TotalReceiptSum").val(), 2, 16) : true;
        var receiptSum = allowToViewPurchaseCosts ? TryGetDecimal($("#TotalReceiptSum").val(), 2) : 0;
        if (!receiptSumValid || isNaN(receiptSum) || receiptSum < 0) {
            ShowErrorMessage("Общая сумма накладной по документу должна быть числом в правильном формате.", "messageReceiptWaybill");
            receiptValidated = false;
        }
                
        if (allowToViewPurchaseCosts) {
            if (receiptSum != ValueForEdit(receiptSumByRowsCounted, 2)) {
                ShowErrorMessage("Общая сумма по накладной не сходится с суммой по позициям.", "messageReceiptWaybill");
                receiptValidated = false;
            }
            if (allProviderSumsValid) {
                $("#TotalReceiptSumByRows").text(ValueForDisplay(receiptSumByRowsCounted, 2));
                $("#TotalReceiptSumByRowsCol").removeClass("attention");
            } else {
                $("#TotalReceiptSumByRows").text("---");
                $("#TotalReceiptSumByRowsCol").addClass("attention");
            }
            ReceiptWaybill_Receipt.ChangeReceiptedSumColor();
        }

        return receiptValidated;
    },

    UpdateEditableCount: function (_this) {
        var allowToViewPurchaseCosts = IsTrue($("#AllowToViewPurchaseCosts").val());

        var receiptedCount = _this.parent("td").parent("tr").find(".receiptToStorageTextEditor");
        var providerCount = _this.parent("td").parent("tr").find(".providerCountTextEditor");
        var providerSum = _this.parent("td").parent("tr").find(".ProviderSum");

        var rowId = _this.parent("td").parent("tr").find(".rowId").text();
        var scale = _this.parent("td").parent("tr").find(".measureUnitScale").text();
        var waybillId = $("#WaybillId").val();

        var __this;
        if (_this.hasClass("receiptToStorageTextEditor")) {
            __this = receiptedCount;
        }
        else if (_this.hasClass("providerCountTextEditor")) {
            __this = providerCount;
        } else {
            __this = providerSum;
        }

        var receiptedCountResult = CheckValueScale(receiptedCount.val(), scale, 12);
        var providerCountResult = CheckValueScale(providerCount.val(), scale, 12);
        var providerSumResult = allowToViewPurchaseCosts ? CheckValueScale(providerSum.val(), 2, 16) : true;
        var pendingCount = _this.parent("td").parent("tr").find(".Count").text();

        // TODO: переделать. А если receiptedCount.val() == "00" и providerCount.val() == "00" ?
        if (receiptedCountResult == true && providerCountResult == true && providerSumResult == true && (receiptedCount.val() != 0 || providerCount.val() != 0 || pendingCount != "0")) {
            $.ajax({
                type: "POST",
                url: "/ReceiptWaybill/EditWaybillRowFromReceipt/",
                data: { waybillId: waybillId, rowId: rowId, receiptedCount: receiptedCount.val(), providerCount: providerCount.val(), providerSum: allowToViewPurchaseCosts ? providerSum.val() : 0 },
                success: function (result) {
                    receiptedCount.removeClass("field-validation-success");
                    providerCount.removeClass("field-validation-success");
                    providerSum.removeClass("field-validation-success");
                    __this.removeClass("field-validation-error").addClass("field-validation-success");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    __this.removeClass("field-validation-success");
                    __this.addClass("field-validation-error");
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageEditReceiptCount");
                }
            });
        }
        else {
            if (receiptedCountResult == false) {
                receiptedCount.removeClass("field-validation-success").addClass("field-validation-error");
            }
            else {
                receiptedCount.removeClass("field-validation-error").addClass("field-validation-success");
            }
            if (providerCountResult == false) {
                providerCount.removeClass("field-validation-success").addClass("field-validation-error");
            }
            else {
                providerCount.removeClass("field-validation-error").addClass("field-validation-success");
            }
            if (providerSumResult == false) {
                providerSum.removeClass("field-validation-success").addClass("field-validation-error");
            }
            else {
                providerSum.removeClass("field-validation-error").addClass("field-validation-success");
            }

            if (receiptedCount.val() == 0 && providerCount.val() == 0 && pendingCount == "0") {
                providerCount.removeClass("field-validation-success").addClass("field-validation-error");
                receiptedCount.removeClass("field-validation-success").addClass("field-validation-error");
                ShowErrorMessage("Одно из значений по позиции должно быть больше 0.", "messageEditReceiptCount");
            }
            else {
                if (providerSumResult == false) {
                    ShowErrorMessage("Укажите сумму - целое положительное число, до 2 знаков после запятой.", "messageEditReceiptCount");
                }
                else if (scale == 0)
                    ShowErrorMessage("Укажите целое положительное число.", "messageEditReceiptCount");
                else
                    ShowErrorMessage("Указано неверное количество товара. Допускается не более " + scale + " десятичных знаков.", "messageEditReceiptCount");
            }
        }
        ReceiptWaybill_Receipt.ValidateReceipt();
    }
};﻿var ReceiptWaybill_ReceiptedArticlesGrid = {
    Init: function () {
        $(document).ready(function () {

            // Добавление товара в накладную
            $("#btnAddArticle").bind("click", function () {
                var waybillId = $("#WaybillId").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ReceiptWaybill/AddWaybillRowFromReceipt/",
                    data: { waybillId: waybillId },
                    success: function (result) {
                        $('#receiptArticleAdd').hide().html(result);
                        ShowModal("receiptArticleAdd");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageEditReceiptCount");
                    }
                });
            });

        });
    }
}; ﻿var ReceiptWaybill_RowForEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#PendingCount", 12, $("#MeasureUnitScale").val(), "#receiptWaybillRowForEdit", false);
            SetFieldScale("#PurchaseCost", 12, 6, "#receiptWaybillRowForEdit", false);
            SetFieldScale("#PendingSum", 16, 2, "#receiptWaybillRowForEdit", true);
        });

        var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();

        //биндим события для пересчета показателей, только если есть права на просмотр цен
        if (IsTrue(allowToViewPurchaseCosts)) {

            $("#form0 input[type=submit]").submit(function () {
                $("#PendingCount").trigger("change");
            });

            // При изменении ожидаемого кол-ва
            $("#receiptWaybillRowForEdit #PendingCount").bind("keyup change paste cut", function () {
                if ($("#PendingSumIsChangedLast").val() == 1) {
                    ReceiptWaybill_RowForEdit.UpdatePurchaseCost(true);
                }
                else {
                    ReceiptWaybill_RowForEdit.UpdatePendingSum();
                }
            });

            // При изменении ожидаемой суммы
            $("#receiptWaybillRowForEdit #PendingSum").bind("keyup paste cut", function () {
                $("#PendingSumIsChangedLast").val(1);
                ReceiptWaybill_RowForEdit.UpdatePurchaseCost();
            });

            // При изменении ожидаемой суммы с уходом с нее (можно изменить значение самого поля)
            $("#receiptWaybillRowForEdit #PendingSum").bind("change", function () {
                $("#PendingSumIsChangedLast").val(1);
                ReceiptWaybill_RowForEdit.UpdatePurchaseCost(true);
            });

            // При изменении закупочной цены
            $("#receiptWaybillRowForEdit #PurchaseCost").bind("keyup change paste cut", function () {
                $("#PendingSumIsChangedLast").val(0);
                ReceiptWaybill_RowForEdit.UpdatePendingSum();
            });

            // При изменении ставки НДС
            $("#receiptWaybillRowForEdit #PendingValueAddedTaxId").live("change", function () {
                ReceiptWaybill_RowForEdit.UpdateValueAddedTaxSum();
            });
        }


        // открытие формы выбора товара
        $("span#ArticleName").bind("click", function () {
            $.ajax({
                type: "GET",
                url: "/Article/SelectArticle",
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    ReceiptWaybill_RowForEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                }
            });
        });

        $("#ManufacturerName").click(function () {
            $.ajax({
                type: "GET",
                url: "/Manufacturer/SelectManufacturer/",
                success: function (result) {
                    $('#manufacturerAdd').hide().html(result);
                    $.validator.unobtrusive.parse($("#manufacturerAdd"));
                    ShowModal("manufacturerAdd");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                }
            });
        });

        // Обрабатываем выбор фабрики-изготовителя
        $("#manufacturerAdd .select").live("click", function () {

            var manufacturerId = $(this).parent("td").parent("tr").find(".Id").html();
            var manufacturerName = $(this).parent("td").parent("tr").find(".ManufacturerName").html();

            $("#ManufacturerName").html(manufacturerName);
            $("#ManufacturerId").val(manufacturerId);

            HideModal();
        });

        $("#AddCountry").click(function () {
            $.ajax({
                type: "GET",
                url: "/Country/Create/",
                success: function (result) {
                    $('#countryAdd').hide().html(result);
                    $.validator.unobtrusive.parse($("#countryAdd"));
                    ShowModal("countryAdd");
                    $("#countryAdd #Name").focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                }
            });
        });
    },

    // при неудачной попытке добавления/редактирования строки приходной накладной
    OnFailReceiptWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageReceiptWaybillRowEdit");
    },

    OnSuccessCountrySave: function (ajaxContext) {
        HideModal();

        $.ajax({
            type: "GET",
            url: "/Country/GetList/",
            success: function (result) {
                $("#ProductionCountryId").fillSelect(result);
                $("#ProductionCountryId").val(ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
            }
        });
    },

    OnSuccessManufacturerSave: function (ajaxContext) {
        HideModal(function () {
            HideModal(function () {
                $("#receiptWaybillRowForEdit #ManufacturerId").val(ajaxContext.Id);
                $("#receiptWaybillRowForEdit #ManufacturerName").text(ajaxContext.Name);
            })
        });
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            var articleId = $(this).parent("td").parent("tr").find(".articleId").text();
            $("#ArticleId").val(articleId);
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());
            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#PendingCount", 12, measureUnitScale, "#receiptWaybillRowForEdit", true);

            $.ajax({
                type: "POST",
                url: "/ReceiptWaybill/GetArticleInfo/",
                data: { articleId: articleId },
                success: function (result) {
                    $("#ProductionCountryId").attr("value", result.ProductionCountryId);
                    $("#ManufacturerId").attr("value", result.ManufacturerId);
                    $("#ManufacturerName").html(result.ManufacturerName);

                    if (result.ProductionCountryId == "") {
                        $("#receiptWaybillRowForEdit #ProductionCountryId").focus();
                    }
                    else {
                        if (result.ManufacturerId == "") {
                            $("#receiptWaybillRowForEdit #ProductionCountryId").focus();
                        }
                        else {
                            $("#receiptWaybillRowForEdit #PendingSum").focus();
                        }
                    }

                    var allowToViewPurchaseCosts = $("#AllowToViewPurchaseCosts").val();
                    if (IsTrue(allowToViewPurchaseCosts)) {
                        var waybillId = $('#Id').val();
                        $.ajax({
                            type: "GET",
                            url: "/ReceiptWaybill/GetLastPurchaseCost/",
                            data: { articleId: articleId, waybillId: waybillId },
                            success: function (result) {
                                $("#receiptWaybillRowForEdit #PurchaseCost").val(result);
                                // Запрос за ГТД
                                $.ajax({
                                    type: "GET",
                                    url: "/ReceiptWaybill/GetCustomsDeclarationNumberForRow/",
                                    data: { articleId: articleId, waybillId: waybillId },
                                    success: function (result) {
                                        $("#receiptWaybillRowForEdit #CustomsDeclarationNumber").val(result);
                                        HideModal();
                                    },
                                    error: function (XMLHttpRequest, textStatus, thrownError) {
                                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                                    }
                                });
                            },
                            error: function (XMLHttpRequest, textStatus, thrownError) {
                                ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                                HideModal();
                            }
                        });
                    }
                    else {
                        HideModal();
                    }

                    $("#receiptWaybillRowForEdit #PendingCount").focus();
                    $("#PendingSumIsChangedLast").val("0");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReceiptWaybillRowEdit");
                }
            });
        });
    },

    // перерасчет суммы по товару
    UpdatePendingSum: function () {
        var cost = TryGetDecimal($("#receiptWaybillRowForEdit #PurchaseCost").val());
        var count = TryGetDecimal($("#receiptWaybillRowForEdit #PendingCount").val());

        if (!isNaN(cost) && !isNaN(count) && count != 0) {
            $("#receiptWaybillRowForEdit #PendingSum").val(ValueForEdit(cost * count, 2));
        }
        else {
            $("#receiptWaybillRowForEdit #PendingSum").val("0");
        }
        ReceiptWaybill_RowForEdit.UpdateValueAddedTaxSum();
    },

    // перерасчет закупочной цены и, возможно, повторный расчет ожидаемой суммы
    UpdatePurchaseCost: function (calculatePendingSum) {
        var sum = TryGetDecimal($("#receiptWaybillRowForEdit #PendingSum").val());
        var count = TryGetDecimal($("#receiptWaybillRowForEdit #PendingCount").val());

        if (!isNaN(sum) && !isNaN(count) && count != 0) {
            $("#receiptWaybillRowForEdit #PurchaseCost").val(BankRound(sum / count));

            // Рассчитывать ли ожидаемую сумму? Проверка одновременно на null и на undefined
            if (!(calculatePendingSum == null || IsFalse(calculatePendingSum))) {
                var purchaseCost = TryGetDecimal($("#receiptWaybillRowForEdit #PurchaseCost").val());
                $("#receiptWaybillRowForEdit #PendingSum").val(BankRound(purchaseCost * count, 2));
            }
        }
        else {
            $("#receiptWaybillRowForEdit #PurchaseCost").val("0");
        }

        ReceiptWaybill_RowForEdit.UpdateValueAddedTaxSum();
    },

    // Перерасчет суммы НДС по позиции
    UpdateValueAddedTaxSum: function () {
        var sum = TryGetDecimal($("#receiptWaybillRowForEdit #PendingSum").val());
        var vatPercent = TryGetDecimal($("#receiptWaybillRowForEdit #PendingValueAddedTaxId option:selected").attr("param"));
        var vatSum = CalculateVatSum(sum, vatPercent);

        if (!isNaN(vatSum)) {
            $("#receiptWaybillRowForEdit #ValueAddedTaxSum").text(ValueForDisplay(vatSum, 2));
        } else {
            $("#receiptWaybillRowForEdit #ValueAddedTaxSum").text("0");
        }
    }
};
﻿var Report_ReportsGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridReports table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".ReportId").text();
                $(this).find("a.Name").attr("href", "/Report/" + id + "Settings" + "?backURL=" + currentUrl);
            });
        });
    }
};﻿var Report0001_Settings = {
    Init: function () {
        $(function () {

            $("#articleGroupNameSelector").hide();

            $('#DevideByStorages').prev('span').click(function () {
                var valObj = $('#DevideByStorages');
                if (valObj.prev('span').hasClass('yes_no_toggle')) {
                    if (valObj.val() == 1) {
                        Report0001BlockToogleId(true, 'StoragesInRows', '1', 'Да');
                        Report0001BlockToogleId(true, 'ShowAccountingPrices', '0', 'Нет');
                    }
                    else {
                        Report0001BlockToogleId(false, 'StoragesInRows');
                        Report0001BlockToogleId(false, 'ShowAccountingPrices');
                    }
                }
            });

            $('#StoragesInRows').prev('span').click(function () {
                var valObj = $('#StoragesInRows');
                if (valObj.prev('span').hasClass('yes_no_toggle')) {
                    if (valObj.val() == 1) {
                        Report0001BlockToogleId(true, 'DevideByAccountOrganizations', '0', 'Нет');
                        Report0001BlockToogleId(true, 'DevideByStorages', '1', 'Да');
                        Report0001BlockToogleId(false, 'ShowAccountingPrices');
                    }
                    else {
                        Report0001BlockToogleId(false, 'DevideByAccountOrganizations');
                        Report0001BlockToogleId(false, 'DevideByStorages');
                    }
                }
            });

            $('#ShowDetailsTable').prev('span').click(function () {
                var valObj = $('#ShowDetailsTable');
                if (valObj.prev('span').hasClass('yes_no_toggle')) {
                    if (valObj.val() == 0) {
                        Report0001BlockToogleId(true, 'ShowShortDetailsTable', '0', 'Нет');
                    }
                    else {
                        Report0001BlockToogleId(false, 'ShowShortDetailsTable');
                    }
                }
            });

            $('#ShowShortDetailsTable').prev('span').click(function () {
                var valObj = $('#ShowShortDetailsTable');
                if (valObj.prev('span').hasClass('yes_no_toggle')) {
                    if (valObj.val() == 0) {
                        Report0001BlockToogleId(true, 'ShowDetailsTable', '0', 'Нет');
                    }
                    else {
                        Report0001BlockToogleId(false, 'ShowDetailsTable');
                    }
                }
            });

            $(".yes_no_toggle").live("click", function () {
                if ($(this).next("input").attr("name") == "CreateByArticleGroup") {
                    if ($(this).next("input").val() == "1") {
                        $("#articleGroupsSelector").show();
                        $("#articleGroupNameSelector").hide();
                        $("#articlesSelector").hide();
                    } else {
                        $("#articlesSelector").show();
                        $("#articleGroupNameSelector").show();
                        $("#articleGroupsSelector").hide();
                    }
                }
            });

            $("span#ArticleGroupName").live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ArticleGroup/SelectArticleGroup/",
                    success: function (result) {
                        $('#articleGroupSelector').hide().html(result);
                        ShowModal("articleGroupSelector");
                        $('#articleGroupSelector .attention').hide(); 
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0001Settings");
                    }
                });
            });

            $("#multipleSelectorArticles .multiple_selector_add_button").live("click", function () {
                CheckSelectedArticleCount();
            });

            $("#multipleSelectorArticles .multiple_selector_item").live("click", function () {
                CheckSelectedArticleCount();
            });

            $("#articleGroupSelector .tree_node_title").live("click", function () {
                var articleGroupId = $(this).next("input.value").val();
                $("#ArticleGroupName").attr("selected_id", articleGroupId);
                $("#ArticleGroupName").text($(this).text());
                $.ajax({
                    type: "GET",
                    url: "/Article/GetArticleFromArticleGroup/",
                    data: { id: articleGroupId },
                    success: function (result) {
                        $('#multipleSelectorArticles_available').find('div.multiple_selector_item').remove();
                        for (keyVar in result) {
                            $('#multipleSelectorArticles_available').append("<div class=\"multiple_selector_item link\" value=\"" + keyVar + "\">" + result[keyVar] + "</div>");
                        }
                        HideModal();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0001Settings");
                    }
                });
            });
        });

        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0001"));
            }
        });

        $('#btnExportToExcel, #btnExportToExcel2').live('click', function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0001ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0001Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0001Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var url = "/Report/" + actionName + "?Date=" + $("#Date").val() + "&DevideByAccountOrganizations=" + $("#DevideByAccountOrganizations").val() + "&" +
                $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                "&DevideByStorages=" + $("#DevideByStorages").val() +
                "&StoragesInRows=" + $("#StoragesInRows").val() + "&ShowPurchaseCosts=" + $("#ShowPurchaseCosts").val() +
                "&ShowAveragePurchaseCost=" + $("#ShowAveragePurchaseCost").val() + "&ShowAccountingPrices=" + $("#ShowAccountingPrices").val() +
                "&ShowAverageAccountingPrice=" + $("#ShowAverageAccountingPrice").val() + "&ShowExtendedAvailability=" + $("#ShowExtendedAvailability").val() +
				"&SortTypeId=" + $("#SortTypeId").val() + "&ShowDetailsTable=" + $("#ShowDetailsTable").val() + "&ShowStorageTable=" + $("#ShowStorageTable").val() +
                "&ShowShortDetailsTable=" + $("#ShowShortDetailsTable").val() + "&ShowArticleGroupTable=" + $("#ShowArticleGroupTable").val() + "&ShowAccountOrganizationTable=" +
				$("#ShowAccountOrganizationTable").val() + "&CreateByArticleGroup=" + $("#CreateByArticleGroup").val();
            if ($("#CreateByArticleGroup").val() == "1") {
                url = url + "&" + $("#multipleSelectorArticleGroups").FormSelectedEntitiesUrlParametersString("AllArticleGroups", "ArticleGroupsIDs");
            } else {
                url = url + "&" + $("#multipleSelectorArticles").FormSelectedEntityIDsUrlParametersString("ArticlesIDs");
            }

            return url;
        }

        function ValidateReportParameters() {
            if (Report0001_Settings.IsHideAllTable()) {
                scroll(0, 205);
                ShowErrorMessage("Не выбрано ни одной таблицы.", "messageReport0001Settings");
                return false;
            }

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения или не больше ", "messageReport0001Settings"))) {
                scroll(0, 205);
                return false;
            }

            if ($("#CreateByArticleGroup").val() == "1") {
                if (IsFalse($("#multipleSelectorArticleGroups").CheckSelectedEntitiesCount("Не выбрано ни одной группы товаров.",
                "Выберите все группы товаров или не больше ", "messageReport0001Settings"))) {
                    scroll(0, 205);
                    return false;
                }
            }

            if ($("#CreateByArticleGroup").val() == "0") {
                if ($("#multipleSelectorArticles_selected_values").val() == "") {
                    ShowErrorMessage("Не выбрано ни одного товара.", "messageReport0001Settings");
                    scroll(0, 205);
                    return false;
                }
                var selectedCountField = $("#multipleSelectorArticles_selectedCount");
                var selectedCount = TryGetDecimal(selectedCountField.text());
                var maxSelectedCount = TryGetDecimal($("#multipleSelectorArticles").attr("data-max-selected-count"));
                if (selectedCount > maxSelectedCount) {
                    ShowErrorMessage("Выберите не больше " + maxSelectedCount + " товаров.", "messageReport0001Settings");
                    scroll(0, 205);
                    return false;
                }
            }

            if (!Report0001_Settings.ValidateDate($("#Date").val(), "messageReport0001Settings")) {
                return false;
            }

            if ($('#StoragesInRows').val() == 0 && $('#ShowDetailsTable').val() == 0 && $('#ShowShortDetailsTable').val() == 0) {
                scroll(0, 205);
                ShowErrorMessage("Необходимо выбрать вывод либо развернутой, либо сокращенной информации по товарам.", "messageReport0001Settings");
                return false;
            }

            return true;
        }

        function Report0001BlockToogleId(isBlock, id, val, html) {
            var Current = $('#' + id);
            var parentCur = Current.prev('span');
            if (val != undefined) {
                Current.val(val);
            }
            if (isBlock) {
                parentCur.removeClass('link yes_no_toggle');
            }
            else {
                if (!parentCur.hasClass('yes_no_toggle')) {
                    parentCur.addClass('link yes_no_toggle');
                }
            }
            if (html != undefined) {
                parentCur.html(html);
            }
        }

        function CheckSelectedArticleCount() {
            var selectedCountField = $("#multipleSelectorArticles_selectedCount");
            var selectedCount = TryGetDecimal(selectedCountField.text());
            var maxSelectedCount = TryGetDecimal($("#multipleSelectorArticles").attr("data-max-selected-count"));
            if (selectedCount > maxSelectedCount) {
                selectedCountField.parent("font").attr("color", "red");
            }
            else {
                selectedCountField.parent("font").attr("color", "grey");
            }
        }
    },

    IsHideAllTable: function () {
        var result = true;
        $(".table_show [type='hidden'][id]").each(function () {
            if ($(this).val() == '1')
                result = false;
        });
        return result;
    },

    ValidateDate: function (startDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);

        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата отчета.", idMessage);

            return false;
        }

        var today = new Date();
        if (starDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата составления отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }

        return true;
    }
};﻿var Report0002_Settings = {
    Init: function () {
        $(function () {
            $('#tblGroupBy').hide();
            $("#articleGroupNameSelector").hide();

            if ($("#WithReturnFromClient").val() == "0") {
                $(".ReturnFromClientTypeSelector").hide();
            }
            else {
                $(".ReturnFromClientTypeSelector").show();
            }

            //Ищем span от YesNoToggle для развернутой таблицы
            $("#ShowDetailsTable").prev().bind('change', function () {
                if ($("#ShowDetailsTable").val() == "1") {
                    EnableYesNoToggle($("#InAvgPrice").prev());
                    EnableYesNoToggle($("#DevideByBatch").prev());
                    EnableYesNoToggle($("#ShowAdditionColumns").prev());

                    var elements = $("#tblGroupBy tbody").children();
                    //Делаем активным переключатель "Вывод развернутой информации по товарам в сокращенном виде",
                    //если есть хотя бы одна группировка 
                    //Вычитается 1 , потому что в таблице есть строка заголовка
                    if (elements.length - 1 > 0) {
                        EnableYesNoToggle($("#ShowShortDetailsTable").prev());
                    }
                }
                else {
                    ResetYesNoToggle($("#InAvgPrice").prev());
                    DisableYesNoToggle($("#InAvgPrice").prev());
                    ResetYesNoToggle($("#DevideByBatch").prev());
                    DisableYesNoToggle($("#DevideByBatch").prev());
                    ResetYesNoToggle($("#ShowAdditionColumns").prev());
                    DisableYesNoToggle($("#ShowAdditionColumns").prev());
                    ResetYesNoToggle($("#ShowShortDetailsTable").prev());
                    DisableYesNoToggle($("#ShowShortDetailsTable").prev());
                }
            });

            $("#StoragesInColumns").prev().bind('change', function () {
                if ($("#StoragesInColumns").val() == "1") {
                    ResetYesNoToggle($("#ShowSoldArticleCount").prev());
                    DisableYesNoToggle($("#ShowSoldArticleCount").prev());
                }
                else {
                    EnableYesNoToggle($("#ShowSoldArticleCount").prev());
                }
            });

            $("#WithReturnFromClient").prev(".yes_no_toggle").change(function () {
                if ($("#WithReturnFromClient").val() == "0") {
                    $(".ReturnFromClientTypeSelector").hide();
                }
                else {
                    $(".ReturnFromClientTypeSelector").show();
                }
            });

            $("#InAccountingPrice").prev(".yes_no_toggle").change(function () {
                var _this = this;
                StartLinkProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Report/Report0002StorageSelector/",
                    data: { inAccountingPrice: $("#InAccountingPrice").val() },
                    success: function (result) {
                        $("#storageSelector").html(result);
                        StopLinkProgress($(_this));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0002Settings");
                        StopLinkProgress($(_this));
                    }
                });
            });
        });

        $(".yes_no_toggle").live("click", function () {
            if ($(this).next("input").attr("name") == "CreateByArticleGroup") {
                if ($(this).next("input").val() == "1") {
                    $("#articleGroupsSelector").show();
                    $("#articleGroupNameSelector").hide();
                    $("#articlesSelector").hide();
                } else {
                    $("#articlesSelector").show();
                    $("#articleGroupNameSelector").show();
                    $("#articleGroupsSelector").hide();
                }
            }
        });

        $("span#ArticleGroupName").live("click", function () {
            $.ajax({
                type: "GET",
                url: "/ArticleGroup/SelectArticleGroup/",
                success: function (result) {
                    $('#articleGroupSelector').hide().html(result);
                    ShowModal("articleGroupSelector");
                    $('#articleGroupSelector .attention').hide();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0001Settings");
                }
            });
        });

        $("#multipleSelectorArticles .multiple_selector_add_button").live("click", function () {
            CheckSelectedArticleCount();
        });

        $("#multipleSelectorArticles .multiple_selector_item").live("click", function () {
            CheckSelectedArticleCount();
        });

        $("#articleGroupSelector .tree_node_title").live("click", function () {
            var articleGroupId = $(this).next("input.value").val();
            $("#ArticleGroupName").attr("selected_id", articleGroupId);
            $("#ArticleGroupName").text($(this).text());
            $.ajax({
                type: "GET",
                url: "/Article/GetArticleFromArticleGroup/",
                data: { id: articleGroupId },
                success: function (result) {
                    $('#multipleSelectorArticles_available').find('div.multiple_selector_item').remove();
                    for (keyVar in result) {
                        $('#multipleSelectorArticles_available').append("<div class=\"multiple_selector_item link\" value=\"" + keyVar + "\">" + result[keyVar] + "</div>");
                    }
                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0001Settings");
                }
            });
        });


        function CheckSelectedArticleCount() {
            var selectedCountField = $("#multipleSelectorArticles_selectedCount");
            var selectedCount = TryGetDecimal(selectedCountField.text());
            var maxSelectedCount = TryGetDecimal($("#multipleSelectorArticles").attr("data-max-selected-count"));
            if (selectedCount > maxSelectedCount) {
                selectedCountField.parent("font").attr("color", "red");
            }
            else {
                selectedCountField.parent("font").attr("color", "grey");
            }
        }


        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $("#btnAddGroupBy").live("click", function () {
            var curElem = $('#GroupByCollection  option:selected');
            var curVal = curElem.text();
            var curId = $('#GroupByCollection').val();
            if (IsNumber(curId)) {
                if (curId >= 0) {
                    curElem.remove();
                    var genLink = '<span class="link" id="btnDelGroupBy" delId="' + curId + '">Убрать</span>';
                    $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td style="width:40px;">' + genLink + '</td><td>' + curVal + '</td></tr>');
                    Report0002_Settings.UpdateGroupBy();
                }
            }

            //Делаем активным переключатель "Вывод развернутой информации по товарам в сокращенном виде",
            //если переключатель "Выводить развернутую таблицу" активен
            if ($("#ShowDetailsTable").val() == "1") {
                EnableYesNoToggle($("#ShowShortDetailsTable").prev());
            }

        });

        $("#btnDelGroupBy").live("click", function () {
            var id = $(this).attr('delId');
            var text = $(this).parent().next().html();
            $(this).parent().parent().remove();
            $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
            Report0002_Settings.UpdateGroupBy();

            var elements = $("#tblGroupBy tbody").children();

            //Если из группировки удаляется последний элемент, то сбрасывать переключатель
            //"Вывод развернутой информации по товарам в сокращенном виде" 
            //Вычитается 1 , потому что в таблице есть строка заголовка
            if (elements.length - 1 == 0) {
                ResetYesNoToggle($("#ShowShortDetailsTable").prev());
                DisableYesNoToggle($("#ShowShortDetailsTable").prev());
            }
        });

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0002");
                window.open(url);
            }
        });

        $('#btnExportToExcel, #btnExportToExcel2').live('click', function () {
            if (ValidateReportParameters()) {
                StartButtonProgress($(this));
                var url = CreateActionURLParameters("Report0002ExportToExcel");

                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0002Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0002Settings");
                    }
                });
            }
        });



        function CreateActionURLParameters(actionName) {
            var url = "/Report/" + actionName + "?" +
                $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs");
            if ($("#CreateByArticleGroup").val() == "1") {
                url = url + "&" + $("#multipleSelectorArticleGroups").FormSelectedEntitiesUrlParametersString("AllArticleGroups", "ArticleGroupsIDs");
            }
            else {
                url = url + "&" + $("#multipleSelectorArticles").FormSelectedEntityIDsUrlParametersString("ArticlesIDs");
            }

            url = url + "&" + $("#multipleSelectorClient").FormSelectedEntitiesUrlParametersString("AllClients", "ClientsIDs") + "&" +
                $("#multipleSelectorUser").FormSelectedEntitiesUrlParametersString("AllUsers", "UsersIDs") + "&" +
                $("#multipleSelectorAccountOrganization").FormSelectedEntitiesUrlParametersString("AllAccountOrganizations", "AccountOrganizationsIDs") +

                "&GroupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +
                "&StartDate=" + $("#StartDate").val() +
                "&EndDate=" + $("#EndDate").val() +
                "&StoragesInColumns=" + $("#StoragesInColumns").val() +
                "&DevideByBatch=" + $("#DevideByBatch").val() +
                "&CalculateMarkup=" + $("#CalculateMarkup").val() +
                "&WithReturnFromClient=" + $("#WithReturnFromClient").val() +
                "&ShowStorageTable=" + $("#ShowStorageTable").val() +
                "&ShowAccountOrganizationTable=" + $("#ShowAccountOrganizationTable").val() +
                "&ShowClientTable=" + $("#ShowClientTable").val() +
                "&ShowClientOrganizationTable=" + $("#ShowClientOrganizationTable").val() +
                "&ShowArticleGroupTable=" + $("#ShowArticleGroupTable").val() +
                "&ShowTeamTable=" + $("#ShowTeamTable").val() +
                "&ShowUserTable=" + $("#ShowUserTable").val() +
                "&ShowProviderAndProducerTable=" + $("#ShowProviderAndProducerTable").val() +
                "&ShowAdditionColumns=" + $("#ShowAdditionColumns").val() +
                "&InPurchaseCost=" + $("#InPurchaseCost").val() +
                "&InAccountingPrice=" + $("#InAccountingPrice").val() +
                "&InAvgPrice=" + $("#InAvgPrice").val() +
                "&InSalePrice=" + $("#InSalePrice").val() +
                "&WaybillStateId=" + $("input[name=WaybillStateId]:checked").val() +
                "&ShowDetailsTable=" + $("#ShowDetailsTable").val() +
                "&ReturnFromClientType=" + $("input[name=ReturnFromClientType]:checked").val() +
                "&ShowShortDetailsTable=" + $("#ShowShortDetailsTable").val() +
                "&CreateByArticleGroup=" + $("#CreateByArticleGroup").val() +
                "&ShowSoldArticleCount=" + $("#ShowSoldArticleCount").val();

            return url;
        }

        function ValidateReportParameters() {
            if (Report0002_Settings.IsHideAllTable()) {
                scroll(0, 205);
                ShowErrorMessage("Не выбрано ни одной таблицы.", "messageReport0002Settings");
                return false;
            }

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения или не больше ", "messageReport0002Settings"))) {
                scroll(0, 205);
                return false;
            }

            if ($("#CreateByArticleGroup").val() == "1") {
                if (IsFalse($("#multipleSelectorArticleGroups").CheckSelectedEntitiesCount("Не выбрано ни одной группы товаров.",
            "Выберите все группы товаров или не больше ", "messageReport0002Settings"))) {
                    scroll(0, 205);
                    return false;
                }
            }
            if ($("#CreateByArticleGroup").val() == "0") {
                if ($("#multipleSelectorArticles_selected_values").val() == "") {
                    ShowErrorMessage("Не выбрано ни одного товара.", "messageReport0002Settings");
                    scroll(0, 205);
                    return false;
                }
                var selectedCountField = $("#multipleSelectorArticles_selectedCount");
                var selectedCount = TryGetDecimal(selectedCountField.text());
                var maxSelectedCount = TryGetDecimal($("#multipleSelectorArticles").attr("data-max-selected-count"));
                if (selectedCount > maxSelectedCount) {
                    ShowErrorMessage("Выберите не больше " + maxSelectedCount + " товаров.", "messageReport0002Settings");
                    scroll(0, 205);
                    return false;
                }
            }

            if (IsFalse($("#multipleSelectorClient").CheckSelectedEntitiesCount("Не выбрано ни одного клиента.",
            "Выберите всех клиентов или не больше ", "messageReport0002Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (IsFalse($("#multipleSelectorUser").CheckSelectedEntitiesCount("Не выбрано ни одного пользователя.",
            "Выберите всех пользователей или не больше ", "messageReport0002Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (IsFalse($("#multipleSelectorAccountOrganization").CheckSelectedEntitiesCount("Не выбрано ни одной собственной организации.",
            "Выберите все собственные организации или не больше ", "messageReport0002Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (!Report0002_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0002Settings")) {
                return false;
            }

            return true;
        }
    },

    IsHideAllTable: function () {
        var result = true;
        $(".table_show [type='hidden'][id]").each(function () {
            if ($(this).val() == '1')
                result = false;
        });
        return result;
    },

    ValidateDate: function (startDate, endDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);

        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата начала.", idMessage);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата конца.", idMessage);

            return false;
        }

        if (starDateObj > endDateObj) {
            scroll(0, 205);
            ShowErrorMessage("Дата начала периода для отчета должна быть меньше даты конца.", idMessage);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата окончания периода для отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }

        return true;
    },

    UpdateGroupBy: function () {
        var str = "";
        var elements = $("#tblGroupBy tbody").children();
        for (var i = 1; i < elements.length; ++i) {
            str += $(elements[i]).attr("id");
            if (i < elements.length - 1) str += '_';
        }
        if (str != "")
            $('#tblGroupBy').show();
        else
            $('#tblGroupBy').hide();
        $('#GroupByCollectionIDs').val(str);
    }
};﻿var Report0003_Settings = {
    Init: function () {

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults").live("click", function () {
            window.location = window.location;
        });

        $('#btnExportToExcel, #btnExportToExcel2').live('click', function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0003ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0003Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0003Settings");
                    }
                });
            }
        });

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0003"));
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                "&DevideByInnerOuterMovement=" + $("#DevideByInnerOuterMovement").val() +
                "&StartDate=" + $("#StartDate").val() +
                "&EndDate=" + $("#EndDate").val();
            return Url;
        }

        function ValidateReportParameters() {

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения, или не больше ", "messageReport0003Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (!Report0003_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0003Settings")) {
                return false;
            }

            return true;
        }
    },

    ValidateDate: function (startDate, endDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);

        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата начала.", idMessage);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата конца.", idMessage);

            return false;
        }

        if (starDateObj > endDateObj) {
            scroll(0, 205);
            ShowErrorMessage("Дата начала периода для отчета должна быть меньше даты конца.", idMessage);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата окончания периода для отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }

        return true;
    }
};﻿var Report0004_Settings = {
    Init: function () {

        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0004"));
            }
        });

        $('#btnExportToExcel, #btnExportToExcel2').live('click', function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0004ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0004Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0004Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                            $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                            "&ArticleId=" + $("#ArticleId").val() +
                            "&ShowStartQuantityByStorage=" + $("#ShowStartQuantityByStorage").val() +
                            "&ShowStartQuantityByOrganization=" + $("#ShowStartQuantityByOrganization").val() +
                            "&ShowEndQuantityByStorage=" + $("#ShowEndQuantityByStorage").val() +
                            "&ShowEndQuantityByOrganization=" + $("#ShowEndQuantityByOrganization").val() +
                            "&ShowBatches=" + $("#ShowBatches").val() +
                            "&ShowPurchaseCosts=" + $("#ShowPurchaseCosts").val() +
                            "&ShowRecipientAccountingPrices=" + $("#ShowRecipientAccountingPrices").val() +
                            "&ShowSenderAccountingPrices=" + $("#ShowSenderAccountingPrices").val() +
                            "&ShowOnlyExactAvailability=" + $("#ShowOnlyExactAvailability").val() +
                            "&StartDate=" + $("#StartDate").val() +
                            "&EndDate=" + $("#EndDate").val();
            return Url;
        }

        function ValidateReportParameters() {
            if ($('#ArticleId').val() == '0') {
                scroll(0, 205);
                $('#ArticleId').ValidationError("Не выбран товар");
                return false;
            }

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения или не больше ", "messageReport0004Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (!Report0004_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0004Settings")) {
                return false;
            }
            return true;
        }

        // открытие формы выбора товара
        $("span#ArticleName").live("click", function () {
            $.ajax({
                type: "GET",
                url: "/Article/SelectArticle",
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    Report0004_Settings.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0004Settings");
                }
            });
        });
    },

    ValidateDate: function (startDate, endDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);

        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата начала.", idMessage);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата конца.", idMessage);

            return false;
        }

        if (starDateObj > endDateObj) {
            scroll(0, 205);
            ShowErrorMessage("Дата начала периода для отчета должна быть меньше даты конца.", idMessage);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата окончания периода для отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }

        return true;
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            var articleId = $(this).parent("td").parent("tr").find(".articleId").text();
            $("#ArticleId").val(articleId);
            HideModal();
        });
    }
};﻿var Report0005_Settings = {
    Init: function () {
        //установим комбобокс типа отчета
        $(function () {
            $("#rbReportSourceType_1").attr("checked", "checked");
        });

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults").live("click", function () {
            window.location = window.location;
        });

        $('#btnRender').live('click', function () {

            if (!$('#form0').validate().form()) {
                return false;
            }

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения или не больше ", "messageReport0005Settings"))) {
                scroll(0, 205);
                return;
            }
           
            if (!Report0005_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0005Settings")) {
                return;
            }

            var Url = "/Report/Report0005?" +
                            $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                            "&ArticleId=" + $("#ArticleId").val() +
                            "&ReportSourceType=" + $('input[name="ReportSourceType"]:checked').val() +
                            "&StartDate=" + $("#StartDate").val() +
                            "&EndDate=" + $("#EndDate").val() +
                            "&IncomingWaybillTypeId=" + $("#IncomingWaybillTypeId").val() +
                            "&IncomingWaybillId=" + $('#IncomingWaybillId').val();

            window.open(Url);
        });

        $('input[name="ReportSourceType"]').live('click', function () {
            var value = $(this).val();

            if (value == 1 || value == 2) {
                $('#ReportSourceType_Period').show();
                $('#ReportSourceType_Waybill').hide();
            }

            if (value == 3) {
                $('#ReportSourceType_Period').hide();
                $('#ReportSourceType_Waybill').show();
            }
        });

        // открытие формы выбора товара
        $("span#ArticleName").live("click", function () {
            $.ajax({
                type: "GET",
                url: "/Article/SelectArticle",
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    Report0005_Settings.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0005Settings");
                }
            });
        });

        $('#IncomingWaybillTypeId').live('change', function () {
            var type = $(this).val();

            if (type != "") {
                $(this).ValidationValid();
            }

            if (type != "" && $("#ArticleId").val() != '0') {
                $("span#IncomingWaybillName").removeClass('link').addClass('select_link');
            }
            else {
                $("span#IncomingWaybillName").removeClass('select_link').addClass('link');
            }
        });

        // открытие формы выбора входящей накладной
        $("span#IncomingWaybillName").live("click", function () {
            var articleId = $('#ArticleId').val();

            if (articleId == "0") {
                $('#ArticleId').ValidationError("Выберите товар");

                return false;
            }

            var waybillType = $('#IncomingWaybillTypeId').val();

            if (waybillType == "") {
                $('#IncomingWaybillTypeId').ValidationError("Выберите тип входящей накладной.");

                return false;
            }

            var methodPath;
            var gridName;
            var selectLinkClass;

            switch (waybillType) {
                case "1":
                    methodPath = "/ReceiptWaybill/SelectWaybill"
                    gridName = "gridSelectReceiptWaybill";
                    selectLinkClass = "receipt_waybill_select_link";
                    break;
                case "2":
                    methodPath = "/MovementWaybill/SelectWaybill"
                    gridName = "gridSelectMovementWaybill";
                    selectLinkClass = "movement_waybill_select_link";
                    break;
                case "3":
                    methodPath = "/ChangeOwnerWaybill/SelectWaybill"
                    gridName = "gridSelectChangeOwnerWaybill";
                    selectLinkClass = "changeowner_waybill_select_link";
                    break;
                case "4":
                    methodPath = "/ReturnFromClientWaybill/SelectWaybill"
                    gridName = "gridSelectReturnFromClientWaybill";
                    selectLinkClass = "returnfromclient_waybill_select_link";
                    break;
            }

            $.ajax({
                type: "GET",
                url: methodPath,
                data: { articleId: articleId },
                success: function (result) {
                    $('#waybillSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#waybillSelector"));
                    ShowModal("waybillSelector");

                    Report0005_Settings.BindWaybillSelection(gridName, selectLinkClass);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0005Settings");
                }
            });
        });
    },

    ValidateDate: function (startDate, endDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);
        
        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата начала.", idMessage);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата конца.", idMessage);

            return false;
        }
        
        if (starDateObj > endDateObj) {
            scroll(0, 205);
            ShowErrorMessage("Дата начала периода для отчета должна быть меньше даты конца.", idMessage);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата окончания периода для отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }
        
        return true;
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        var selectLink = $("#gridSelectArticle .article_select_link");
        selectLink.die("click");
        selectLink.live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            var articleId = $(this).parent("td").parent("tr").find(".articleId").text();
            $("#ArticleId").val(articleId);
            HideModal();
            $('#ArticleId').ValidationValid();
        });
    },

    BindWaybillSelection: function (gridName, selectLinkClass) {
        // выбор товара из списка
        $("#" + gridName + " ." + selectLinkClass).die("click");
        $("#" + gridName + " ." + selectLinkClass).live("click", function () {
            $("#IncomingWaybillName").text($(this).parent("td").parent("tr").find(".name").text());
            var waybillId = $(this).parent("td").parent("tr").find(".Id").text();
            $("#IncomingWaybillId").val(waybillId);
            HideModal();
            $("#IncomingWaybillId").ValidationValid();
        });
    }
};﻿var Report0006_Settings = {
    Init: function () {
        $(function () {
            $('#tblGroupBy').hide();
            $('#GroupByCollectionIDs').val("");
            $('#multipleSelectorClient_selected_values').val("");
            $('#multipleSelectorClientOrganization_selected_values').val("");
        });

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults").live("click", function () {
            window.location = window.location;
        });

        $("#btnAddGroupBy").live("click", function () {
            if (IsTrue($("#AllowToAddGrouping").val())) {
                var curElem = $('#GroupByCollection option:selected');
                var curVal = curElem.text();
                var curId = $('#GroupByCollection').val();
                if (IsNumber(curId)) {
                    if (curId >= 0) {
                        curElem.remove();
                        var genLink = '<span class="link" id="btnDelGroupBy" delId="' + curId + '">Убрать</span>';
                        $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td>' + genLink + '</td><td>' + curVal + '</td></tr>');
                        Report0006_Settings.UpdateGroupBy();
                    }
                }
            }
        });

        $("#btnDelGroupBy").live("click", function () {
            var id = $(this).attr('delId');
            var text = $(this).parent().next().html();
            $(this).parent().parent().remove();
            $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
            Report0006_Settings.UpdateGroupBy();
        });

        $(".yes_no_toggle").live("click", function () {
            if ($(this).next("input").attr("name") == "CreateByClient") {
                if ($(this).next("input").val() == "1") {
                    $("#clientSelector").show();
                    $("#clientOrganizationSelector").hide();
                } else {
                    $("#clientOrganizationSelector").show();
                    $("#clientSelector").hide();
                }
            }
        });

        $("#btnRender, #btnRender2").live("click", function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0006"));
            }
        });

        $("#btnExportToExcel, #btnExportToExcel2").live("click", function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0006ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0006Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0006Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                "startDate=" + $("#StartDate").val() +
                "&endDate=" + $("#EndDate").val() +
                "&groupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +
                "&showClientSummary=" + $("#ShowClientSummary").val() +
                "&showClientOrganizationSummary=" + $("#ShowClientOrganizationSummary").val() +
                "&showClientContractSummary=" + $("#ShowClientContractSummary").val() +
                "&showBalanceDocumentSummary=" + $("#ShowBalanceDocumentSummary").val() +
                "&showBalanceDocumentFullInfo=" + $("#ShowBalanceDocumentFullInfo").val() +
                "&includeExpenditureWaybillsAndReturnFromClientWaybills=" + $("#IncludeExpenditureWaybillsAndReturnFromClientWaybills").val() +
                "&includeDealPayments=" + $("#IncludeDealPayments").val() +
                "&includeDealInitialBalanceCorrections=" + $("#IncludeDealInitialBalanceCorrections").val() +
                "&createByClient=" + $("#CreateByClient").val() +
                "&" + $("#multipleSelectorTeam").FormSelectedEntitiesUrlParametersString("AllTeams", "TeamIDs");

            // В зависимости от режима создания отчета добавляем Id клиентов либо организаций клиентов
            if ($("#CreateByClient").val() == "1") {
                Url = Url + "&" + $("#multipleSelectorClient").FormSelectedEntitiesUrlParametersString("AllClients", "ClientIDs");
            } else {
                Url = Url + "&" + $("#multipleSelectorClientOrganization").FormSelectedEntitiesUrlParametersString("AllClientOrganizations", "ClientOrganizationIDs");
            }
            return Url;
        }

        function ValidateReportParameters() {
            var scroll_y = $("#messageReport0006Settings").offset().top;

            if (!Report0006_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0006Settings", true)) {
                return false;
            }

            if ($("#ShowClientSummary").val() == "0" && $("#ShowClientOrganizationSummary").val() == "0" && $("#ShowClientContractSummary").val() == "0" &&
                    $("#ShowBalanceDocumentSummary").val() == "0" && $("#ShowBalanceDocumentFullInfo").val() == "0") {

                scroll(0, scroll_y);
                ShowErrorMessage("Необходимо выбрать хотя бы одну таблицу.", "messageReport0006Settings");

                return false;
            }

            if ($("#IncludeExpenditureWaybillsAndReturnFromClientWaybills").val() == "0" && $("#IncludeDealPayments").val() == "0" &&
                    $("#IncludeDealInitialBalanceCorrections").val() == "0") {
                scroll(0, scroll_y);
                ShowErrorMessage("Необходимо учитывать хотя бы один вид документов.", "messageReport0006Settings");

                return false;
            }

            if ($("#CreateByClient").val() == "1") {
                if (IsFalse($("#multipleSelectorClient").CheckSelectedEntitiesCount("Не выбрано ни одного клиента.",
                    "Выберите всех клиентов или не больше ", "messageReport0006Settings"))) {
                    scroll(0, scroll_y);
                    return false;
                }
            }

            if ($("#CreateByClient").val() == "0") {
                if (IsFalse($("#multipleSelectorClientOrganization").CheckSelectedEntitiesCount("Не выбрано ни одной организации клиента.",
                    "Выберите все организации клиентов или не больше ", "messageReport0006Settings"))) {
                    scroll(0, scroll_y);
                    return false;
                }
            }

            if (IsFalse($("#multipleSelectorTeam").CheckSelectedEntitiesCount("Не выбрано ни одной команды.",
                    "Выберите все команды или не больше ", "messageReport0006Settings"))) {
                scroll(0, scroll_y);
                return false;
            }
            return true;
        }
    },

    ValidateDate: function (startDate, endDate, messageId, performScrolling) {
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);

        if (!isValidDate(starDateObj)) {
            if (performScrolling) {
                scroll(0, 196);
            }
            ShowErrorMessage("Неверная дата начала периода.", messageId);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            if (performScrolling) {
                scroll(0, 196);
            }
            ShowErrorMessage("Неверная дата окончания периода.", messageId);

            return false;
        }

        if (starDateObj > endDateObj) {
            if (performScrolling) {
                scroll(0, 196);
            }
            ShowErrorMessage("Дата начала периода должна быть меньше даты окончания периода.", messageId);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            if (performScrolling) {
                scroll(0, 196);
            }
            ShowErrorMessage("Дата окончания периода должна быть меньше или равна текущей дате.", messageId);

            return false;
        }

        return true;
    },

    // Обновление строки с кодами группировок, установка статуса ComboBox (выключен, если договор уже добавлен)
    UpdateGroupBy: function () {
        var clientContractGroupingId = "3";
        var clientContractGroupingAdded = false;
        var str = "";
        var elements = $("#tblGroupBy tbody").children();
        for (var i = 1; i < elements.length; ++i) {
            str += $(elements[i]).attr("id");
            if ($(elements[i]).attr("id") == clientContractGroupingId) clientContractGroupingAdded = true;
            if (i < elements.length - 1) str += '_';
        }
        if (str != "")
            $('#tblGroupBy').show();
        else
            $('#tblGroupBy').hide();
        $('#GroupByCollectionIDs').val(str);
        UpdateButtonAvailability("GroupByCollection", !clientContractGroupingAdded);
        $("#AllowToAddGrouping").val(!clientContractGroupingAdded);
    }
};
﻿var Report0006PrintingForm_Settings = {
    Init: function () {
        $(document).ready(function () {
            $("#btnPrint").click(function () {
                if (Report0006_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0006PrintingFormSettings", false)) {
                    window.open("/Report/Report0006PrintingForm?printingFormClientId=" + $("#PrintingFormClientId").val() +
                    "&printingFormClientOrganizationId=" + $("#PrintingFormClientOrganizationId").val() +
                    "&startDate=" + $("#StartDate").val() +
                    "&endDate=" + $("#EndDate").val());
                    HideModal();
                }
            });
        });
    }
};﻿var Report0007_Settings = {
    Init: function () {

        $(document).ready(function () {
            $('#tblGroupBy').hide();
            $('#GroupByCollectionIDs').val("");
            $('#multipleSelectorClient_selected_values').val("");
            $('#multipleSelectorStorage_selected_values').val("");
        });

        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $("#btnAddGroupBy").live("click", function () {
            if (IsTrue($("#AllowToAddGrouping").val())) {
                var curElem = $('#GroupByCollection option:selected');
                var curVal = curElem.text();
                var curId = $('#GroupByCollection').val();
                if (IsNumber(curId)) {
                    if (curId >= 0) {
                        curElem.remove();
                        var genLink = '<span class="link" id="btnDelGroupBy" delId="' + curId + '">Убрать</span>';
                        $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td>' + genLink + '</td><td>' + curVal + '</td></tr>');
                        Report0007_Settings.UpdateGroupBy();
                    }
                }
            }
        });

        $("#btnDelGroupBy").live("click", function () {
            var id = $(this).attr('delId');
            var text = $(this).parent().next().html();
            $(this).parent().parent().remove();
            $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
            Report0007_Settings.UpdateGroupBy();
        });

        $("#btnRender, #btnRender2").live("click", function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0007"));
            }
        });

        $("#btnExportToExcel, #btnExportToExcel2").live("click", function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0007ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0007Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0007Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                "Date=" + $("#Date").val() +
                "&ShowOnlyDelayDebt=" + $("#ShowOnlyDelayDebt").val() +
                "&GroupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +
                "&ShowStorageTable=" + $("#ShowStorageTable").val() +
                "&ShowAccountOrganizationTable=" + $("#ShowAccountOrganizationTable").val() +
                "&ShowClientTable=" + $("#ShowClientTable").val() +
                "&ShowClientOrganizationTable=" + $("#ShowClientOrganizationTable").val() +
                "&ShowDealTable=" + $("#ShowDealTable").val() +
                "&ShowTeamTable=" + $("#ShowTeamTable").val() +
                "&ShowUserTable=" + $("#ShowUserTable").val() +
                "&ShowExpenditureWaybillTable=" + $("#ShowExpenditureWaybillTable").val() +
                "&" + $("#multipleSelectorClient").FormSelectedEntitiesUrlParametersString("AllClients", "ClientIDs") +
                "&" + $("#multipleSelectorStorage").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                "&" + $("#multipleSelectorAccountOrganization").FormSelectedEntitiesUrlParametersString("AllAccountOrganizations", "AccountOrganizationIDs") +
                "&" + $("#multipleSelectorUser").FormSelectedEntitiesUrlParametersString("AllUsers", "UserIDs");
            return Url;
        }

        function ValidateReportParameters() {
            var scroll_y = $("#messageReport0007Settings").offset().top;

            if (!Report0007_Settings.ValidateDate($("#Date").val(), "messageReport0007Settings", true)) {
                return false;
            }

            if ($("#ShowStorageTable").val() == "0" && $("#ShowAccountOrganizationTable").val() == "0" && $("#ShowClientTable").val() == "0" &&
                    $("#ShowClientOrganizationTable").val() == "0" && $("#ShowDealTable").val() == "0" && $("#ShowTeamTable").val() == "0" &&
                    $("#ShowUserTable").val() == "0" && $("#ShowExpenditureWaybillTable").val() == "0") {

                scroll(0, scroll_y);
                ShowErrorMessage("Необходимо выбрать хотя бы одну таблицу.", "messageReport0007Settings");

                return false;
            }

            if (IsFalse($("#multipleSelectorClient").CheckSelectedEntitiesCount("Не выбрано ни одного клиента.",
                "Выберите всех клиентов или не больше ", "messageReport0007Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorStorage").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
                "Выберите все места хранения или не больше ", "messageReport0007Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorAccountOrganization").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация.",
                "Выберите все организации или не больше ", "messageReport0007Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorUser").CheckSelectedEntitiesCount("Не выбрано ни одного пользователя.",
                "Выберите всех пользователей или не больше ", "messageReport0007Settings"))) {
                scroll(0, scroll_y);
                return false;
            }
            return true;
        }
    },

    ValidateDate: function (date, messageId, performScrolling) {
        var dateObj = stringToDate(date);

        if (!isValidDate(dateObj)) {
            if (performScrolling) {
                scroll(0, 196);
            }
            ShowErrorMessage("Неверная дата отчета", messageId);

            return false;
        }

        return true;
    },

    // Обновление строки с кодами группировок, установка статуса ComboBox
    UpdateGroupBy: function () {
        var str = "";
        var maxElemetcount = parseInt($("#groupByCollectionCount").val());
        var elements = $("#tblGroupBy tbody").children();
        for (var i = 1; i < elements.length; ++i) {
            str += $(elements[i]).attr("id");
            if (i < elements.length - 1) str += '_';
        }
        if (str != "")
            $('#tblGroupBy').show();
        else
            $('#tblGroupBy').hide();
        $('#GroupByCollectionIDs').val(str);

        var isListEmpty = elements.length <= maxElemetcount;
        UpdateButtonAvailability("GroupByCollection", isListEmpty);
        UpdateElementVisibility("btnAddGroupBy", isListEmpty);
        $("#AllowToAddGrouping").val(isListEmpty);
    }
};﻿var Report0008_Settings = {
    Init: function () {
        $(function () {

            $("#btnBack, #btnBack2").live("click", function () {
                window.location = $('#BackURL').val();
            });

            $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
                window.location = window.location;
            });

            //-----------Установка зависимостей комбобоксов-----------------

            //Типом даты зависит от типа накладной
            $('#WaybillTypeId').FillChildComboBox('DateTypeId', "/Report/Report0008_GetWaybillDateTypeList/", 'waybillTypeId', "messageReport0008Settings", false,
            function () {
                $('#DateTypeId').trigger('change'); //а значит если мы изменям тип накладной, то автоматически изменяется тип даты
            });

            $('#WaybillOptionId').FillChildComboBoxWithMoreOption('SortDateTypeId', "/Report/Report0008_GetWaybillSortDateTypeList/", 'waybillOptionId', "messageReport0008Settings",
            function () {
                return "waybillTypeId=" + $("#WaybillTypeId").val();
            },
            function () {
                $('#SortDateTypeId').trigger('change');
            });

            //фильтр статусов накладных зависит от типа даты
            $('#DateTypeId').FillChildComboBoxWithMoreOption('WaybillOptionId', "/Report/Report0008_GetWaybillOptionList/", 'dateTypeId', "messageReport0008Settings",
            //для получения фильтров статусов накладных необходимо знать не только тип накладной, но и тип даты
            function () {
                return "waybillTypeId=" + $("#WaybillTypeId").val();
            },
            function () {
                $('#WaybillOptionId').trigger('change'); //если мы изменям тип даты, то автоматически изменяется фильтр статусов накладных
            });

            //группировка зависит от типа накладной 
            $('#WaybillTypeId').FillChildComboBox('GroupByCollection', "/Report/Report0008_GetWaybillGroupingTypeList/", 'waybillTypeId',
            "messageReport0008Settings", true,
            function () {
                Report0008_Settings.UpdateAfterWaybillTypeChange();
            });

            $("#WaybillOptionId").change(
                function () {
                    if ($('#DateTypeId').val() == 1 && $("#WaybillOptionId").val() != undefined && $("#WaybillOptionId").val() != 0) {
                        $('#PriorToDate').show();
                        $('#PriorToDateLabel').show();
                    }
                    else {
                        $('#PriorToDate').hide();
                        $('#PriorToDateLabel').hide();
                    }
                });

            //Настройка «Исключить расхождения» зависит от типа накладной
            $("#WaybillTypeId").change(
                function () {
                    if ($("#WaybillTypeId").val() == "1") {
                        $("#ExcludeDivergencesSetting").show();
                        EnableYesNoToggle($('#ExcludeDivergences').prev());
                        SetYesNoToggle($("#ExcludeDivergences").prev());
                    }
                    else {
                        ResetYesNoToggle($("#ExcludeDivergences").prev());
                        DisableYesNoToggle($('#ExcludeDivergences').prev());
                        $("#ExcludeDivergencesSetting").hide();
                    }
                });

            //-------------------------------

            $("#btnRender, #btnRender2").live("click", function () {
                if (ValidateReportParameters()) {
                    window.open(CreateActionURLParameters("Report0008"));
                }
            });

            $("#btnExportToExcel, #btnExportToExcel2").live("click", function () {
                if (ValidateReportParameters()) {
                    var url = CreateActionURLParameters("Report0008ExportToExcel");
                    StartButtonProgress($(this));
                    $.fileDownload(url, {
                        successCallback: function (response) {
                            StopButtonProgress();
                            ShowSuccessMessage("Файл успешно сформирован.", "messageReport0008Settings");
                        },
                        failCallback: function (response) {
                            StopButtonProgress();
                            ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0008Settings");
                        }
                    });
                }
            });

            function CreateActionURLParameters(actionName) {
                var Url = "/Report/" + actionName + "?" +
                "StartDate=" + $("#StartDate").val() +
                "&EndDate=" + $("#EndDate").val() +
                "&PriorToDate=" + $("#PriorToDate").val() +
                "&DateTypeId=" + $("#DateTypeId").val() +
                "&WaybillTypeId=" + $("#WaybillTypeId").val() +
                "&ExcludeDivergences=" + $("#ExcludeDivergences").val() +
                "&WaybillOptionId=" + $("#WaybillOptionId").val() +
                "&SortDateTypeId=" + $("#SortDateTypeId").val() +
                "&GroupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +
                "&ShowAdditionInfo=" + $("#ShowAdditionInfo").val() +
                "&" + $("#multipleSelectorStorage").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") +
                "&" + $("#multipleSelectorCurator").FormSelectedEntitiesUrlParametersString("AllCurators", "CuratorIDs");

                // Если выбрана накладная реализации или возврата, то добавляем клиентов
                if ($("#WaybillTypeId").val() == "4" || $("#WaybillTypeId").val() == "6") {
                    Url = Url + "&" + $("#multipleSelectorClient").FormSelectedEntitiesUrlParametersString("AllClients", "ClientIDs");
                }

                // Если выбрана приходная накладная, то добавляем поставщиков
                if ($("#WaybillTypeId").val() == "1") {
                    Url = Url + "&" + $("#multipleSelectorProvider").FormSelectedEntitiesUrlParametersString("AllProviders", "ProviderIDs");
                }

                return Url;
            }

            function ValidateReportParameters() {
                if (!Report0006_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0008Settings", true)) {
                    return false;
                }

                //проверяем "До даты" только если она отображается
                if ($('#DateTypeId').val() == 1 &&
                   $("#WaybillOptionId").val() != undefined &&
                   $("#WaybillOptionId").val() != 0 &&
                   !Report0008_Settings.ValidatePriorToDate($("#PriorToDate").val(), $("#EndDate").val(), $("#StartDate").val(),
                        "messageReport0008Settings", true)) {
                    return false;
                }

                if ($("#WaybillTypeId").val() == "") {
                    scroll(0, 205);
                    ShowErrorMessage("Необходимо указать тип выводимых накладных.", "messageReport0008Settings");

                    return false;
                }

                if ($("#DateTypeId").val() == "") {
                    scroll(0, 205);
                    ShowErrorMessage("Необходимо указать тип даты.", "messageReport0008Settings");

                    return false;
                }

                if ($("#WaybillOptionId").val() == "") {
                    scroll(0, 205);
                    ShowErrorMessage("Необходимо указать статусы выводимых накладных.", "messageReport0008Settings");

                    return false;
                }

                if ($("#SortDateTypeId").val() == "") {
                    scroll(0, 205);
                    ShowErrorMessage("Необходимо указать дату для сортировки выводимых накладных.", "messageReport0008Settings");

                    return false;
                }

                if (IsFalse($("#multipleSelectorStorage").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
                "Выберите все места хранения или не больше ", "messageReport0008Settings"))) {
                    scroll(0, 205);
                    return false;
                }

                if (IsFalse($("#multipleSelectorCurator").CheckSelectedEntitiesCount("Не выбрано ни одного куратора накладных.",
                "Выберите всех кураторов или не больше ", "messageReport0008Settings"))) {
                    scroll(0, 205);
                    return false;
                }

                // Если выбрана накладная реализации или возврата, то добавляем клиентов
                if ($("#WaybillTypeId").val() == "4" || $("#WaybillTypeId").val() == "6") {
                    if (IsFalse($("#multipleSelectorClient").CheckSelectedEntitiesCount("Не выбрано ни одного клиента.",
                "Выберите всех клиентов или не больше ", "messageReport0008Settings"))) {
                        scroll(0, 205);
                        return false;
                    }
                }

                // Если выбрана приходная накладная, то добавляем поставщиков
                if ($("#WaybillTypeId").val() == "1") {
                    if (IsFalse($("#multipleSelectorProvider").CheckSelectedEntitiesCount("Не выбрано ни одного поставщика.",
                "Выберите всех поставщиков или не больше ", "messageReport0008Settings"))) {
                        scroll(0, 205);
                        return false;
                    }
                }

                return true;
            }

            $("#btnAddGroupBy").live("click", function () {
                var curElem = $('#GroupByCollection option:selected');
                var curVal = curElem.text();
                var curId = $('#GroupByCollection').val();
                if (IsNumber(curId)) {

                    if (curId >= 0) {
                        curElem.remove();
                        var genLink = '<span class="link" id="btnDelGroupBy" delId="' + curId + '">Убрать</span>';
                        $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td>' + genLink + '</td><td>' + curVal + '</td></tr>');
                    }
                    //Если в накладной перемещения выбираем группировку по одному из типов МХ, то другой удаляем
                    if ($("#WaybillTypeId").val() == 2) {
                        if (curId == 2) {
                            RemoveOption(3);
                        }
                        if (curId == 3) {
                            RemoveOption(2);
                        }
                    }
                    Report0008_Settings.UpdateGroupBy();

                }
            });

            $("#btnDelGroupBy").live("click", function () {
                var id = $(this).attr('delId');
                var text = $(this).parent().next().html();
                $(this).parent().parent().remove();
                $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
                //Если в накладной перемещения удаляем группировку по одному из типов МХ, то востанавливаем возможность выбора другого типа МХ
                if ($("#WaybillTypeId").val() == 2) {
                    if (id == 2) {
                        RestoreOption(3);
                    }
                    if (id == 3) {
                        RestoreOption(2);
                    }
                }
                Report0008_Settings.UpdateGroupBy();
            });

            //Поместить тег option в корзину
            function RemoveOption(id) {
                $('#basket').append($('#GroupByCollection [value = ' + id + ']'));
            }

            //Востановить тег option
            function RestoreOption(id) {
                $('#GroupByCollection').append($('#basket [value = ' + id + ']'));
            }

        });
    },

    UpdateAfterWaybillTypeChange: function () {
        var _this = $("#WaybillTypeId");

        Report0008_Settings.ClearGroupBy();

        //В случае выбора накладной реализации или накладной возврата загружаем список клиентов
        if (_this.val() == "4" || _this.val() == "6") {   // Накладная реализации или возврата 
            if ($("#clientSelectorContainer").html() == "") {

                StartLinkProgress($('#clientSelectorProgress'));

                // Подгружаем контент для выбора клиентов
                $.ajax({
                    type: "GET",
                    url: "/Report/Report0008_GetClientSelector/",
                    success: function (result) {
                        $('#clientSelectorWrapper').show();
                        $("#clientSelectorContainer").html(result);
                        StopLinkProgress();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0008Settings");
                    }
                });
            }
            else {
                $("#clientSelectorWrapper").show();
            }
        }
        else {
            $("#clientSelectorWrapper").hide();
        }

        //В случае выбора приходной накладной загружаем поставщиков
        if (_this.val() == "1") {   // Приходная накладная 
            if ($("#providerSelectorContainer").html() == "") {

                StartLinkProgress($('#providerSelectorProgress'));

                // Подгружаем контент для выбора поставщиков
                $.ajax({
                    type: "GET",
                    url: "/Report/Report0008_GetProviderSelector/",
                    success: function (result) {
                        $('#providerSelectorWrapper').show();
                        $("#providerSelectorContainer").html(result);
                        StopLinkProgress();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReport0008Settings");
                    }
                });
            }
            else {
                $("#providerSelectorWrapper").show();
            }
        }
        else {
            $("#providerSelectorWrapper").hide();
        }
    },

    //Отчищаем грппировки при смене типа накладной
    ClearGroupBy: function () {
        var elements = $("#tblGroupBy tbody").children();

        for (var i = 1; i < elements.length; ++i) {
            $(elements[i]).remove();
        }
        $('basket').html(''); //отчищаем корзину
        Report0008_Settings.UpdateGroupBy();
    },

    // Обновление строки с кодами группировок
    UpdateGroupBy: function () {
        var str = "";
        var elements = $("#tblGroupBy tbody").children();

        for (var i = 1; i < elements.length; ++i) {
            str += $(elements[i]).attr("id");
            if (i < elements.length - 1) str += '_';
        }
        if (str != "")
            $('#tblGroupBy').show();
        else
            $('#tblGroupBy').hide();
        $('#GroupByCollectionIDs').val(str);

        var isListEmpty = ($('#GroupByCollection').children().length == 0);
        UpdateButtonAvailability("GroupByCollection", !isListEmpty);
        UpdateElementVisibility("btnAddGroupBy", !isListEmpty);
    },

    ValidatePriorToDate: function (priorToDate, endDate, startDate, messageId, performScrolling) {
        var priorToDateObj = stringToDate(priorToDate);
        var endDateObj = stringToDate(endDate);
        var startDateObj = stringToDate(startDate);

        if (!isValidDate(priorToDateObj)) {
            if (performScrolling) {
                scroll(0, 205);
            }
            ShowErrorMessage("Неверная дата в поле «До даты».", messageId);

            return false;
        }

        if (priorToDateObj < endDateObj) {
            if (performScrolling) {
                scroll(0, 205);
            }
            ShowErrorMessage("Дата в поле «До даты» не может быть меньше даты окончания периода.", messageId);

            return false;
        }

        return true;
    }


};

//Функция основана на функции FillChildComboBox из Common.js. Перенесена сюда в свзязи с специфичными изменениями, которые могут порушить
//обратную совместимость 
//связывание комбобоксов
// источник - родительский комбобокс
// childId - id дочернего
// methodPath - путь к методу контроллера, который принимает выбранный элемент родительского и возвращает список значений для дочернего
// parameterName - имя параметра, передаваемого в метод контроллера
// errorMessageId - id элемента, в который писать сообщение об ошибке
// noEmptyOption - не добавлять пустой элемент
// moreOptions - дополнительные параметры строкой для GET-запроса вида paramName1=param1&paramName2=param2
$.fn.FillChildComboBoxWithMoreOption = function (childId, methodPath, parameterName, errorMessageId, moreOptionsCallback, callback) {
    var parentId = this.attr('id');
    var parentComboBox = this;
    var childComboBox = $('#' + childId);

    this.bind("keyup change", function () {
        childComboBox.attr('disabled', 'disabled');

        var moreOptions = "";
        if (moreOptionsCallback != undefined)
            moreOptions = "&" + moreOptionsCallback();

        var selectedId = parentComboBox.val();
        if (selectedId == "" || selectedId == null) {
            childComboBox.clearSelect();
            if (callback !== undefined)
                callback();
        }
        else {
            StartComboBoxProgress($("#" + childId));

            $.ajax({
                type: "GET",
                url: methodPath,
                data: parameterName + '=' + selectedId + moreOptions,
                success: function (result) {
                    if (result != 0) {

                        var noEmptyOption = false;
                        if (result.SelectedOption != "")
                            noEmptyOption = true;

                        childComboBox.fillSelect(result, noEmptyOption);
                        childComboBox.removeAttr('disabled').removeClass('input-validation-error');
                        $('#' + childId + '_validationMessage').addClass('field-validation-valid').removeClass('field-validation-error');
                        StopComboBoxProgress($("#" + childId));
                        if (callback !== undefined)
                            callback();
                    }
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, errorMessageId);
                    StopComboBoxProgress($("#" + childId));
                    if (callback !== undefined)
                        callback();
                }
            });
        }
    });
}
﻿var Report0009_Settings = {
    Init: function () {
        $(function () {
            //Зависимости между настройками

            $("#ShowDetailsTable, #ShowDetailReceiptWaybillRowsWithDivergencesTable").prev().bind('change', function () {
                if (($("#ShowDetailsTable").val() == "1") || ($("#ShowDetailReceiptWaybillRowsWithDivergencesTable").val() == "1")) {
                    EnableYesNoToggle($("#InCurrentAccountingPrice").prev());
                    EnableYesNoToggle($("#ShowBatch").prev());
                    EnableYesNoToggle($("#ShowCountArticleInPack").prev());
                }
                else {
                    ResetYesNoToggle($("#InCurrentAccountingPrice").prev());
                    DisableYesNoToggle($("#InCurrentAccountingPrice").prev());

                    ResetYesNoToggle($("#ShowBatch").prev());
                    DisableYesNoToggle($("#ShowBatch").prev());

                    ResetYesNoToggle($("#ShowCountArticleInPack").prev());
                    DisableYesNoToggle($("#ShowCountArticleInPack").prev());
                }
            });

            $("#DateTypeId").bind('change', function () {
                if ($("#DateTypeId").val() == "3" || $("#DateTypeId").val() == "4") {
                    ResetYesNoToggle($("#ShowDetailReceiptWaybillRowsWithDivergencesTable").prev());
                    DisableYesNoToggle($("#ShowDetailReceiptWaybillRowsWithDivergencesTable").prev());
                }
                else {
                    EnableYesNoToggle($("#ShowDetailReceiptWaybillRowsWithDivergencesTable").prev());
                }
            });

            $("#ShowBatch").prev().bind('change', function () {
                if (($("#ShowBatch").val() == "1")) {
                    EnableYesNoToggle($("#InPurchaseCost").prev());
                    EnableYesNoToggle($("#InRecipientWaybillAccountingPrice").prev());
                    EnableYesNoToggle($("#CalculateMarkup").prev());

                    EnableYesNoToggle($("#ShowCountryOfProduction").prev());
                    EnableYesNoToggle($("#ShowManufacturer").prev());
                    EnableYesNoToggle($("#ShowCustomsDeclarationNumber").prev());
                }
                else {
                    ResetYesNoToggle($("#InPurchaseCost").prev());
                    DisableYesNoToggle($("#InPurchaseCost").prev());

                    ResetYesNoToggle($("#InRecipientWaybillAccountingPrice").prev());
                    DisableYesNoToggle($("#InRecipientWaybillAccountingPrice").prev());

                    ResetYesNoToggle($("#CalculateMarkup").prev());
                    DisableYesNoToggle($("#CalculateMarkup").prev());

                    ResetYesNoToggle($("#ShowCountryOfProduction").prev());
                    DisableYesNoToggle($("#ShowCountryOfProduction").prev());

                    ResetYesNoToggle($("#ShowManufacturer").prev());
                    DisableYesNoToggle($("#ShowManufacturer").prev());

                    ResetYesNoToggle($("#ShowCustomsDeclarationNumber").prev());
                    DisableYesNoToggle($("#ShowCustomsDeclarationNumber").prev());
                }
            });

        });

        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $("#btnAddGroupBy").live("click", function () {
            var curElem = $('#GroupByCollection  option:selected');
            var curVal = curElem.text();
            var curId = $('#GroupByCollection').val();
            if (IsNumber(curId)) {
                if (curId >= 0) {
                    curElem.remove();
                    var genLink = '<span class="link" id="btnDellGroupBy" delId="' + curId + '">Убрать</span>';
                    $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td style="width:40px;">' + genLink + '</td><td>' + curVal + '</td></tr>');
                    Report0009_Settings.UpdateGroupBy();
                }
            }
        });

        $("#btnDellGroupBy").live("click", function () {
            var id = $(this).attr('delId');
            var text = $(this).parent().next().html();
            $(this).parent().parent().remove();
            $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
            Report0009_Settings.UpdateGroupBy();
        });

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0009"));
            }
        });

        $("#btnExportToExcel, #btnExportToExcel2").live("click", function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0009ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0009Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0009Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                            $("#multipleSelectorStorages").FormSelectedEntitiesUrlParametersString("AllStorages", "StorageIDs") + "&" +
                            $("#multipleSelectorArticleGroups").FormSelectedEntitiesUrlParametersString("AllArticleGroups", "ArticleGroupsIDs") + "&" +
                            $("#multipleSelectorProviders").FormSelectedEntitiesUrlParametersString("AllProviders", "ProvidersIDs") + "&" +
                            $("#multipleSelectorUser").FormSelectedEntitiesUrlParametersString("AllUsers", "UsersIDs") +

                            "&StartDate=" + $("#StartDate").val() +
                            "&EndDate=" + $("#EndDate").val() +
                            "&DateTypeId=" + $("#DateTypeId").val() +
                            "&GroupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +

                            "&ShowDetailsTable=" + $("#ShowDetailsTable").val() +
                            "&ShowDetailReceiptWaybillRowsWithDivergencesTable=" + $("#ShowDetailReceiptWaybillRowsWithDivergencesTable").val() +
                            "&ShowStorageTable=" + $("#ShowStorageTable").val() +
                            "&ShowOrganizationTable=" + $("#ShowOrganizationTable").val() +
                            "&ShowArticleGroupTable=" + $("#ShowArticleGroupTable").val() +
                            "&ShowProviderTable=" + $("#ShowProviderTable").val() +
                            "&ShowProviderOrganizationTable=" + $("#ShowProviderOrganizationTable").val() +
                            "&ShowUserTable=" + $("#ShowUserTable").val() +

                            "&InPurchaseCost=" + $("#InPurchaseCost").val() +
                            "&InRecipientWaybillAccountingPrice=" + $("#InRecipientWaybillAccountingPrice").val() +
                            "&InCurrentAccountingPrice=" + $("#InCurrentAccountingPrice").val() +

                            "&ShowBatch=" + $("#ShowBatch").val() +
                            "&ShowCountArticleInPack=" + $("#ShowCountArticleInPack").val() +
                            "&ShowCountryOfProduction=" + $("#ShowCountryOfProduction").val() +
                            "&ShowManufacturer=" + $("#ShowManufacturer").val() +
                            "&ShowCustomsDeclarationNumber=" + $("#ShowCustomsDeclarationNumber").val() +
                            "&CalculateMarkup=" + $("#CalculateMarkup").val();
            return Url;
        }

        function ValidateReportParameters() {
            if (Report0009_Settings.IsHideAllTable()) {
                scroll(0, 205);
                ShowErrorMessage("Не выбрано ни одной таблицы.", "messageReport0009Settings");
                return false;
            }

            if ($("#DateTypeId").val() == "") {
                scroll(0, 205);
                ShowErrorMessage("Выберите тип даты, которая должна попадать в отчет.", "messageReport0009Settings");
                return false;
            }

            if (($("#DateTypeId").val() == "3" || $("#DateTypeId").val() == "4") && $("#ShowDetailReceiptWaybillRowsWithDivergencesTable").val() == "1") {
                scroll(0, 205);
                ShowErrorMessage("Параметр «Выводить развернутую таблицу с расхождениями» не может быть равен «Да» при выбранном типе даты.", "messageReport0009Settings");
                return false;
            }

            if (IsFalse($("#multipleSelectorStorages").CheckSelectedEntitiesCount("Не выбрано ни одного места хранения.",
            "Выберите все места хранения или не больше ", "messageReport0009Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (IsFalse($("#multipleSelectorArticleGroups").CheckSelectedEntitiesCount("Не выбрано ни одной группы товаров.",
            "Выберите все группы товаров или не больше ", "messageReport0009Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (IsFalse($("#multipleSelectorProviders").CheckSelectedEntitiesCount("Не выбрано ни одного поставщика.",
            "Выберите всех поставщиков или не больше ", "messageReport0009Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (IsFalse($("#multipleSelectorUser").CheckSelectedEntitiesCount("Не выбрано ни одного пользователя.",
            "Выберите всех пользователей или не больше ", "messageReport0009Settings"))) {
                scroll(0, 205);
                return false;
            }

            if (!Report0009_Settings.ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0009Settings")) {
                return false;
            }
            return true;
        }
    },

    IsHideAllTable: function () {
        var result = true;
        $(".table_show [type='hidden'][id]").each(function () {
            if ($(this).val() == '1')
                result = false;
        });
        return result;
    },

    ValidateDate: function (startDate, endDate, idMessage) {
        // проверка дат
        var starDateObj = stringToDate(startDate);
        var endDateObj = stringToDate(endDate);

        if (!isValidDate(starDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата начала.", idMessage);

            return false;
        }

        if (!isValidDate(endDateObj)) {
            scroll(0, 205);
            ShowErrorMessage("Неверная дата конца.", idMessage);

            return false;
        }

        if (starDateObj > endDateObj) {
            scroll(0, 205);
            ShowErrorMessage("Дата начала периода для отчета должна быть меньше даты конца.", idMessage);

            return false;
        }

        var today = new Date();
        if (endDateObj > today) {
            scroll(0, 205);
            ShowErrorMessage("Дата окончания периода для отчета должна быть меньше или равна текущей дате.", idMessage);

            return false;
        }

        return true;
    },

    UpdateGroupBy: function () {
        var str = "";
        var elements = $("#tblGroupBy tbody").children();
        for (var i = 1; i < elements.length; ++i) {
            str += $(elements[i]).attr("id");
            if (i < elements.length - 1) str += '_';
        }
        if (str != "")
            $('#tblGroupBy').show();
        else
            $('#tblGroupBy').hide();
        $('#GroupByCollectionIDs').val(str);

        var isListEmpty = ($('#GroupByCollection').children().length == 0);
        UpdateButtonAvailability("GroupByCollection", !isListEmpty);
        UpdateElementVisibility("btnAddGroupBy", !isListEmpty);
    }
};﻿var Report0010_Settings = {
    Init: function () {
        $(function () {
            $('#multipleSelectorClient_selected_values').val("");
            $('#multipleSelectorTeam_selected_values').val("");
            $('#multipleSelectorUser_selected_values').val("");

            // управляем зависимостями от параметра «Развернутая информация с документами оплат»
            $("#ShowDetailsTable").prev().bind('change', function () {
                if (IsTrue($("#ShowDetailsTable").val())) {
                    EnableYesNoToggle($("#SeparateByDealPaymentForm").prev());
                    EnableYesNoToggle($("#ShowDistributedAndUndistributedSums").prev());
                    EnableYesNoToggle($("#ShowDistributionDetails").prev());
                }
                else {
                    ResetYesNoToggle($("#SeparateByDealPaymentForm").prev());
                    DisableYesNoToggle($("#SeparateByDealPaymentForm").prev());
                    ResetYesNoToggle($("#ShowDistributedAndUndistributedSums").prev());
                    DisableYesNoToggle($("#ShowDistributedAndUndistributedSums").prev());
                    ResetYesNoToggle($("#ShowDistributionDetails").prev());
                    DisableYesNoToggle($("#ShowDistributionDetails").prev());
                }

                $("#ShowDistributedAndUndistributedSums").prev().trigger("change");
            });

            // управляем зависимостями от параметра «Выводить столбцы «Разнесено в сумме» и «Неразнесенный остаток»»
            $("#ShowDistributedAndUndistributedSums").prev().bind('change', function () {
                if (IsTrue($("#ShowDistributedAndUndistributedSums").val())) {
                    EnableYesNoToggle($("#ShowDistributionDetails").prev());
                }
                else {
                    ResetYesNoToggle($("#ShowDistributionDetails").prev());
                    DisableYesNoToggle($("#ShowDistributionDetails").prev());
                }
            });
        });

        $("#btnBack, #btnBack2").live("click", function () {
            window.location = $('#BackURL').val();
        });

        $("#btnRestoreDefaults, #btnRestoreDefaults2").live("click", function () {
            window.location = window.location;
        });

        $("#btnAddGroupBy").live("click", function () {
            var curElem = $('#GroupByCollection option:selected');
            var curVal = curElem.text();
            var curId = $('#GroupByCollection').val();
            if (IsNumber(curId)) {
                if (curId >= 0) {
                    curElem.remove();
                    var genLink = '<span class="link" id="btnDelGroupBy" delId="' + curId + '">Убрать</span>';
                    $("#tblGroupBy tbody").append('<tr id="' + curId + '"><td>' + genLink + '</td><td>' + curVal + '</td></tr>');
                    UpdateGroupBy();
                }
            }
        });

        $("#btnDelGroupBy").live("click", function () {
            var id = $(this).attr('delId');
            var text = $(this).parent().next().html();
            $(this).parent().parent().remove();
            $('#GroupByCollection').append('<option value="' + id + '">' + text + '</option>');
            UpdateGroupBy();
        });

        // Обновление строки с кодами группировок, установка статуса ComboBox (выключен, если договор уже добавлен)
        function UpdateGroupBy() {
            var str = "";
            var elements = $("#tblGroupBy tbody").children();

            for (var i = 1; i < elements.length; ++i) {
                str += $(elements[i]).attr("id");
                if (i < elements.length - 1) str += '_';
            }
            if (str != "")
                $('#tblGroupBy').show();
            else
                $('#tblGroupBy').hide();
            $('#GroupByCollectionIDs').val(str);

            var isListEmpty = ($('#GroupByCollection').children().length == 0);
            UpdateButtonAvailability("GroupByCollection", !isListEmpty);
            UpdateElementVisibility("btnAddGroupBy", !isListEmpty);
        }

        $('#btnRender, #btnRender2').live('click', function () {
            if (ValidateReportParameters()) {
                window.open(CreateActionURLParameters("Report0010"));
            }
        });

        $("#btnExportToExcel, #btnExportToExcel2").live("click", function () {
            if (ValidateReportParameters()) {
                var url = CreateActionURLParameters("Report0010ExportToExcel");
                StartButtonProgress($(this));
                $.fileDownload(url, {
                    successCallback: function (response) {
                        StopButtonProgress();
                        ShowSuccessMessage("Файл успешно сформирован.", "messageReport0010Settings");
                    },
                    failCallback: function (response) {
                        StopButtonProgress();
                        ShowErrorMessage("Произошла ошибка при выгрузке отчета: " + response, "messageReport0010Settings");
                    }
                });
            }
        });

        function CreateActionURLParameters(actionName) {
            var Url = "/Report/" + actionName + "?" +
                "startDate=" + $("#StartDate").val() +
                "&endDate=" + $("#EndDate").val() +
                "&groupByCollectionIDs=" + $("#GroupByCollectionIDs").val() +
                "&showClientSummary=" + $("#ShowClientSummary").val() +
                "&showClientOrganizationSummary=" + $("#ShowClientOrganizationSummary").val() +
                "&showAccountOrganizationSummary=" + $("#ShowAccountOrganizationSummary").val() +
                "&showClientContractSummary=" + $("#ShowClientContractSummary").val() +
                "&showTeamSummary=" + $("#ShowTeamSummary").val() +
                "&showUserSummary=" + $("#ShowUserSummary").val() +
                "&showDetailsTable=" + $("#ShowDetailsTable").val() +
                "&separateByDealPaymentForm=" + $("#SeparateByDealPaymentForm").val() +
                "&showDistributedAndUndistributedSums=" + $("#ShowDistributedAndUndistributedSums").val() +
                "&showDistributionDetails=" + $("#ShowDistributionDetails").val() +
                "&" + $("#multipleSelectorClient").FormSelectedEntitiesUrlParametersString("AllClients", "ClientIDs") +
                "&" + $("#multipleSelectorAccountOrganization").FormSelectedEntitiesUrlParametersString("AllAccountOrganizations", "AccountOrganizationIDs") +
                "&" + $("#multipleSelectorTeam").FormSelectedEntitiesUrlParametersString("AllTeams", "TeamIDs") +
                "&" + $("#multipleSelectorUser").FormSelectedEntitiesUrlParametersString("AllUsers", "UserIDs");
            return Url;
        }

        function ValidateReportParameters() {
            var scroll_y = $("#messageReport0010Settings").offset().top - 10;

            if (!ValidateDate($("#StartDate").val(), $("#EndDate").val(), "messageReport0010Settings", true, scroll_y)) {
                return false;
            }

            if ($("#ShowClientSummary").val() == "0" && $("#ShowClientOrganizationSummary").val() == "0" && $("#ShowClientContractSummary").val() == "0" &&
                    $("#ShowTeamSummary").val() == "0" && $("#ShowUserSummary").val() == "0" && $("#ShowDetailsTable").val() == "0") {

                scroll(0, scroll_y);
                ShowErrorMessage("Необходимо выбрать хотя бы одну таблицу.", "messageReport0010Settings");

                return false;
            }

            if (IsFalse($("#multipleSelectorClient").CheckSelectedEntitiesCount("Не выбрано ни одного клиента.",
                "Выберите всех клиентов или не больше ", "messageReport0010Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorAccountOrganization").CheckSelectedEntitiesCount("Не выбрана ни одна собственная организация.",
                "Выберите все организации или не больше ", "messageReport0010Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorTeam").CheckSelectedEntitiesCount("Не выбрано ни одной команды.",
                    "Выберите все команды или не больше ", "messageReport0010Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            if (IsFalse($("#multipleSelectorUser").CheckSelectedEntitiesCount("Не выбрано ни одного пользователя.",
                "Выберите всех пользователей или не больше ", "messageReport0010Settings"))) {
                scroll(0, scroll_y);
                return false;
            }

            return true;
        }

        function ValidateDate(startDate, endDate, messageId, performScrolling, scroll_y) {
            var starDateObj = stringToDate(startDate);
            var endDateObj = stringToDate(endDate);

            if (!isValidDate(starDateObj)) {
                if (performScrolling) {
                    scroll(0, scroll_y);
                }
                ShowErrorMessage("Неверная дата начала периода.", messageId);

                return false;
            }

            if (!isValidDate(endDateObj)) {
                if (performScrolling) {
                    scroll(0, scroll_y);
                }
                ShowErrorMessage("Неверная дата окончания периода.", messageId);

                return false;
            }

            if (starDateObj > endDateObj) {
                if (performScrolling) {
                    scroll(0, scroll_y);
                }
                ShowErrorMessage("Дата начала периода должна быть меньше даты окончания периода.", messageId);

                return false;
            }

            var today = new Date();
            if (endDateObj > today) {
                if (performScrolling) {
                    scroll(0, scroll_y);
                }
                ShowErrorMessage("Дата окончания периода должна быть меньше или равна текущей дате.", messageId);

                return false;
            }

            return true;
        }
    }
};
﻿var ReturnFromClientReason_Edit = {
    OnBeginReturnFromClientReasonSave: function () {
        StartButtonProgress($("#btnSaveReturnFromClientReason"));
    },

    OnFailReturnFromClientReasonSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageReturnFromClientReasonEdit");
    }
};
﻿var ReturnFromClientReason_List = {
    OnSuccessReturnFromClientReasonSave: function () {
        HideModal();
        RefreshGrid("gridReturnFromClientReason", function () {
            ShowSuccessMessage("Сохранено.", "messageReturnFromClientReasonList");
        });
    }
};
﻿var ReturnFromClientReason_ReturnFromClientReasonGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateReturnFromClientReason').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ReturnFromClientReason_ReturnFromClientReasonGrid.ShowReturnFromClientReasonDetailsForEdit(id);
            });

            $('#gridReturnFromClientReason .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ReturnFromClientReason_ReturnFromClientReasonGrid.ShowReturnFromClientReasonDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ReturnFromClientReason";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridReturnFromClientReason", function () {
                                ShowSuccessMessage("Удалено.", "messageReturnFromClientReasonList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientReasonList");
                        }
                    });
                }
            });
        });
    },

    ShowReturnFromClientReasonDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ReturnFromClientReason";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#returnFromClientReasonEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#returnFromClientReasonEdit"));
                ShowModal("returnFromClientReasonEdit");
                $("#returnFromClientReasonEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientReasonList");
            }
        });
    }
};
﻿var ReturnFromClientWaybill_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#btnBackTo").live('click', function () {
                window.location = $('#BackURL').val();
            });

            $('#btnEdit').live("click", function () {
                window.location = "/ReturnFromClientWaybill/Edit?id=" + $('#Id').val() + GetBackUrl();
            });

            $('#btnDelete').live('click', function () {
                if (confirm('Вы уверены?')) {
                    var returnFromClientWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReturnFromClientWaybill/Delete/",
                        data: { id: returnFromClientWaybillId },
                        success: function () {
                            window.location = "/ReturnFromClientWaybill/List";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                        }
                    });
                }
            });

            $("#btnPrepareToAccept").live('click', function () {
                var returnFromClientWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ReturnFromClientWaybill/PrepareToAccept",
                    data: { returnFromClientWaybillId: returnFromClientWaybillId },
                    success: function (result) {
                        RefreshGrid("gridReturnFromClientWaybillRows", function () {
                            ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                            ShowSuccessMessage("Накладная подготовлена к проводке.", "messageReturnFromClientWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            $("#btnCancelReadinessToAccept").live('click', function () {
                if (confirm('Вы уверены?')) {
                    var returnFromClientWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReturnFromClientWaybill/CancelReadinessToAccept",
                        data: { returnFromClientWaybillId: returnFromClientWaybillId },
                        success: function (result) {
                            RefreshGrid("gridReturnFromClientWaybillRows", function () {
                                ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                                ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                                ShowSuccessMessage("Готовность накладной к проводке отменена.", "messageReturnFromClientWaybillEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                        }
                    });
                }
            });

            $("#btnAccept").live('click', function () {
                var returnFromClientWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ReturnFromClientWaybill/Accept",
                    data: { returnFromClientWaybillId: returnFromClientWaybillId },
                    success: function (result) {
                        RefreshGrid("gridReturnFromClientWaybillRows", function () {
                            ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                            ShowSuccessMessage("Накладная проведена.", "messageReturnFromClientWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            $("#btnCancelAcceptance").live('click', function () {
                if (confirm('Вы уверены?')) {
                    var returnFromClientWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReturnFromClientWaybill/CancelAcceptance",
                        data: { returnFromClientWaybillId: returnFromClientWaybillId },
                        success: function (result) {
                            RefreshGrid("gridReturnFromClientWaybillRows", function () {
                                ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                                ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                                ShowSuccessMessage("Проводка накладной отменена.", "messageReturnFromClientWaybillEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                        }
                    });
                }
            });

            $("#btnReceipt").live('click', function () {
                var returnFromClientWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/ReturnFromClientWaybill/Receipt",
                    data: { returnFromClientWaybillId: returnFromClientWaybillId },
                    success: function (result) {
                        ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                        ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                        ShowSuccessMessage("Накладная принята.", "messageReturnFromClientWaybillEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            $("#btnCancelReceipt").live('click', function () {
                if (confirm('Вы уверены?')) {
                    var returnFromClientWaybillId = $('#Id').val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/ReturnFromClientWaybill/CancelReceipt",
                        data: { returnFromClientWaybillId: returnFromClientWaybillId },
                        success: function (result) {
                            ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                            ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                            ShowSuccessMessage("Приемка накладной отменена.", "messageReturnFromClientWaybillEdit");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                        }
                    });
                }
            });

            // ТОРГ-12
            $('#printingFormTORG12').live('click', function () {
                $.ajax({
                    type: "GET",
                    url: "/ReturnFromClientWaybill/ShowTORG12PrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#returnFromClientWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#returnFromClientWaybillPrintingForm"));
                        ShowModal("returnFromClientWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            // Изменить куратора
            $("#linkChangeCurator").click(function () {
                var dealId = $("#DealId").val();
                var storageId = $("#RecipientStorageId").val();

                Waybill_Edit.ShowCuratorSelectorForm(6/*WaybillTypeId*/, storageId, dealId, null, "messageReturnFromClientWaybillEdit");
            });

            // обработка выбора куратора
            $(".select_user").live("click", function () {
                Waybill_Details.HandlerForSelectCurator(6/*waybillTypeId*/, $(this));
            });
        });
    },

    RefreshMainDetails: function (details) {
        $("#StateName").text(details.StateName);
        $("#PurchaseCostSum").text(details.PurchaseCostSum);
        $("#SalePriceSum").text(details.SalePriceSum);
        $("#AccountingPriceSum").text(details.AccountingPriceSum);
        $("#RowCount").text(details.RowCount);

        $("#CuratorName").text(details.CuratorName);
        $("#CuratorId").val(details.CuratorId);
        $("#AcceptedByName").text(details.AcceptedByName);
        $("#AcceptedById").val(details.AcceptedById);
        $("#AcceptanceDate").text(details.AcceptanceDate);
        $("#ReceiptedByName").text(details.ReceiptedByName);
        $("#ReceiptedById").val(details.ReceiptedById);
        $("#ReceiptDate").text(details.ReceiptDate);

        $("#AllowToViewAcceptedByDetails").val(details.AllowToViewAcceptedByDetails);
        $("#AllowToViewReceiptedByDetails").val(details.AllowToViewReceiptedByDetails);

        $("#AcceptedByContainer").css("display", details.AcceptedById != "" ? "inline" : "none");
        $("#ReceiptedByContainer").css("display", details.ReceiptedById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');

        $("#TotalWeight").text(details.TotalWeight);
        $("#TotalVolume").text(details.TotalVolume);
    },

    RefreshPermissions: function (permissions) {
        UpdateButtonAvailability("btnPrepareToAccept", permissions.AllowToPrepareToAccept);
        UpdateElementVisibility("btnPrepareToAccept", permissions.IsPossibilityToPrepareToAccept);

        UpdateButtonAvailability("btnCancelReadinessToAccept", permissions.AllowToCancelReadinessToAccept);
        UpdateElementVisibility("btnCancelReadinessToAccept", permissions.AllowToCancelReadinessToAccept);

        UpdateButtonAvailability("btnAccept", permissions.AllowToAccept);
        UpdateElementVisibility("btnAccept", permissions.IsPossibilityToAccept);

        UpdateButtonAvailability("btnCancelAcceptance", permissions.AllowToCancelAcceptance);
        UpdateElementVisibility("btnCancelAcceptance", permissions.AllowToCancelAcceptance);

        UpdateButtonAvailability("btnCancelReceipt", permissions.AllowToCancelReceipt);
        UpdateElementVisibility("btnCancelReceipt", permissions.AllowToCancelReceipt);

        UpdateButtonAvailability("btnDelete", permissions.AllowToDelete);
        UpdateElementVisibility("btnDelete", permissions.AllowToDelete);

        UpdateButtonAvailability("btnEdit", permissions.AllowToEdit);
        UpdateElementVisibility("btnEdit", permissions.AllowToEdit);

        UpdateButtonAvailability("btnCreateRow", permissions.AllowToEdit);
        UpdateElementVisibility("btnCreateRow", permissions.AllowToEdit);

        UpdateButtonAvailability("btnReceipt", permissions.AllowToReceipt);
        UpdateElementVisibility("btnReceipt", permissions.AllowToReceipt);

        UpdateElementVisibility("linkChangeCurator", permissions.AllowToChangeCurator);

        UpdateElementVisibility("feature_menu_box", permissions.AllowToPrintForms);
    }
};﻿var ReturnFromClientWaybill_Details_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');

            SetEntityDetailsLink('AllowToViewRecipientStorageDetails', 'RecipientStorageName', 'Storage', 'RecipientStorageId');

            SetEntityDetailsLink('AllowToViewClientDetails', 'ClientName', 'Client', 'ClientId');

            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewReceiptedByDetails', 'ReceiptedByName', 'User', 'ReceiptedById');

            SetEntityDetailsLink('AllowToViewDealDetails', 'DealName', 'Deal', 'DealId');

            SetEntityDetailsLink('AllowToViewTeamDetails', 'TeamName', 'Team', 'TeamId');

            SetEntityDetailsLink(null, 'RecipientName', 'AccountOrganization', 'RecipientId');
        });     
    }
};﻿var ReturnFromClientWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {
            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");
            }

            //Блокируем поля, зависящие от сделки
            if ($("#DealId").val() == "0" || $("#DealId").val() == "") {
                $("#ReceiptStorageId").attr("disabled", "disabled");
                $("#TeamId").attr("disabled", "disabled");
            }

            $("#btnBack").live('click', function () {
                if ($("#Id").val() == "00000000-0000-0000-0000-000000000000") {
                    // Не удалять. Таким образом мы исправляем баг 132.
                    window.location = $('#BackURL').val();
                }
                else {
                    window.location = "/ReturnFromClientWaybill/Details?id=" + $("#Id").val() + GetBackUrlFromString($('#BackURL').val());
                }
            });

            $("span#ClientName").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Client/SelectClient",
                    success: function (result) {
                        $("#selector").hide().html(result);
                        ShowModal("selector");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            $('#btnCreateReturnFromClientReason').live("click", function () {
                $.ajax({
                    type: "GET",
                    url: "/ReturnFromClientReason/Create",
                    success: function (result) {
                        $('#returnFromClientReasonEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#returnFromClientReasonEdit"));
                        ShowModal("returnFromClientReasonEdit");
                        $('#returnFromClientReasonEdit #Name').focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                    }
                });
            });

            $(".select_client").live('click', function () {
                var clientId = $(this).parent("td").parent("tr").find(".Id").text();
                var clientName = $(this).parent("td").parent("tr").find(".Name").text();

                HideModal(function () {
                    $('#ClientId').val(clientId);
                    $('#ClientName').text(clientName);

                    $("#ClientId").ValidationValid();

                    //Сбрасываем сделку, организацию и МХ
                    $("#DealName").text("Выберите сделку");
                    $("#DealId").val("0");

                    $("#AccountOrganizationName").text("---");
                    $("#AccountOrganizationId").val("");

                    $('#ReceiptStorageId').clearSelect();
                });
            });

            $("span#DealName").click(function () {
                var clientId = $("#ClientId").val();

                if (clientId != "0") {
                    StartLinkProgress($(this));

                    $.ajax({
                        type: "GET",
                        url: "/Deal/SelectDealByClient",
                        data: { clientId: clientId, mode: "ForReturnFromClient" },
                        success: function (result) {
                            $("#selector").hide().html(result);
                            ShowModal("selector");
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientReasonEdit");
                        }
                    });
                }
                else {
                    $("#ClientId").ValidationError("Укажите клиента");
                }
            });

            $(".select_deal").live("click", function () {
                StartComboBoxProgress($("#ReceiptStorageId"));
                StartComboBoxProgress($("#TeamId"));

                var id = $(this).parent("td").parent("tr").find(".Id").text();
                var name = $(this).parent("td").parent("tr").find(".Name").text();

                var accountOrganizationId = $(this).parent("td").parent("tr").find(".AccountOrganizationId").text();
                var accountOrganizationName = $(this).parent("td").parent("tr").find(".AccountOrganizationName").text();

                $("#DealName").text(name);
                $("#DealId").val(id);

                $("#AccountOrganizationName").text(accountOrganizationName);
                $("#AccountOrganizationId").val(accountOrganizationId);

                if (accountOrganizationId != "0") {
                    // Запрос за МХ
                    $.ajax({
                        type: "GET",
                        url: "/ReturnFromClientWaybill/GetStorageListForAccountOrganization",
                        data: { accountOrganizationId: accountOrganizationId },
                        success: function (accountOrganizationList) {
                            // Запрос за командами
                            $.ajax({
                                type: "GET",
                                url: "/ReturnFromClientWaybill/GetTeamList",
                                data: { dealId: id },
                                success: function (teamList) {
                                    // Все запросы успешны, выводим данные
                                    $('#ReceiptStorageId').removeAttr("disabled").fillSelect(accountOrganizationList);
                                    $('#TeamId').removeAttr("disabled").fillSelect(teamList, true);

                                    StopComboBoxProgress($("#ReceiptStorageId"));
                                    StopComboBoxProgress($("#TeamId"));
                                },
                                error: function (XMLHttpRequest, textStatus, thrownError) {
                                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                                }
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
                        }
                    });
                }
                else {
                    $('#ReceiptStorageId').clearSelect();
                }

                HideModal();
            });

            $("#CuratorName").attr("href", "/User/Details?id=" + $("#CuratorId").val() + GetBackUrl());

            $("#CuratorName").click(function () {
                var dealId = $("#DealId").val();
                var storageId = $("#ReceiptStorageId").val();

                if (dealId != "" && dealId != null && storageId != "" && storageId != null) {
                    Waybill_Edit.ShowCuratorSelectorForm(6/*WaybillTypeId*/, storageId, dealId, $(this), "messageReturnFromClientWaybillEdit");
                }
                else {
                    if (dealId == "" || dealId == null) {
                        $("#DealId").ValidationError("Укажите сдеклку.");
                    }
                    if (storageId == "" || storageId == null) {
                        $("#ReceiptStorageId").ValidationError("Укажите место хранения.");
                    }
                }
            });
        });
    },

    // при успешной попытке добавления/редактирования возвратной накладной
    OnSuccessReturnFromClientWaybillEdit: function (ajaxContext) {
        window.location = "/ReturnFromClientWaybill/Details?id=" + ajaxContext + "&backURL=" + $('#BackURL').val();
    },

    // при неудачной попытке добавления/редактирования приходной накладной
    OnFailReturnFromClientWaybillEdit: function (ajaxContext) {
        $('.field-validation-error').text("");
        ShowErrorMessage(ajaxContext.responseText, "messageReturnFromClientWaybillEdit");
    },

    OnSuccessReturnFromClientReasonEdit: function (ajaxContext) {
        $.ajax({
            type: "GET",
            url: "/ReturnFromClientWaybill/GetReturnFromClientReasonList",
            success: function (result) {
                $('#ReturnFromClientReasonId').fillSelect(result);
                $('#ReturnFromClientReasonId').attr('value', ajaxContext.Id);
                ShowSuccessMessage("Основание для возврата добавлено.", "messageReturnFromClientWaybillEdit");
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillEdit");
            }
        });

        HideModal();
    }
};﻿var ReturnFromClientWaybill_NewAndAcceptedGrid = {
    Init: function () {
        $(document).ready(function () {
            
            $("#gridNewAndAcceptedReturnFromClientWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReturnFromClientWaybill/Details?id=" + id + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var recipientStorageId = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + recipientStorageId + GetBackUrl());

                var recipientId = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + recipientId + GetBackUrl());
            });

            $('#btnCreateReturnFromClientWaybill').click(function () {
                window.location = "/ReturnFromClientWaybill/Create?" + GetBackUrl(true);
            });
        });
    }
};﻿var ReturnFromClientWaybill_ReceiptedGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();
            $("#gridReceiptedReturnFromClientWaybill table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/ReturnFromClientWaybill/Details?id=" + id + GetBackUrl());

                var clientId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + clientId + GetBackUrl());

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + GetBackUrl());

                var recipientStorageId = $(this).find(".RecipientStorageId").text();
                $(this).find("a.RecipientStorageName").attr("href", "/Storage/Details?id=" + recipientStorageId + GetBackUrl());

                var recipientId = $(this).find(".RecipientId").text();
                $(this).find("a.RecipientName").attr("href", "/AccountOrganization/Details?id=" + recipientId + GetBackUrl());                
            });
        });
    }
};﻿var ReturnFromClientWaybill_RowEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#ReturningCount", 12, $("#MeasureUnitScale").val(), "#returnFromClientWaybillRowEdit", true);
        });

        $("span#ArticleName.select_link").bind('click', function () {
            var dealId = $('#DealId').val();
            var teamId = $("#TeamId").val();
            var recipientId = $('#RecipientId').val();

            $.ajax({
                type: "GET",
                url: "/Article/SelectArticleToReturn/",
                data: { dealId: dealId, teamId: teamId, recipientId: recipientId, date: $("#ReturnFromClientWaybillDate").val() },
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    ReturnFromClientWaybill_RowEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillRowEdit");
                }
            });
        });

        $("#SaleLink.select_link").click(function () {
            var currentArticleSaleId = null;
            if ($("#returnFromClientWaybillRowEdit #CurrentSaleWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                currentArticleSaleId = $("#returnFromClientWaybillRowEdit #CurrentSaleWaybillRowId").val();
            }
            ReturnFromClientWaybill_RowEdit.SelectArticleSale(currentArticleSaleId);
        });

        $("#ReturningCount").bind("keyup change paste cut", function () {
            ReturnFromClientWaybill_Shared.CheckSaveButtonAvailability();
        });
    },

    OnFailReturnFromClientWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageReturnFromClientWaybillRowEdit");
    },

    OnSuccessReturnFromClientWaybillRowEdit: function (ajaxContext) {
        if ($('#returnFromClientWaybillRowEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
            RefreshGrid("gridReturnFromClientWaybillRows", function () {
                RefreshGrid("gridArticleGroups", function () {
                    ReturnFromClientWaybill_Details.RefreshMainDetails(ajaxContext.MainDetails);
                    ReturnFromClientWaybill_Details.RefreshPermissions(ajaxContext.Permissions);
                    HideModal(function () {
                        ShowSuccessMessage("Сохранено.", "messageReturnFromClientWaybillRowList");
                    });
                });
            });
        }
        else {
            RefreshGrid("gridReturnFromClientWaybillRows", function () {
                RefreshGrid("gridArticleGroups", function () {
                    ReturnFromClientWaybill_RowEdit.ClearForm();
                    ReturnFromClientWaybill_Details.RefreshMainDetails(ajaxContext.MainDetails);
                    ReturnFromClientWaybill_Details.RefreshPermissions(ajaxContext.Permissions);
                    ShowSuccessMessage("Сохранено.", "messageReturnFromClientWaybillRowEdit");
                });
            });
        }
    },

    ClearForm: function () {
        $("#ArticleName").text("Выберите товар");
        $("#ArticleId").val("");
        $("#returnFromClientWaybillRowEdit #MeasureUnitName").text("");

        $("#returnFromClientWaybillRowEdit #SaleWaybillName").text("не выбран");
        $("#returnFromClientWaybillRowEdit #PurchaseCost").text("---");

        $("#returnFromClientWaybillRowEdit #TotalSoldCount").text("---");
        $("#returnFromClientWaybillRowEdit #AvailableToReturnCount").text("---");
        $("#returnFromClientWaybillRowEdit #ReturnedCount").text("---");

        $("#returnFromClientWaybillRowEdit #PurchaseCost").text("---");
        $("#returnFromClientWaybillRowEdit #SaleWaybillRowId").val("00000000-0000-0000-0000-000000000000");

        $("#returnFromClientWaybillRowEdit #AccountingPrice").text("---");
        $("#returnFromClientWaybillRowEdit #SalePrice").text("---");

        $("#returnFromClientWaybillRowEdit #ReturningCount").val("");
        $("#returnFromClientWaybillRowEdit #ReturningCount").removeClass("input-validation-error");
        $("#returnFromClientWaybillRowEdit #ReturningCount_validationMessage").hide();

        SetFieldScale("#ReturningCount", 12, 0, "#returnFromClientWaybillRowEdit", true);

        DisableButton("btnSaveReturnFromClientWaybillRow");
        $("#SaleLink").hide();
    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die();
        $("#gridSelectArticle .article_select_link").live("click", function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());

            $("#SaleLink").show();

            HideModal(function () {
                var currentArticleSaleId = null;
                if ($("#returnFromClientWaybillRowEdit #CurrentSaleWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                    currentArticleSaleId = $("#returnFromClientWaybillRowEdit #CurrentSaleWaybillRowId").val();
                }

                ReturnFromClientWaybill_RowEdit.SelectArticleSale(currentArticleSaleId);
            });
        });
    },

    BindArticleSaleSelection: function () {
        $("#gridSelectArticleSale .articleSale_select_link").die();
        $("#gridSelectArticleSale .articleSale_select_link").live("click", function () {
            var availableToReturnCount = $(this).parent("td").parent("tr").find(".AvailableToReturnCount").text().replaceAll(' ', '');
            var purchaseCost = $(this).parent("td").parent("tr").find(".PurchaseCost").text();
            var accountingPrice = $(this).parent("td").parent("tr").find(".AccountingPrice").text();

            $("#returnFromClientWaybillRowEdit #SaleWaybillName").text($(this).parent("td").parent("tr").find(".SaleWaybillName").text());
            $("#returnFromClientWaybillRowEdit #TotalSoldCount").text($(this).parent("td").parent("tr").find(".SoldCount").text());
            $("#returnFromClientWaybillRowEdit #AvailableToReturnCount").text(availableToReturnCount);
            $("#returnFromClientWaybillRowEdit #ReturnedCount").text($(this).parent("td").parent("tr").find(".ReturnedCount").text());
            $("#returnFromClientWaybillRowEdit #SaleWaybillRowId").val($(this).parent("td").parent("tr").find(".SaleWaybillRowId").text());
            $("#returnFromClientWaybillRowEdit #SalePrice").text($(this).parent("td").parent("tr").find(".SalePrice").text());

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#ReturningCount", 12, measureUnitScale, "#returnFromClientWaybillRowEdit", true);

            if (IsTrue($("#AllowToViewPurchaseCost").val())) {
                $("#returnFromClientWaybillRowEdit #PurchaseCost").text(purchaseCost);
            }
            else {
                $("#returnFromClientWaybillRowEdit #PurchaseCost").text("---");
            }

            if (IsTrue($("#AllowToViewAccountingPrice").val())) {
                $("#returnFromClientWaybillRowEdit #AccountingPrice").text(accountingPrice);
            }
            else {
                $("#returnFromClientWaybillRowEdit #AccountingPrice").text("---");
            }

            HideModal(function () {
                $("#SaleLink").show();

                $("#returnFromClientWaybillRowEdit #ReturningCount").val("");
                $("#returnFromClientWaybillRowEdit #ReturningCount").focus();
            });
        });
    },

    SelectArticleSale: function (articleSaleToExcludeId) {
        $.ajax({
            type: "GET",
            url: "/Article/SelectArticleSale/",
            data: { articleId: $("#ArticleId").val(), dealId: $("#DealId").val(), teamId: $("#TeamId").val(), recipientId: $("#RecipientId").val(),
                date: $("#ReturnFromClientWaybillDate").val(), articleSaleToExcludeId: articleSaleToExcludeId, storageId: $("#RecipientStorageId").val()
            },
            success: function (result) {
                $('#articleSaleSelector').hide().html(result);
                $.validator.unobtrusive.parse($("#articleSaleSelector"));
                ShowModal("articleSaleSelector");
                ReturnFromClientWaybill_RowEdit.BindArticleSaleSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                if ($("#returnFromClientWaybillRowEdit #CurrentSaleWaybillRowId").val() == "00000000-0000-0000-0000-000000000000") {
                    ReturnFromClientWaybill_RowEdit.ClearForm();
                }
                ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillRowEdit");
            }
        });
    }
};
﻿var ReturnFromClientWaybill_RowGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridReturnFromClientWaybillRows table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".SaleWaybillId").text();
                $(this).find("a.SaleWaybillName").attr("href", "/ExpenditureWaybill/Details?id=" + id + GetBackUrl());
            });

            $("#btnCreateRow").click(function () {
                var returnFromClientWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ReturnFromClientWaybill/AddRow",
                    data: { returnFromClientWaybillId: returnFromClientWaybillId },
                    success: function (result) {
                        $('#returnFromClientWaybillRowEdit').hide().html(result);
                        //$.validator.unobtrusive.parse($("#returnFromClientWaybillRowEdit"));
                        ShowModal("returnFromClientWaybillRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillRowList");
                    }
                });
            });

            $("#gridReturnFromClientWaybillRows .edit_link, #gridReturnFromClientWaybillRows .details_link").click(function () {
                var returnFromClientWaybillId = $('#Id').val();
                var returnFromClientWaybillRowId = $(this).parent("td").parent("tr").find(".returnFromClientWaybillRowId").text();

                $.ajax({
                    type: "GET",
                    url: "/ReturnFromClientWaybill/EditRow",
                    data: { returnFromClientWaybillId: returnFromClientWaybillId, returnFromClientWaybillRowId: returnFromClientWaybillRowId },
                    success: function (result) {
                        $('#returnFromClientWaybillRowEdit').hide().html(result);
                        //$.validator.unobtrusive.parse($("#returnFromClientWaybillRowEdit"));
                        ShowModal("returnFromClientWaybillRowEdit");
                        $("#SaleLink").show();
                        $("#returnFromClientWaybillRowEdit #ReturningCount").focus();
                        ReturnFromClientWaybill_Shared.CheckSaveButtonAvailability();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillRowList");
                    }
                });
            });

            // удаление позиции накладной
            $("#gridReturnFromClientWaybillRows .delete_link").click(function () {
                if (confirm('Вы уверены?')) {
                    var returnFromClientWaybillId = $('#Id').val();
                    var returnFromClientWaybillRowId = $(this).parent("td").parent("tr").find(".returnFromClientWaybillRowId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/ReturnFromClientWaybill/DeleteRow/",
                        data: { returnFromClientWaybillId: returnFromClientWaybillId, returnFromClientWaybillRowId: returnFromClientWaybillRowId },
                        success: function (result) {
                            RefreshGrid("gridReturnFromClientWaybillRows", function () {
                                RefreshGrid("gridArticleGroups", function () {
                                    ReturnFromClientWaybill_Details.RefreshMainDetails(result.MainDetails);
                                    ReturnFromClientWaybill_Details.RefreshPermissions(result.Permissions);
                                    ShowSuccessMessage("Позиция удалена.", "messageReturnFromClientWaybillRowList");
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageReturnFromClientWaybillRowList");
                        }
                    });
                }
            });

        });
    }
};﻿var ReturnFromClientWaybill_Shared = {
    CheckSaveButtonAvailability: function () {
        var returningCount = TryGetDecimal($("#returnFromClientWaybillRowEdit #ReturningCount").val());
        var availableToReturnCount = TryGetDecimal($("#returnFromClientWaybillRowEdit #AvailableToReturnCount").text().replaceAll(' ', ''));
        if (!isNaN(returningCount) && !isNaN(availableToReturnCount) && (returningCount <= availableToReturnCount) && (returningCount > 0)) {
            EnableButton("btnSaveReturnFromClientWaybillRow");
        }
        else {
            DisableButton("btnSaveReturnFromClientWaybillRow");
        }
    }
};﻿var Role_Details = {
    Init: function () {
        $('#btnEdit').live("click", function () {
            var id = $('#Id').val();
            window.location = "/Role/Edit?id=" + id + GetBackUrl();
        });

        $('#btnDelete').live("click", function () {
            if (confirm('Вы уверены?')) {
                var id = $('#Id').val();

                $.ajax({
                    type: "POST",
                    url: "/Role/Delete/",
                    data: { roleId: id },
                    success: function () {
                        window.location = "/Role/List";
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageRoleEdit");
                    }
                });
            }
        });

        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });

        $("#commonTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetCommonPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#productionTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetProductionPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#articleDistributionTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetArticleDistributionPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#salesTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetSalesPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#taskTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetTaskDistributionPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#reportsTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetReportsPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#directoriesTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetDirectoriesPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });

        $("#usersTab").live("click", function () {
            $("#tabPanel_menu_container div").removeClass("selected");
            $(this).addClass("selected");

            var id = $('#Id').val();

            $.ajax({
                url: "/Role/GetUsersPermissions/",
                data: { roleId: id },
                success: function (result) {
                    $("#permissionGroupContainer").html(result);
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageRolePermissionEdit");
                }
            });
        });
    }
};﻿var Role_RolesGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridRoles table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Role/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnCreateRole").click(function () {
                window.location = "/Role/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var Role_UsersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridUsers table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".UserId").text();
                $(this).find("a.UserName").attr("href", "/User/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddUser").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/User/SelectUserByRole",
                    data: { roleId: $("#Id").val() },
                    success: function (result) {
                        $("#userSelector").hide().html(result);
                        ShowModal("userSelector");

                        BindUserSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                    }
                });
            });

            $("#gridUsers .remove_user").click(function () {
                if (confirm("Вы уверены?")) {
                    var userId = $(this).parent("td").parent("tr").find(".UserId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Role/RemoveUser",
                        data: { roleId: $("#Id").val(), userId: userId },
                        success: function (result) {
                            RefreshGrid("gridUsers", function () {
                                RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Пользователь лишен данной роли.", "messageUserList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                        }
                    });
                }
            });
        });

        function BindUserSelection() {
            $("#gridSelectUser .select_user").die("click");
            $("#gridSelectUser .select_user").live('click', function () {
                var userId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/Role/AddUser",
                    data: { roleId: $("#Id").val(), userId: userId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridUsers", function () {
                                RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Роль добавлена.", "messageUserList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        HideModal(function () {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                        });
                    }
                });
            });
        }
    }
};﻿var Setting_List = {
    Init: function () {
        $("#btnBack").live("click", function () {
            window.location = $("#BackURL").val();
        });
    },

    OnBeginSettingSave: function (ajaxContext) {
        StartButtonProgress($("#btnSaveSetting"));
    },

    OnSuccessSettingSave: function (ajaxContext) {
        ShowSuccessMessage("Сохранено.", "messageSettingList");
    },

    OnFailSettingSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageSettingList");
    },

    GetSettingUrl: function () {
        return "/Setting?" + GetBackUrl(true);
    }
};﻿var Storage_AccountOrganizationSelectList = {
    Init: function () {
        $(document).ready(function () {
            DisableButton("btnSaveAccountOrganization");

            $('#SelectedAccountOrganizationId').change(function () {
                if ($('#SelectedAccountOrganizationId').val() == "") {
                    DisableButton("btnSaveAccountOrganization");
                }
                else {
                    EnableButton("btnSaveAccountOrganization");
                }
            });
        });
    },

    OnFailStorageAccountOrganizationAdd: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageAccountOrganizationEdit");
    }
};﻿var Storage_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#btnEditStorage").live('click', function () {
                var storage_id = $("#storage_id").val();

                $.ajax({
                    type: "GET",
                    url: "/Storage/Edit/",
                    data: { id: storage_id },
                    success: function (result) {
                        $('#storageEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageEdit"));
                        ShowModal("storageEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageDetails");
                    }
                });
            });

            // создание реестра цен по умолчанию для данного места хранения
            $('#btnCreatePriceListByDefault').live('click', function () {
                var storage_id = $("#storage_id").val();
                window.location = "/AccountingPriceList/Create?reasonCode=3&additionalId=" + storage_id + GetBackUrl();
            });

            // удаление места хранения
            $("#btnDeleteStorage").live("click", function () {
                if (confirm('Вы действительно хотите удалить место хранения?')) {
                    var storage_id = $("#storage_id").val();

                    StartButtonProgress($(this));
                    $.ajax({
                        type: "POST",
                        url: "/Storage/Delete/",
                        data: { id: storage_id },
                        success: function (result) {
                            window.location = "/Storage/List/";
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageDetails");
                        }
                    });
                };
            });

            // возврат к списку
            $("#btnBackToList").live('click', function () {
                window.location = $('#BackURL').val();
            });

            // добавление связанной организации
            $("#btnAddAccountOrganization").live('click', function () {
                var storage_id = $("#storage_id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Storage/GetAvailableAccountOrganizations",
                    data: { storageId: storage_id },
                    success: function (result) {
                        $('#accountOrganizationSelectList').hide().html(result);
                        $.validator.unobtrusive.parse($("#accountOrganizationSelectList"));
                        ShowModal("accountOrganizationSelectList");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationAdd");
                    }
                });
            });

            // удаление связанной организации
            $("#gridAccountOrganization .delete_accountOrganization_link").live('click', function () {
                if (confirm('Вы уверены?')) {
                    var accountOrganizationId = $(this).parent("td").parent("tr").find(".accountOrganizationId").text();
                    var storageId = $("#storage_id").val();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Storage/DeleteAccountOrganization/",
                        data: { accountOrganizationId: accountOrganizationId, storageId: storageId },
                        success: function (result) {
                            RefreshGrid("gridAccountOrganization", function () {
                                Storage_Details.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Организация удалена.", "messageAccountOrganizationAdd");                                
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageAccountOrganizationAdd");
                        }
                    });
                }
            });

            // добавление секции места хранения
            $("#btnCreateStorageSection").live("click", function () {
                var storage_id = $("#storage_id").val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/Storage/AddSection",
                    data: { storageId: storage_id },
                    success: function (result) {
                        $('#storageSectionEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageSectionEdit"));
                        ShowModal("storageSectionEdit");
                        $("#storageSectionEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageSectionList");
                    }
                });
            });

            // редактирование секции места хранения
            $("#gridStorageSection .name_link").live('click', function () {
                var storageId = $("#storage_id").val();
                var storageSectionId = $(this).parent("td").parent("tr").find(".storageSectionId").text();

                $.ajax({
                    type: "GET",
                    url: "/Storage/EditSection/",
                    data: { storageSectionId: storageSectionId, storageId: storageId },
                    success: function (result) {
                        $('#storageSectionEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageSectionEdit"));
                        ShowModal("storageSectionEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageSectionList");
                    }
                });
            });


            // удаление секции места хранения
            $("#gridStorageSection .delete_storageSection_link").live('click', function () {
                if (confirm('Вы действительно хотите удалить секцию?')) {
                    var storageSectionId = $(this).parent("td").parent("tr").find(".storageSectionId").text();
                    var storageId = $("#storage_id").val();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Storage/DeleteStorageSection/",
                        data: { storageSectionId: storageSectionId, storageId: storageId },
                        success: function (result) {
                            RefreshGrid("gridStorageSection", function () {
                                Storage_Details.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Секция удалена.", "messageStorageSectionList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageSectionList");
                        }
                    });
                }
            });
        });
    },

    // после успешной попытки редактирования места хранения
    OnSuccessStorageSave: function (result) {
        HideModal();
        Storage_Details.RefreshMainDetails(result.MainDetails);
        $(".page_title_item_name").text($("#Name").text());
        ShowSuccessMessage("Сохранено.", "messageStorageDetails");         
    },

    // при успешной попытке добавления связанной организации
    OnSuccessStorageAccountOrganizationAdd: function (result) {       
        HideModal();
        RefreshGrid("gridAccountOrganization", function () {
            Storage_Details.RefreshMainDetails(result.MainDetails);
            ShowSuccessMessage("Организация добавлена.", "messageAccountOrganizationAdd");            
        });
    },

    // при успешной попытке добавления/редактирования секции
    OnSuccessStorageSectionSave: function (result) {
        HideModal();
        RefreshGrid("gridStorageSection", function () {
            Storage_Details.RefreshMainDetails(result.MainDetails);
            ShowSuccessMessage("Сохранено.", "messageStorageSectionList");            
        });
    },

    // обновление основной информации
    RefreshMainDetails: function (details) {
        $("#SectionCount").text(details.SectionCount);
        $("#Name").text(details.Name);
        $("#AccountOrganizationCount").text(details.AccountOrganizationCount);
        $("#TypeName").text(details.TypeName);
        $("#Comment").html(details.Comment);
    },
}; ﻿var Storage_Grid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridStorage table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });
        });
    }
};﻿var Storage_List = {
    Init: function () {
        $(document).ready(function () {
            $("#btnCreateStorage").live('click', function () {
                $.ajax({
                    type: "GET",
                    url: "/Storage/Create/",
                    success: function (result) {
                        $('#storageEdit').hide().html(result);
                        $.validator.unobtrusive.parse($("#storageEdit"));
                        ShowModal("storageEdit");
                        $("#storageEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageList");
                    }
                });
            });

            $("#gridStorage .delete_link").live("click", function () {
                if (confirm('Вы уверены?')) {
                    var storage_id = $(this).parent("td").parent("tr").find(".Id").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Storage/Delete/",
                        data: { id: storage_id },
                        success: function (result) {
                            RefreshGrid("gridStorage", function () {
                                ShowSuccessMessage("Место хранения удалено.", "messageStorageList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageList");
                        }
                    });
                };
            });
        });
     },

    OnSuccessStorageSave: function () {
            HideModal();
            RefreshGrid("gridStorage", function () {
                ShowSuccessMessage("Место хранения добавлено.", "messageStorageList");
            });
        }
};﻿var Task_CompletedTaskGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridCompletedTask table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Topic").attr("href", "/Task/Details?id=" + id + GetBackUrl());

                var createdById = $(this).find(".CreatedById").text();
                $(this).find("a.CreatedBy").attr("href", "/User/Details?id=" + createdById + GetBackUrl());

                var executedById = $(this).find(".ExecutedById").text();
                $(this).find("a.ExecutedBy").attr("href", "/User/Details?id=" + createdById + GetBackUrl());
            });
        });
    }
};﻿var Task_Details = {
    Init: function () {
        $(document).ready(function () {
            $("#taskExecutionTab").click(function () {
                var _this = $(this);
                StartLinkProgress(_this.children("span"));
                var taskId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Task/GetTaskExecutions/",
                    data: { taskId: taskId },
                    success: function (result) {
                        $("#taskDetailsContainer").html(result);
                        Task_Executions.OnLoadExecutions(); // Проставляем ссылки
                        $("#taskHistoryTab").removeClass("selected");
                        _this.addClass("selected");
                        StopLinkProgress(_this.children("span"));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskDetailsContainer");
                    }
                });
            });

            $("#taskHistoryTab").click(function () {
                var _this = $(this);
                StartLinkProgress(_this.children("span"));
                var taskId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Task/GetTaskHistory/",
                    data: { taskId: taskId },
                    success: function (result) {
                        $("#taskDetailsContainer").html(result);
                        $("#taskExecutionTab").removeClass("selected");
                        _this.addClass("selected");
                        StopLinkProgress(_this.children("span"));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskDetailsContainer");
                    }
                });
            });

            $("#btnEditTask").click(function () {
                var taskId = $("#Id").val();
                window.location = "/Task/Edit?taskId=" + taskId + GetBackUrl();
            });

            $("#btnCreateTaskExecution").click(function () {
                StartButtonProgress($(this));
                var taskId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Task/TaskExecutionCreate/",
                    data: { taskId: taskId },
                    success: function (result) {
                        $('#taskExecutionCreate').hide().html(result);
                        $.validator.unobtrusive.parse($("#taskExecutionCreate"));
                        $('#taskExecutionCreate').show();
                        StopButtonProgress($(this));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionCreateButton");
                    }
                });
            });

            $("#btnDeleteTask").click(function () {
                if (confirm("Вы действительно хотите удалить задачу?")) {
                    StartButtonProgress($(this));
                    var taskId = $("#Id").val();

                    $.ajax({
                        type: "GET",
                        url: "/Task/Delete/",
                        data: { taskId: taskId },
                        success: function (result) {
                            window.location = $("#BackURL").val();
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskDetails");
                        }
                    });
                }
            });

            $("#btnBackTo").click(function () {
                window.location = $("#BackURL").val();
            });

            $("#btnCompleteTask").click(function () {
                StartButtonProgress($(this));
                var taskId = $("#Id").val();

                $.ajax({
                    type: "GET",
                    url: "/Task/CompleteTask/",
                    data: { taskId: taskId },
                    success: function (result) {
                        $('#taskExecutionCreate').hide().html(result);
                        $.validator.unobtrusive.parse($("#taskExecutionCreate"));
                        $('#taskExecutionCreate').show();
                        StopButtonProgress($(this));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionCreateButton");
                    }
                });
            });
        });
    }
};﻿var Task_Edit = {
    Init: function () {
        $(document).ready(function () {
            Task_Edit.ApplyContractorType($("ContractorType").val());
        });

        $("#btnBack").live('click', function () {
            window.location = $("#BackURL").val();
        });

        $("#TaskTypeId").live('change', function () {
            var _this = $(this);
            var taskTypeId = $(this).attr("value");
            StartComboBoxProgress($("#TaskExecutionStateId"));

            $.ajax({
                type: "GET",
                url: "/Task/GetStates/",
                data: { taskTypeId: taskTypeId },
                success: function (result) {
                    $("#TaskExecutionStateId").fillSelect(result);
                    StopComboBoxProgress($("#TaskExecutionStateId"));
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                }
            });
        });

        $("#ExecutedBy").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/User/SelectExecutedByForTask/",
                success: function (result) {
                    $('#executedBySelector').hide().html(result);
                    ShowModal("executedBySelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                }
            });
        });

        $("#executedBySelector .select_user").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".DisplayName").text();
            $("#ExecutedById").val(userId);
            $("#ExecutedBy").text(userName);

            HideModal();
        });

        $("#Contractor").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/Contractor/SelectContractor/",
                success: function (result) {
                    $('#contractorSelector').hide().html(result);
                    ShowModal("contractorSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                }
            });
        });

        $("#contractorSelector .select_contractor").live('click', function () {
            var contractorId = $(this).parent("td").parent("tr").find(".Id").text();
            var contractorName = $(this).parent("td").parent("tr").find(".Name").text();
            var contractorType = $(this).parent("td").parent("tr").find(".TypeId").text();

            if ($("#ContractorId").val() != contractorId) {
                Task_Edit.OnClearDeal();
                Task_Edit.OnClearProductionOrder();
            }

            $("#ContractorId").val(contractorId);
            $("#Contractor").text(contractorName);
            $("#ClearContractor").show();
            Task_Edit.ApplyContractorType(contractorType);

            HideModal();
        });

        $("#Deal.select_link").live('click', function () {
            var contractorId = $("#ContractorId").val();
            $.ajax({
                type: "GET",
                url: contractorId == "" ? "/Deal/SelectDeal/" : "/Deal/SelectDealByClient/",
                data: contractorId == "" ? { activeOnly: true} : { clientId: contractorId, mode: "ForTask" },
                success: function (result) {
                    $('#dealSelector').hide().html(result);
                    ShowModal("dealSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                }
            });
        });

        $("#dealSelector .select_deal").live('click', function () {
            var dealId = $(this).parent("td").parent("tr").find(".Id").text();
            var dealName = $(this).parent("td").parent("tr").find(".Name").text();
            $("#DealId").val(dealId);
            $("#Deal").text(dealName);
            $("#ClearDeal").show();
            Task_Edit.OnDisableProductionOrder();

            $.ajax({
                type: "GET",
                url: "/Task/GetClientByDeal/",
                data: { dealId: dealId },
                success: function (result) {
                    $("#Contractor").text(result.ClientName);
                    $("#ContractorId").val(result.ClientId);
                    $("#ClearContractor").show();
                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                    HideModal();
                }
            });
        });

        $("#ProductionOrder.select_link").live('click', function () {
            var contractorId = $("#ContractorId").val();
            $.ajax({
                type: "GET",
                url: contractorId == "" ? "/ProductionOrder/SelectProductionOrder/" : "/ProductionOrder/SelectProductionOrderByProducer/",
                data: contractorId == "" ? { activeOnly: true} : { producerId: contractorId },
                success: function (result) {
                    $('#productionOrderSelector').hide().html(result);
                    ShowModal("productionOrderSelector");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskEdit");
                }
            });
        });

        $("#productionOrderSelector .select").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".Name").text();
            var contractor = $(this).parent("td").parent("tr").find(".ProducerName").text();
            var contractorId = $(this).parent("td").parent("tr").find(".ProducerId").text();

            $("#ProductionOrderId").val(userId);
            $("#ProductionOrder").text(userName);
            $("#ClearProductionOrder").show();

            $("#Contractor").text(contractor);
            $("#ContractorId").val(contractorId);
            $("#ClearContractor").show();

            Task_Edit.OnDisableDeal();

            HideModal();
        });

        $("#ClearDeal").live("click", function () {
            StopLinkProgress($(this));
            Task_Edit.OnClearDeal();
        });

        $("#ClearProductionOrder").live("click", function () {
            StopLinkProgress($(this));
            Task_Edit.OnClearProductionOrder();
        });

        $("#ClearContractor").live("click", function () {
            StopLinkProgress($(this));
            Task_Edit.OnClearLinking();
        });
    },

    ApplyContractorType: function (contractorType) {
        switch (contractorType) {
            case "1":   // Поставщик
                Task_Edit.OnDisableProductionOrder();
                Task_Edit.OnDisableDeal();
                break;
            case "2":   // Клиент
                Task_Edit.OnDisableProductionOrder();
                break;
            case "3":   // Производитель
                Task_Edit.OnDisableDeal();
                break;
        }
    },

    OnClearLinking: function () {
        Task_Edit.OnClearDeal();
        Task_Edit.OnClearProductionOrder();
        Task_Edit.OnClearContractor();
    },

    OnClearContractor: function () {
        $("#Contractor").addClass("select_link").text("Выберите контрагента");
        $("#ContractorId").val("");
        $("#ClearContractor").hide();
    },

    OnClearDeal: function () {
        $("#Deal").addClass("select_link").text("Выберите сделку");
        $("#DealId").val("");
        $("#ClearDeal").hide();
    },


    OnDisableDeal: function () {
        $("#Deal").removeClass("select_link").text("---");
        $("#DealId").val("");
        $("#ClearDeal").hide();
    },

    OnClearProductionOrder: function () {
        $("#ProductionOrder").addClass("select_link").text("Выберите заказ на производство");
        $("#ProductionOrderId").val("");
        $("#ClearProductionOrder").hide();
    },

    OnDisableProductionOrder: function () {
        $("#ProductionOrder").removeClass("select_link").text("---");
        $("#ProductionOrderId").val("");
        $("#ClearProductionOrder").hide();
    },

    OnFailTaskSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageTaskEdit");
    },

    OnSuccessTaskSave: function (ajaxContext) {
        // TODO: если !model.IsValid, контроллер возвращает success, но с моделью вместо id созданной накл. Тогда не надо переходить.
        if ($("#Id").val() == 0) {
            window.location = "/Task/Details?id=" + ajaxContext + GetBackUrlFromString($("#BackURL").val());
        }
        else {
            window.location = $("#BackURL").val();
        }
    }
};﻿var Task_ExecutingTaskGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridExecutingTask table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Topic").attr("href", "/Task/Details?id=" + id + GetBackUrl());

                var createdById = $(this).find(".CreatedById").text();
                $(this).find("a.CreatedBy").attr("href", "/User/Details?id=" + createdById + GetBackUrl());

                var executedById = $(this).find(".ExecutedById").text();
                $(this).find("a.ExecutedBy").attr("href", "/User/Details?id=" + createdById + GetBackUrl());
            });
        });
    }
};﻿var Task_Executions = {
    Init: function () {
        Task_Executions.OnLoadExecutions();

        $(".EditTaskExecution").live("click", function () {
            StartLinkProgress($(this));
            var detailsDiv = $(this).parent("td").parent("tr").parent("tbody").parent("table").parent("div");
            var editDiv = detailsDiv.parent("div").find(".taskExecutionEdit");
            var taskExecutionId = detailsDiv.find("#item_TaskExecutionId").val();

            $.ajax({
                type: "GET",
                url: "/Task/TaskExecutionEdit",
                data: { taskExecutionId: taskExecutionId },
                success: function (result) {
                    editDiv.hide().html(result);
                    $.validator.unobtrusive.parse(editDiv);
                    detailsDiv.hide();
                    editDiv.show();
                    StopLinkProgress($(this));
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionDetailsEdit");
                }
            });
        });

        $(".DeleteTaskExecution").live("click", function () {
            if (confirm("Вы действительно хотите удалить исполнение?")) {
                StartLinkProgress($(this));
                var content = $(this).parent("td").parent("tr").parent("tbody").parent("table").parent("div").parent("div");
                var taskExecutionId = content.find("#item_TaskExecutionId").val();

                $.ajax({
                    type: "GET",
                    url: "/Task/TaskExecutionDelete",
                    data: { taskExecutionId: taskExecutionId },
                    success: function (result) {
                        Task_MainDetails.RefreshDetails("messageTaskExecutionDetailsEdit", function () {
                            var needRemoveDelim = content.children(".h_delim").length == 0;
                            var container = content.parent("div");
                            content.remove();
                            if (needRemoveDelim) {
                                container.find(".h_delim:first").remove();
                            }
                            if ($("#taskDetailsContainer .taskExecutionDetails").length == 0) {
                                $("#taskDetailsContainer").append("<div id='TaskExecutionNoDataMessage' style='text-align: center'>Нет исполнений</div>");
                            }
                            ShowSuccessMessage(result, "messageTaskExecutionDetailsEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionDetailsEdit");
                    }
                });
            }
        });
    },

    OnLoadExecutions: function () {
        $(document).ready(function () {
            $("#taskDetailsContainer .taskExecutionDetails").each(function (i, el) {
                var id = $(this).find("#CreatedById").val();
                $(this).find("a#CreatedByName").attr("href", "/User/Details?id=" + id + GetBackUrl());
            });
        }); // end document.ready
    }
};﻿var Task_List = {
    Init: function () {
        $("#CreatedBy").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/User/SelectUserForTask/",
                data: { isExecutedBy: false },
                success: function (result) {
                    $('#createdByFilterSelector').hide().html(result);
                    ShowModal("createdByFilterSelector");
                    $('#createdByFilterSelector .attention').hide();
                    $("#createdByFilterSelector").css("top", "50px");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                }
            });
        });

        $("#createdByFilterSelector .select_user").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".DisplayName").text();
            $("#CreatedBy").attr("selected_id", userId);
            $("#CreatedBy").text(userName);

            HideModal();
        });

        $("#ExecutedBy").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/User/SelectUserForTask/",
                data: { isExecutedBy: true },
                success: function (result) {
                    $('#executedByFilterSelector').hide().html(result);
                    ShowModal("executedByFilterSelector");
                    $('#executedByFilterSelector .attention').hide();
                    $("#executedByFilterSelector").css("top", "50px");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                }
            });
        });

        $("#executedByFilterSelector .select_user").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".DisplayName").text();
            $("#ExecutedBy").attr("selected_id", userId);
            $("#ExecutedBy").text(userName);

            HideModal();
        });

        $("#Contractor").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/Contractor/SelectContractor/",
                success: function (result) {
                    $('#contractorFilterSelector').hide().html(result);
                    ShowModal("contractorFilterSelector");
                    $('#contractorFilterSelector .attention').hide();
                    $("#contractorFilterSelector").css("top", "50px");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                }
            });
        });

        $("#contractorFilterSelector .select_contractor").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".Name").text();
            $("#Contractor").attr("selected_id", userId);
            $("#Contractor").text(userName);

            HideModal();
        });

        $("#Deal").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/Deal/SelectDeal/",
                data: { activeOnly: false },
                success: function (result) {
                    $('#dealFilterSelector').hide().html(result);
                    ShowModal("dealFilterSelector");
                    $('#dealFilterSelector .attention').hide();
                    $("#dealFilterSelector").css("top", "50px");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                }
            });
        });

        $("#dealFilterSelector .select_deal").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".Name").text();
            $("#Deal").attr("selected_id", userId);
            $("#Deal").text(userName);

            HideModal();
        });

        $("#ProductionOrder").live('click', function () {
            $.ajax({
                type: "GET",
                url: "/ProductionOrder/SelectProductionOrder/",
                data: { activeOnly: false },
                success: function (result) {
                    $('#productionOrderFilterSelector').hide().html(result);
                    ShowModal("productionOrderFilterSelector");
                    $('#productionOrderFilterSelector .attention').hide();
                    $("#productionOrderFilterSelector").css("top", "50px");
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                }
            });
        });

        $("#productionOrderFilterSelector .select").live('click', function () {
            var userId = $(this).parent("td").parent("tr").find(".Id").text();
            var userName = $(this).parent("td").parent("tr").find(".Name").text();
            $("#ProductionOrder").attr("selected_id", userId);
            $("#ProductionOrder").text(userName);

            HideModal();
        });

        // Подгрузка списка статусов в фильтре
        $("#Type").live("change", function () {
            StartComboBoxProgress($("#ExecutionState"));
            var taskTypeId = $(this).attr("value");

            if (taskTypeId != "") {
                $.ajax({
                    type: "GET",
                    url: "/Task/GetStates/",
                    data: { taskTypeId: taskTypeId },
                    success: function (result) {
                        $("#ExecutionState").fillSelect(result);
                        StopComboBoxProgress($("#ExecutionState"));
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskList");
                    }
                });
            }
            else {
                $("#ExecutionState").clearSelect();
                StopComboBoxProgress($("#ExecutionState"));
            }
        });
    }
};﻿var Task_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            var id = $(this).find("#CreatedById").val();
            $(this).find("a#CreatedBy").attr("href", "/User/Details?id=" + id + GetBackUrl());

            id = $(this).find("#ExecutedById").val();
            $(this).find("a#ExecutedBy").attr("href", "/User/Details?id=" + id + GetBackUrl());

            id = $(this).find("#DealId").val();
            $(this).find("a#Deal").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

            id = $(this).find("#ProductionOrderId").val();
            $(this).find("a#ProductionOrder").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());

            id = $(this).find("#ContractorId").val();
            var controller = "";
            switch ($(this).find("#ContractorType").val()) {
                case "1":
                    controller = "Provider";
                    break;
                case "2":
                    controller = "Client";
                    break;
                case "3":
                    controller = "Producer";
                    break;
            }
            $(this).find("a#Contractor").attr("href", "/" + controller + "/Details?id=" + id + GetBackUrl());
        });
    },

    RefreshDetails: function (errorMessageContainer, onComplete) {
        var taskId = $("#Id").val();
        $.ajax({
            type: "GET",
            url: "/Task/GetMainChangeableIndicators/",
            data: { taskId: taskId },
            success: function (result) {
                $("#StartDate").text(result.StartDate);
                $("#FactualCompletionDate").text(result.FactualCompletionDate);
                $("#FactualSpentTime").text(result.FactualSpentTime);
                $("#TaskExecutionStateName").text(result.ExecutionState);
                $("#CompletionPercentage").text(result.CompletionPercentage);

                onComplete();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, errorMessageContainer);
            }
        });
    }
};﻿var Task_NewTaskGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#gridNewTask table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Topic").attr("href", "/Task/Details?id=" + id + GetBackUrl());

                var createdById = $(this).find(".CreatedById").text();
                $(this).find("a.CreatedBy").attr("href", "/User/Details?id=" + createdById + GetBackUrl());

                var executedById = $(this).find(".ExecutedById").text();
                $(this).find("a.ExecutedBy").attr("href", "/User/Details?id=" + executedById + GetBackUrl());
            });
        });
    },

    CreateNewTaskByCreatedBy: function () {
        window.location = "/Task/Create?" + GetBackUrl();
    },

    CreateNewTaskByExecutedBy: function (executedById) {
        window.location = "/Task/Create?executedById=" + executedById + "&" + GetBackUrl(true);
    },

    CreateNewTaskByContractor: function (contractorId) {
        window.location = "/Task/Create?contractorId=" + contractorId + "&" + GetBackUrl(true);
    },

    CreateNewTaskByDeal: function (dealId) {
        window.location = "/Task/Create?dealId=" + dealId + "&" + GetBackUrl(true);
    },

    CreateNewTaskByProductionOrder: function (productionOrderId) {
        window.location = "/Task/Create?productionOrderId=" + productionOrderId + "&" + GetBackUrl(true);
    }
};﻿var Task_TaskExecutionCreate = {
    Init: function () {
        $(document).ready(function () {
            $("#btnCancel").click(function () {
                $("#taskExecutionCreate").html("");
            });

            $("#Date").datepicker();
        });
    },

    OnBeginTaskExecutionCreate: function (ajaxContext) {
        StartButtonProgress($("#btnSaveTaskExecution"));
    },

    OnSuccessTaskExecutionCreate: function (ajaxContext) {
        var taskId = $("#Id").val();
        var url = "";
        if ($("#taskExecutionTab").parent("div").hasClass("selected")) {
            url = "/Task/GetTaskExecution/";
        }
        else {
            url = "/Task/GetTaskHistoryForTaskExecution/";
        }

        $.ajax({
            type: "GET",
            url: url,
            data: { taskId: taskId, taskExecutionId: ajaxContext.TaskExecutionId },
            success: function (result) {
                Task_MainDetails.RefreshDetails("messageTaskExecutionDetailsEdit", function () {
                    var baseHtml = $("#taskDetailsContainer").html();
                    $("#taskDetailsContainer").html(baseHtml + result);
                    $("#taskExecutionCreate").html("");
                    $("#taskDetailsContainer #TaskHistoryNoDataMessage").remove();
                    $("#taskDetailsContainer #TaskExecutionNoDataMessage").remove();
                    Task_Executions.OnLoadExecutions(); // Проставляем ссылки
                    ShowSuccessMessage(ajaxContext.Message, "messageTaskExecutionDetailsEdit");
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionDetailsEdit");
            }
        });

    },

    OnFailTaskExecutionCreate: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageTaskExecutionDetailsEdit");
    }
};﻿var Task_TaskExecutionEdit = {
    Init: function () {
        $(document).ready(function () {
            $(".btnCancel").click(function () {
                var editDiv = $(this).parent("div").parent("div").parent("form").parent("div");
                var detailsDiv = editDiv.parent("div").find(".taskExecutionDetails");

                detailsDiv.show();
                editDiv.html("");
            });

            $("#Date").datepicker();
        });
    },

    OnBeginTaskExecutionEdit: function (ajaxContext) {
        StartButtonProgress($("#btnSaveTaskExecution"));
    },

    OnSuccessTaskExecutionEdit: function (ajaxContext) {
        var taskId = $("#TaskId").val();
        var container = $(".TaskExecutionId_" + ajaxContext.TaskExecutionId).parent("form").parent("div").parent("div");

        $.ajax({
            type: "GET",
            url: "/Task/GetTaskExecution",
            data: { taskId: taskId, taskExecutionId: ajaxContext.TaskExecutionId },
            success: function (result) {
                Task_MainDetails.RefreshDetails("messageTaskExecutionDetailsEdit", function () {
                    container.replaceWith(result);
                    ShowSuccessMessage(ajaxContext.Message, "messageTaskExecutionDetailsEdit");
                });
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageTaskExecutionDetailsEdit");
            }
        });
    },

    OnFailTaskExecutionEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageTaskExecutionDetailsEdit");
    }
};﻿var Task_TaskHistory = {
    Init: function () {
        $(document).ready(function () {
            $("#taskDetailsContainer .taskHistoryItem").each(function (i, el) {
                var id = $(this).find("#CreatedById").val();
                $(this).find("a#CreatedByName").attr("href", "/User/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ContractorOldId").val();
                $(this).find("a#ContractorNameOld").attr("href", "/" + Task_TaskHistory.GetContractorController($(this), "ContractorTypeOld") + "/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ContractorNewId").val();
                $(this).find("a#ContractorNameNew").attr("href", "/" + Task_TaskHistory.GetContractorController($(this), "ContractorTypeNew") + "/Details?id=" + id + GetBackUrl());

                id = $(this).find("#DealOldId").val();
                $(this).find("a#DealNameOld").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

                id = $(this).find("#DealNewId").val();
                $(this).find("a#DealNameNew").attr("href", "/Deal/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ExecutedByOldId").val();
                $(this).find("a#ExecutedByNameOld").attr("href", "/User/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ExecutedByNewId").val();
                $(this).find("a#ExecutedByNameNew").attr("href", "/User/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ProductionOrderOldId").val();
                $(this).find("a#ProductionOrderNameOld").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());

                id = $(this).find("#ProductionOrderNewId").val();
                $(this).find("a#ProductionOrderNameNew").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());

                id = $(this).find("#TaskExecutionCreatedById").val();
                $(this).find("a#ProductionOrderNameNew").attr("href", "/ProductionOrder/Details?id=" + id + GetBackUrl());

                id = $(this).find("#TaskExecutionCreatedById").val();
                $(this).find("a#TaskExecutionCreatedByName").attr("href", "/User/Details?id=" + id + GetBackUrl());
            });
        });
    },

    GetContractorController: function (parent, id) {
        var controller = "";
        switch (parent.find("#" + id).val()) {
            case "1":
                controller = "Provider";
                break;
            case "2":
                controller = "Client";
                break;
            case "3":
                controller = "Producer";
                break;
        }

        return controller;
    }
};﻿var Team_DealsGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridDeals table.grid_table tr").each(function (i, el) {
                var userId = $(this).find(".ClientId").text();
                $(this).find("a.ClientName").attr("href", "/Client/Details?id=" + userId + "&backURL=" + currentUrl);

                var dealId = $(this).find(".DealId").text();
                $(this).find("a.DealName").attr("href", "/Deal/Details?id=" + dealId + "&backURL=" + currentUrl);
            });

            $("#btnAddDeal").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/Deal/SelectDealByTeam",
                    data: { teamId: $("#Id").val() },
                    success: function (result) {
                        $("#dealSelector").hide().html(result);
                        ShowModal("dealSelector");

                        BindDealSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageDealList");
                    }
                });
            });

            $("#gridDeals .remove_deal").click(function () {
                if (confirm("Вы уверены?")) {
                    var dealId = $(this).parent("td").parent("tr").find(".DealId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Team/RemoveDeal",
                        data: { teamId: $("#Id").val(), dealId: dealId },
                        success: function (result) {
                            RefreshGrid("gridDeals", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Сделка исключена из области видимости команды.", "messageDealList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealList");
                        }
                    });
                }
            });
        });

        function BindDealSelection() {
            $("#gridSelectDeal .select_deal").die("click");
            $("#gridSelectDeal .select_deal").live('click', function () {
                var dealId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/Team/AddDeal",
                    data: { teamId: $("#Id").val(), dealId: dealId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridDeals", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Сделка добавлена в область видимости команды.", "messageDealList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        HideModal(function () {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageDealList");
                        });
                    }
                });
            });
        }
    }
};﻿var Team_Details = {
    Init: function () {
        $('#btnEdit').live("click", function () {
            var id = $('#Id').val();
            window.location = "/Team/Edit?id=" + id + GetBackUrl();
        });

        $('#btnDelete').live("click", function () {
            if (confirm('Вы уверены?')) {
                var id = $('#Id').val();

                $.ajax({
                    type: "POST",
                    url: "/Team/Delete/",
                    data: { teamId: id },
                    success: function () {
                        //ShowSuccessMessage(".", "messageWriteoffWaybillDetails");
                        window.location = "/Team/List";
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageTeamEdit");
                    }
                });
            }
        });

        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });
    }
};﻿var Team_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#Name").focus();
        });

        $("#btnBack").live("click", function () {
            window.location = $('#BackURL').val();
        });
    },

    OnSuccessTeamSave: function (ajaxContext) {
        window.location = "/Team/Details?id=" + ajaxContext + "&backURL=/Team/List";
    },

    OnFailTeamSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageTeamEdit");
    },

    OnBeginTeamSave: function () {
        StartButtonProgress($("#btnSaveTeam"));
    }
};﻿var Team_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            var userId = $("#team_main_details #CreatorId").val();
            if (IsTrue($("#AllowToViewCreatorDetails").val())) {
                $("#CreatedBy").attr("href", "/User/Details?id=" + userId + "&backURL=" + currentUrl);
            }
            else {
                $("#CreatedBy").addClass("disabled");
            }
        });
    },

    RefreshMainDetails: function (details) {
        $("#Name").text(details.Name);
        $("#UserCount").text(details.UserCount);
        $("#CreationDate").text(details.CreationDate);
        $("#StorageCount").text(details.StorageCount);
        $("#CreatedBy").text(details.CreatedBy);
        $("#DealCount").text(details.DealCount);
        $("#Comment").html(details.Comment);
    }
};﻿var Team_ProductionOrdersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridProductionOrders table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".ProductionOrderId").text();
                $(this).find("a.ProductionOrderName").attr("href", "/ProductionOrder/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddProductionOrder").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/ProductionOrder/SelectProductionOrderByTeam",
                    data: { teamId: $("#Id").val() },
                    success: function (result) {
                        $("#productionOrderSelector").hide().html(result);
                        $.validator.unobtrusive.parse($("#productionOrderSelector"));
                        ShowModal("productionOrderSelector");

                        BindProductionOrderSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderList");
                    }
                });
            });

            $("#gridProductionOrders .remove_productionOrder").click(function () {
                if (confirm("Вы уверены?")) {
                    var orderId = $(this).parent("td").parent("tr").find(".ProductionOrderId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Team/RemoveProductionOrder",
                        data: { teamId: $("#Id").val(), orderId: orderId },
                        success: function (result) {
                            RefreshGrid("gridProductionOrders", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Заказ на производство исключен из области видимости команды.", "messageProductionOrderEdit");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderList");
                        }
                    });
                }
            });
        });

        function BindProductionOrderSelection() {
            $("#productionOrderSelector .select").die('click');
            $("#productionOrderSelector .select").live('click', function () {
                var orderId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/Team/AddProductionOrder",
                    data: { teamId: $("#Id").val(), orderId: orderId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridProductionOrders", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Заказ на производство добавлен в область видимости команды.", "messageProductionOrderList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageProductionOrderSelectGrid");
                    }
                });
            });
        }
    }
};﻿var Team_StorageSelectList = {
    Init: function () {
        $(document).ready(function () {
            DisableButton("btnSaveLinkedStorage");

            $('#StorageId').change(function () {
                if ($('#StorageId').val() == "") {
                    DisableButton("btnSaveLinkedStorage");
                }
                else {
                    EnableButton("btnSaveLinkedStorage");
                }
            });
        });
    },

    OnFailStorageAdd: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageStorageSelectList");
    },

    OnBeginStorageAdd: function () {
        StartButtonProgress($("#btnSaveLinkedStorage"));
    },
    
    OnSuccessStorageAdd: function (ajaxContext) {
        HideModal(function () {
            RefreshGrid("gridStorages", function () {
                Team_MainDetails.RefreshMainDetails(ajaxContext.MainDetails);
                ShowSuccessMessage("Место хранения добавлено.", "messageStorageList");
            });
        });
    }
};﻿var Team_StoragesGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridStorages table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".StorageId").text();
                $(this).find("a.StorageName").attr("href", "/Storage/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddStorage").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/Team/StoragesList",
                    data: { teamId: $("#Id").val() },
                    success: function (result) {
                        $("#storageSelectList").hide().html(result);
                        ShowModal("storageSelectList");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageList");
                    }
                });
            });

            $("#gridStorages .remove_storage").click(function () {
                if (confirm("Вы уверены?")) {
                    var storageId = $(this).parent("td").parent("tr").find(".StorageId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Team/RemoveStorage",
                        data: { teamId: $("#Id").val(), storageId: storageId },
                        success: function (result) {
                            RefreshGrid("gridStorages", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Место хранения исключено из области видимости команды.", "messageStorageList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageStorageList");
                        }
                    });
                }
            });
        });
    }
};﻿var Team_TeamsGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridTeams table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Name").attr("href", "/Team/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnCreateTeam").click(function () {
                window.location = "/Team/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};﻿var Team_UsersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridUsers table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".UserId").text();
                $(this).find("a.UserName").attr("href", "/User/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddUser").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/User/SelectUserByTeam",
                    data: { teamId: $("#Id").val() },
                    success: function (result) {
                        $("#userSelector").hide().html(result);
                        ShowModal("userSelector");

                        BindUserSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                    }
                });
            });

            $("#gridUsers .remove_user").click(function () {
                if (confirm("Вы уверены?")) {
                    var userId = $(this).parent("td").parent("tr").find(".UserId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/Team/RemoveUser",
                        data: { teamId: $("#Id").val(), userId: userId },
                        success: function (result) {
                            RefreshGrid("gridUsers", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Пользователь исключен из команды.", "messageUserList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                        }
                    });
                }
            });
        });

        function BindUserSelection() {
            $("#gridSelectUser .select_user").die("click");
            $("#gridSelectUser .select_user").live('click', function () {
                var userId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/Team/AddUser",
                    data: { teamId: $("#Id").val(), userId: userId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridUsers", function () {
                                Team_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Пользователь добавлен в команду.", "messageUserList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        HideModal(function () {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserList");
                        });
                    }
                });
            });
        }
    }
};﻿var Trademark_Edit = {
    OnBeginTrademarkSave: function () {
        StartButtonProgress($("#btnSaveTrademark"));
    },

    OnFailTrademarkSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageTrademarkEdit");
    }
};
﻿var Trademark_List = {
    OnSuccessTrademarkSave: function () {
        HideModal();
        RefreshGrid("gridTrademark", function () {
            ShowSuccessMessage("Сохранено.", "messageTrademarkList");
        });
    }
};
﻿var Trademark_TrademarkGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateTrademark').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                Trademark_TrademarkGrid.ShowTrademarkDetailsForEdit(id);
            });

            $('#gridTrademark .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                Trademark_TrademarkGrid.ShowTrademarkDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "Trademark";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridTrademark", function () {
                                ShowSuccessMessage("Удалено.", "messageTrademarkList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageTrademarkList");
                        }
                    });
                }
            });
        });
    },

    ShowTrademarkDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "Trademark";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#trademarkEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#trademarkEdit"));
                ShowModal("trademarkEdit");
                $("#trademarkEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageTrademarkList");
            }
        });
    }
};
﻿var Trademark_TrademarkSelector = {
    Init: function () {
        $(document).ready(function () {
            $("#createTrademark").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/Trademark/Create/",
                    success: function (result) {
                        $('#Edit').hide().html(result);
                        $.validator.unobtrusive.parse($("#Edit"));
                        ShowModal("Edit");
                        $("#Edit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageSelectTrademark");
                    }
                });
            });
        });
    }
};﻿var User_ActiveUsersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridActiveUsers table.grid_table tr").each(function (i, el) {
                var userId = $(this).find(".Id").text();
                $(this).find("a.DisplayName").attr("href", "/User/Details?id=" + userId + "&backURL=" + currentUrl);

                var teamId = $(this).find(".TeamId").text();
                $(this).find("a.TeamNames").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);

                var roleId = $(this).find(".RoleId").text();
                $(this).find("a.RoleNames").attr("href", "/Role/Details?id=" + roleId + "&backURL=" + currentUrl);
            });

            $("#btnCreateUser").click(function () {
                window.location = "/User/Create?backURL=" + $("#currentUrl").val();
            });
        });
    }
};

﻿var User_BlockedUsersGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridBlockedUsers table.grid_table tr").each(function (i, el) {
                var userId = $(this).find(".Id").text();
                $(this).find("a.DisplayName").attr("href", "/User/Details?id=" + userId + "&backURL=" + currentUrl);

                var teamId = $(this).find(".TeamId").text();
                $(this).find("a.TeamNames").attr("href", "/Team/Details?id=" + teamId + "&backURL=" + currentUrl);

                var roleId = $(this).find(".RoleId").text();
                $(this).find("a.RoleNames").attr("href", "/Role/Details?id=" + roleId + "&backURL=" + currentUrl);
            });
        });
    }
};

﻿var User_ChangePassword = {
    OnFailChangePassword: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageUserChangePassword");
    }
};

﻿var User_Details = {
    Init: function () {
        $('#btnEdit').live("click", function () {
            var id = $('#Id').val();
            window.location = "/User/Edit?id=" + id + GetBackUrl();
        });

        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });
    }
};﻿var User_Edit = {
    Init: function () {
        $(document).ready(function () {
            $("#LastName").focus();

            if ($("#Id").val() != "0") {
                ShowDisplayNameList();
            }

            $("#btnBack").live("click", function () {
                window.location = $('#BackURL').val();
            });

            $("#LastName, #FirstName, #Patronymic").bind("change", function () {
                ShowDisplayNameList();
            });

            $("#DisplayName").change(function () {
                $("#DisplayNameTemplate").val($(this).val());
            });

            $("#linkAddEmployeePost").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/EmployeePost/Create",
                    success: function (result) {
                        $("#employeePostEdit").hide().html(result);
                        $.validator.unobtrusive.parse($("#employeePostEdit"));
                        ShowModal("employeePostEdit");
                        $("#employeePostEdit #Name").focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                    }
                });
            });

            $('#Login').bind("change", function () {
                var login = $('#Login').val();
                var id = $("#Id").val();

                $.ajax({
                    url: "/User/IsLoginUnique",
                    data: { login: login, id: id },
                    success: function (result) {
                        if (result == "False") {
                            $('#Login').removeClass('valid').addClass('input-validation-error');
                            $('[data-valmsg-for="Login"]').removeClass('field-validation-valid').addClass('field-validation-error').html("<span htmlfor='LoginIsUnique' generated='true'>Пользователь с данным логином уже существует</span>");
                            $('#LoginIsUnique').val(0);
                        }
                        else {
                            $('[data-valmsg-for="Login"]').removeClass('field-validation-error').addClass('field-validation-valid').html("");
                            $('#Login').removeClass('input-validation-error').addClass('valid');
                            $('#LoginIsUnique').val(1);
                        }
                    }
                });
            });
        });

        function GetDisplayNameByTemplate(template, lastName, firstName, patronymic) {
            var result = "";
            var splitSymbol = " ";

            for (var i = 0; i < template.length; i++) {
                if (result.length == 0) {
                    splitSymbol = "";
                }
                else {
                    splitSymbol = " ";
                }

                switch (template[i]) {
                    case 'L':
                        result += splitSymbol + lastName;
                        break;
                    case 'l':
                        result += splitSymbol + GetFirstSymbol(lastName);
                        break;
                    case 'F':
                        result += splitSymbol + firstName;
                        break;
                    case 'f':
                        result += splitSymbol + GetFirstSymbol(firstName);
                        break;
                    case 'P':
                        result += splitSymbol + patronymic;
                        break;
                    case 'p':
                        result += splitSymbol + GetFirstSymbol(patronymic);
                        break;
                }
            }

            return result;
        }

        function GetFirstSymbol(value) {
            var result = "";
            if (value.length > 0) {
                result = value[0] + '.';
            }

            return result;
        }

        function ShowDisplayNameList() {
            var lastName = $("#LastName").val();
            var firstName = $("#FirstName").val();
            var patronymic = $("#Patronymic").val();

            var currentTemplate = $("#DisplayNameTemplate").val();
            var dropdownList = $("#DisplayName");

            var templates = new Array()
            templates[0] = "LF";
            templates[1] = "Lfp";
            templates[2] = "LFP";
            templates[3] = "FL";
            templates[4] = "Lf";
            templates[5] = "FP";

            dropdownList.clearSelect();

            for (var i = 0; i < templates.length; i++) {
                var isSelected = templates[i] == currentTemplate;
                var text = GetDisplayNameByTemplate(templates[i], lastName, firstName, patronymic);

                var option = "<option value=" + templates[i];
                if (templates[i] == currentTemplate) {
                    option += " selected=\"selected\"";
                }
                option += ">" + text + "</option>";

                dropdownList.append(option);
            }
        }
    },

    OnSuccessUserSave: function (ajaxContext) {
        window.location = "/User/Details?id=" + ajaxContext + "&backURL=/User/List";
    },

    OnBeginUserSave: function () {
        StartButtonProgress($("#btnUserSave"));
    },

    OnFailUserSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageUserEdit");
    },

    OnSuccessEmployeePostSave: function (ajaxContext) {
        $.ajax({
            type: "POST",
            url: "/EmployeePost/GetEmployeePosts",
            success: function (result) {
                $("#EmployeePostId").fillSelect(result);
                $("#EmployeePostId").attr("value", ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
            }
        });

        HideModal();
        ShowSuccessMessage("Должность добавлена.", "messageUserEdit");
    }
};

﻿var User_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            $(".main_details_table #IsBlockedText.select_link").click(function () {

                var operation = "Block";
                var confirmMessage = "Вы действительно хотите заблокировать пользователя?";
                var successMessage = "Пользователь заблокирован.";

                if ($("#IsBlocked").val() == "1") {
                    operation = "UnBlock";
                    confirmMessage = "Вы действительно хотите разблокировать пользователя?";
                    successMessage = "Пользователь разблокирован.";
                }

                if (confirm(confirmMessage)) {
                    $.ajax({
                        type: "POST",
                        url: "/User/" + operation + "/",
                        data: { id: $("#Id").val() },
                        success: function (result) {
                            ShowSuccessMessage(successMessage, "messageUserEdit");
                            User_MainDetails.RefreshMainDetails(result.MainDetails);
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                        }
                    });
                }
            });

            //Открытие окна смены пароля
            $("#linkChangePassword").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/User/ChangePassword/",                    
                    success: function (result) {
                        $('#userChangePassword').hide().html(result);                        
                        $.validator.unobtrusive.parse($("#userChangePassword"));
                        ShowModal("userChangePassword");
                        $('#CurrentPassword').focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                    }
                });
            });

            //Открытие окна сброса пароля
            $("#linkResetPassword").click(function () {
                $.ajax({
                    type: "GET",
                    url: "/User/ResetPassword/",
                    data: { userId: $("#Id").val() },
                    success: function (result) {
                        $('#userResetPassword').hide().html(result);                        
                        $.validator.unobtrusive.parse($("#userResetPassword"));
                        ShowModal("userResetPassword");
                        $('#NewPassword').focus();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                    }
                });
            });

        });
    },

    // обновление основной информации
    RefreshMainDetails: function (details) {
        $("#IsAdmin").val(details.IsAdmin);
        $("#IsAdminText").text(details.IsAdminText);
        $("#IsBlocked").val(details.IsBlocked);
        $("#IsBlockedText").text(details.IsBlockedText);

        $("#LastName").text(details.LastName);
        $("#CreationDate").text(details.CreationDate);
        $("#FirstName").text(details.FirstName);
        $("#Patronymic").text(details.Patronymic);
        $("#DisplayName").text(details.DisplayName);
        $("#RoleCount").text(details.RoleCount);
        $("#PostName").text(details.PostName);
        $("#TeamCount").text(details.TeamCount);
        $("#Login").text(details.Login);
        $("#PasswordHash").text(details.PasswordHash);
    },

    OnSuccessChangePassword: function () {
        HideModal();
        ShowSuccessMessage("Пароль изменен.", "messageUserEdit");
    },    

    OnBeginResetPassword: function (){
        StartButtonProgress($("#btnResetPassword"));
    },

    OnSuccessResetPassword: function () {
        HideModal();
        ShowSuccessMessage("Пароль изменен.", "messageUserEdit");
    }
};﻿var User_ResetPassword = {
    OnFailResetPassword: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageUserResetPassword");
    }
};﻿var User_UserRolesGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridUserRoles table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".RoleId").text();
                $(this).find("a.RoleName").attr("href", "/Role/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddUserRole").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/Role/SelectRole",
                    data: { userId: $("#Id").val() },
                    success: function (result) {
                        $("#roleSelector").hide().html(result);
                        ShowModal("roleSelector");

                        BindRoleSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                    }
                });
            });

            $("#gridUserRoles .remove_role").click(function () {
                if (confirm("Вы уверены?")) {
                    var roleId = $(this).parent("td").parent("tr").find(".RoleId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/User/RemoveRole",
                        data: { userId: $("#Id").val(), roleId: roleId },
                        success: function (result) {
                            RefreshGrid("gridUserRoles", function () {
                                User_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Роль удалена.", "messageUserRoleList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserRoleList");
                        }
                    });
                }
            });
        });

        function BindRoleSelection() {
            $("#gridSelectRole .select_role").die("click");
            $("#gridSelectRole .select_role").live('click', function () {
                var roleId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/User/AddRole",
                    data: { userId: $("#Id").val(), roleId: roleId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridUserRoles", function () {
                                User_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Роль добавлена.", "messageUserRoleList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        HideModal(function () {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserRoleList");
                        });
                    }
                });
            });
        } 
    }
};

﻿var User_UserSelector = {
    Init: function () {
        $("#gridSelectUser table.grid_table tr").each(function () {
            var id = $(this).find(".Id").text();
            $(this).find("a.Name").attr("href", "/User/Details?id=" + id + GetBackUrl());
        });
    }
};﻿var User_UserTeamsGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $("#gridUserTeams table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".TeamId").text();
                $(this).find("a.TeamName").attr("href", "/Team/Details?id=" + id + "&backURL=" + currentUrl);
            });

            $("#btnAddUserTeam").click(function () {
                StartButtonProgress($(this));
                $.ajax({
                    url: "/Team/SelectTeam",
                    data: { userId: $("#Id").val() },
                    success: function (result) {
                        $("#teamSelector").hide().html(result);
                        ShowModal("teamSelector");

                        BindTeamSelection();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageUserEdit");
                    }
                });
            });

            $("#gridUserTeams .remove_team").click(function () {
                if (confirm("Вы уверены?")) {
                    var teamId = $(this).parent("td").parent("tr").find(".TeamId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/User/RemoveTeam",
                        data: { userId: $("#Id").val(), teamId: teamId },
                        success: function (result) {
                            RefreshGrid("gridUserTeams", function () {
                                User_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Пользователь исключен из команды.", "messageUserTeamList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserTeamList");
                        }
                    });
                }
            });
        });

        function BindTeamSelection() {
            $("#gridSelectTeam .select_team").die("click");
            $("#gridSelectTeam .select_team").live('click', function () {
                var teamId = $(this).parent("td").parent("tr").find(".Id").text();

                $.ajax({
                    type: "POST",
                    url: "/User/AddTeam",
                    data: { userId: $("#Id").val(), teamId: teamId },
                    success: function (result) {
                        HideModal(function () {
                            RefreshGrid("gridUserTeams", function () {
                                User_MainDetails.RefreshMainDetails(result.MainDetails);
                                ShowSuccessMessage("Пользователь добавлен в команду.", "messageUserTeamList");
                            });
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        HideModal(function () {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageUserTeamList");
                        });
                    }
                });
            });
        }
    }
};

﻿var ValueAddedTax_Edit = {
    OnBeginValueAddedTaxSave: function () {
        StartButtonProgress($("#btnSaveValueAddedTax"));
    },

    OnFailValueAddedTaxSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageValueAddedTaxEdit");
    }
};
﻿var ValueAddedTax_List = {
    OnSuccessValueAddedTaxSave: function () {
        HideModal();
        RefreshGrid("gridValueAddedTax", function () {
            ShowSuccessMessage("Сохранено.", "messageValueAddedTaxList");
        });
    }
};
﻿var ValueAddedTax_ValueAddedTaxGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateValueAddedTax').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                ValueAddedTax_ValueAddedTaxGrid.ShowValueAddedTaxDetailsForEdit(id);
            });

            $('#gridValueAddedTax .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                ValueAddedTax_ValueAddedTaxGrid.ShowValueAddedTaxDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "ValueAddedTax";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridValueAddedTax", function () {
                                ShowSuccessMessage("Удалено.", "messageValueAddedTaxList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageValueAddedTaxList");
                        }
                    });
                }
            });
        });
    },

    ShowValueAddedTaxDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "ValueAddedTax";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#valueAddedTaxEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#valueAddedTaxEdit"));
                ShowModal("valueAddedTaxEdit");
                $("#valueAddedTaxEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageValueAddedTaxList");
            }
        });
    }
};
﻿var Waybill_Details = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            //Работа с табами
            $(".tab_rows").click(function () {
                var _this = $(this);
                StartLinkProgress(_this.children("span"));

                _this.next().removeClass("selected");
                _this.addClass("selected");

                $(".tab_rows").parents(".tabPanel_with_grids_container").find(".gridContainer_rows").show();
                _this.parents(".tabPanel_with_grids_container").find(".gridContainer_articleGroups").hide();
                StopLinkProgress(_this.children("span"));
            });

            $(".tab_articleGroups").click(function () {
                var _this = $(this);
                StartLinkProgress(_this.children("span"));

                //если первый раз нажали на этот таб - то подгружаем таблицу
                var articleGroupTableShowed = _this.parents(".tabPanel_with_grids_container").find(".article_group_showed");

                if (IsFalse(articleGroupTableShowed.val())) {
                    articleGroupTableShowed.val('1'); //ставим пометку что таблица подгружена
                    var idGrid = _this.parents(".tabPanel_with_grids_container").find(".gridContainer_articleGroups").find(".grid").attr("id");

                    RefreshGrid(idGrid, function () {
                        ShowArticleGroupGrid(_this)
                    });
                }
                else {
                    ShowArticleGroupGrid(_this);
                }
            });
        });
    },

    // обработка выбора куратора
    HandlerForSelectCurator: function (waybillTypeId, select_user_action_link) {
        var userId = select_user_action_link.parent("td").parent("tr").find(".Id").text();
        var userName = select_user_action_link.parent("td").parent("tr").find(".Name").text();
        var waybillId = $("#Id").val();
        var url = "";

        switch (waybillTypeId) {
            case 1:
                url = "/ReceiptWaybill";
                break;
            case 2:
                url = "/MovementWaybill";
                break;
            case 3:
                url = "/WriteoffWaybill";
                break;
            case 4:
                url = "/ExpenditureWaybill";
                break;
            case 5:
                url = "/ChangeOwnerWaybill";
                break;
            case 6:
                url = "/ReturnFromClientWaybill";
                break;
        }

        $.ajax({
            type: "POST",
            url: url + "/ChangeCurator",
            data: { waybillId: waybillId, curatorId: userId },
            success: function (result) {
                var currentUrl = $("#currentUrl").val();
                $("#CuratorId").val(userId);
                $("#CuratorName").text(userName).attr("href", "/User/Details?id=" + userId + "&backURL=" + currentUrl)
                            .removeClass("disabled");

                HideModal();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageUserSelectList");
            }
        });
    }
};

function ShowArticleGroupGrid(_this) {
    _this.prev().removeClass("selected");
    _this.addClass("selected");

    _this.parents(".tabPanel_with_grids_container").find(".gridContainer_rows").hide();
    _this.parents(".tabPanel_with_grids_container").find(".gridContainer_articleGroups").show();
    StopLinkProgress(_this.children("span"));
};
﻿var Waybill_Edit = {
    Init: function () {
        $(document).ready(function () {
            $(".select_user").live("click", function () {
                var userId = $(this).parent("td").parent("tr").find(".Id").text();
                var userName = $(this).parent("td").parent("tr").find(".Name").text();

                $("#CuratorId").val(userId);
                $("#CuratorName").text(userName);

                HideModal();
            });
        })
    },

    ShowCuratorSelectorForm: function (waybillTypeId, storageIds, dealId, link, errorMessageContainer) {
        if (link != null) {
            StartLinkProgress(link);
        }

        $.ajax({
            type: "GET",
            url: "/User/SelectCurator",
            data: { waybillTypeId: waybillTypeId, storageIds: storageIds, dealId: dealId },
            success: function (result) {
                $("#curatorSelector").hide().html(result);
                $.validator.unobtrusive.parse($("#curatorSelector"));
                ShowModal("curatorSelector");
                if (link != null) {
                    StopLinkProgress(link);
                }
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, errorMessageContainer);
            }
        });
    }
};﻿var Waybill_ForWaybillRowsAdditionByListGrid = {

    actionName: "",
    gridId: "",
    messageId: "",

    BindAddingRowsByList: function () {
        $(document).ready(function () {
            $("#gridArticlesForWaybillRowsAdditionByList input.MovingCount").bind('blur', function () {
                if ($(this).val() != "") {

                    var movingCount = TryGetDecimal($(this).val());
                    var availableToReserveCount = TryGetDecimal($(this).parent("td").parent("tr").find(".AvailableToReserveCount").text().replaceAll(' ', ''));
                    var measureUnitScale = $(this).findCell(".MeasureUnitScale").text();

                    if (isNaN(movingCount) || movingCount > availableToReserveCount || movingCount <= 0 || !CheckValueScale(movingCount, measureUnitScale, 12)) {
                        $(this).addClass("field-validation-error");
                        
                        ShowErrorMessage("Введите " + (measureUnitScale == 0 ? "целое " : "") + "кол-во товара, не большее " + availableToReserveCount.toString() + 
                        (measureUnitScale > 0 ? ", с количеством знаков после запятой не более " + measureUnitScale : "")+".", "messageArticlesForWaybillRowsAdditionByList");
                        return false;
                    }
                    else { $(this).removeClass("field-validation-error"); }

                    var articleId = $(this).parent("td").parent("tr").find(".ArticleId").text();
                    var waybillId = $("#Id").val();

                    StartGridProgress($("#" + Waybill_ForWaybillRowsAdditionByListGrid.gridId));
                    StartGridProgress($("#gridArticlesForWaybillRowsAdditionByList"));

                    var thisInput = $(this);

                    $.ajax({
                        type: "POST",
                        url: Waybill_ForWaybillRowsAdditionByListGrid.actionName,
                        data: { waybillId: waybillId, articleId: articleId, count: movingCount },
                        success: function (result) {
                            RefreshGrid(Waybill_ForWaybillRowsAdditionByListGrid.gridId, function () {
                                thisInput.disableInput();
                                StopGridProgress($("#" + Waybill_ForWaybillRowsAdditionByListGrid.gridId));
                                StopGridProgress($("#gridArticlesForWaybillRowsAdditionByList"));
                                ShowSuccessMessage("Позиция добавлена.", Waybill_ForWaybillRowsAdditionByListGrid.messageId);
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            StopGridProgress($("#" + Waybill_ForWaybillRowsAdditionByListGrid.gridId));
                            StopGridProgress($("#gridArticlesForWaybillRowsAdditionByList"));
                            ShowErrorMessage(XMLHttpRequest.responseText, Waybill_ForWaybillRowsAdditionByListGrid.messageId);
                        }
                    });
                }
            });
        });
    }
};
﻿var WriteoffReason_Edit = {
    OnBeginWriteoffReasonSave: function () {
        StartButtonProgress($("#btnSaveWriteoffReason"));
    },

    OnFailWriteoffReasonSave: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageWriteoffReasonEdit");
    }
};
﻿var WriteoffReason_List = {
    OnSuccessWriteoffReasonSave: function () {
        HideModal();
        RefreshGrid("gridWriteoffReason", function () {
            ShowSuccessMessage("Сохранено.", "messageWriteoffReasonList");
        });
    }
};
﻿var WriteoffReason_WriteoffReasonGrid = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            $('#btnCreateWriteoffReason').click(function () {
                StartButtonProgress($(this));
                var id = 0;
                WriteoffReason_WriteoffReasonGrid.ShowWriteoffReasonDetailsForEdit(id);
            });

            $('#gridWriteoffReason .edit_link').click(function () {
                var id = $(this).parent("td").parent("tr").find(".Id").text();
                WriteoffReason_WriteoffReasonGrid.ShowWriteoffReasonDetailsForEdit(id);
            });

            $('.delete_link').click(function () {
                if (confirm('Вы уверены?')) {
                    var id = $(this).parent("td").parent("tr").find(".Id").text();
                    var controllerName = "WriteoffReason";

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/" + controllerName + "/Delete/",
                        data: { id: id },
                        success: function (result) {
                            RefreshGrid("gridWriteoffReason", function () {
                                ShowSuccessMessage("Удалено.", "messageWriteoffReasonList");
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffReasonList");
                        }
                    });
                }
            });
        });
    },

    ShowWriteoffReasonDetailsForEdit: function (id) {
        var method = (id == 0 ? "Create" : "Edit");
        var controllerName = "WriteoffReason";

        $.ajax({
            type: "GET",
            url: "/" + controllerName + "/" + method + "/",
            data: { id: id },
            success: function (result) {
                $("#writeoffReasonEdit").hide().html(result);
                $.validator.unobtrusive.parse($("#writeoffReasonEdit"));
                ShowModal("writeoffReasonEdit");
                $("#writeoffReasonEdit #Name").focus();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffReasonList");
            }
        });
    }
};
﻿var WriteoffWaybill_AddRowsByList = {
    Init: function () {
        $(document).ready(function () {
            Article_AddRowsByList.Init();

            Waybill_ForWaybillRowsAdditionByListGrid.actionName = "/WriteoffWaybill/AddRowSimply/";
            Waybill_ForWaybillRowsAdditionByListGrid.gridId = "gridWriteoffWaybillRows";
            Waybill_ForWaybillRowsAdditionByListGrid.messageId = "messageWriteoffWaybillRowList"  
        });
    }
};
﻿var WriteoffWaybill_Details = {
    Init: function () {
        Waybill_Details.Init();

        $(document).ready(function () {
            // Вызов окна параметров для печатных форм
            $('#lnkWriteoffWaybillPrintingForm').click(function () {
                $.ajax({
                    type: "GET",
                    url: "/WriteoffWaybill/ShowWriteoffWaybillPrintingFormSettings/",
                    data: { waybillId: $('#Id').val() },
                    success: function (result) {
                        $('#writeoffWaybillPrintingForm').hide().html(result);
                        $.validator.unobtrusive.parse($("#WriteoffWaybillPrintingForm"));
                        ShowModal("writeoffWaybillPrintingForm");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                    }
                });
            });

            // Изменить куратора
            $("#linkChangeCurator").click(function () {
                var storageId = $("#SenderStorageId").val();
                Waybill_Edit.ShowCuratorSelectorForm(3/*waybillTypeId*/, storageId, "", null, "messageWriteoffWaybillEdit");
            });

            // обработка выбора куратора
            $(".select_user").live("click", function () {
                Waybill_Details.HandlerForSelectCurator(3/*waybillTypeId*/, $(this));
            });

        }); //$(document).ready

        $('#btnAddRowsByList').live("click", function () {
            var id = $('#Id').val();
            window.location = "/WriteoffWaybill/AddRowsByList?id=" + id + GetBackUrl();
        });

        $("#btnBackTo").live('click', function () {
            window.location = $('#BackURL').val();
        });

        $('#btnEditWriteoffWaybill').live("click", function () {
            var writeoffWaybillId = $('#Id').val();
            window.location = "/WriteoffWaybill/Edit?id=" + writeoffWaybillId + GetBackUrl();
        });

        $('#btnDeleteWriteoffWaybill').live('click', function () {
            if (confirm('Вы уверены?')) {
                var writeoffWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/WriteoffWaybill/Delete/",
                    data: { id: writeoffWaybillId },
                    success: function () {
                        window.location = "/WriteoffWaybill/List";
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                    }
                });
            }
        });

        $("#btnPrepareToAccept").live('click', function () {
            var writeoffWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/WriteoffWaybill/PrepareToAccept",
                data: { writeoffWaybillId: writeoffWaybillId },
                success: function (result) {
                    RefreshGrid("gridWriteoffWaybillRows", function () {
                        WriteoffWaybill_Details.RefreshMainDetails(result);
                        ShowSuccessMessage("Накладная подготовлена к проводке.", "messageWriteoffWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                }
            });
        });

        $("#btnCancelReadinessToAccept").live('click', function () {
            if (confirm('Вы уверены?')) {
                var writeoffWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/WriteoffWaybill/CancelReadinessToAccept",
                    data: { writeoffWaybillId: writeoffWaybillId },
                    success: function (result) {
                        RefreshGrid("gridWriteoffWaybillRows", function () {
                            WriteoffWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Готовность накладной к проводке отменена.", "messageWriteoffWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                    }
                });
            }
        });

        $("#btnAccept").live('click', function () {
            var writeoffWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/WriteoffWaybill/Accept",
                data: { writeoffWaybillId: writeoffWaybillId },
                success: function (result) {
                    RefreshGrid("gridWriteoffWaybillRows", function () {
                        WriteoffWaybill_Details.RefreshMainDetails(result);
                        ShowSuccessMessage("Накладная проведена.", "messageWriteoffWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                }
            });
        });

        $("#btnCancelAcceptance").live('click', function () {
            if (confirm('Вы уверены?')) {
                var writeoffWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "POST",
                    url: "/WriteoffWaybill/CancelAcceptance",
                    data: { writeoffWaybillId: writeoffWaybillId },
                    success: function (result) {
                        RefreshGrid("gridWriteoffWaybillRows", function () {
                            WriteoffWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Проводка накладной отменена.", "messageWriteoffWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                    }
                });
            }
        });

        $('#btnWriteoff').live("click", function () {
            var writeoffWaybillId = $('#Id').val();

            StartButtonProgress($(this));
            $.ajax({
                type: "POST",
                url: "/WriteoffWaybill/Writeoff/",
                data: { writeoffWaybillId: writeoffWaybillId },
                success: function (result) {
                    RefreshGrid("gridWriteoffWaybillRows", function () {
                        WriteoffWaybill_Details.RefreshMainDetails(result);
                        ShowSuccessMessage("Списание произведено.", "messageWriteoffWaybillEdit");
                    });
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                }
            });
        });

        $('#btnCancelWriteoff').live("click", function () {
            var writeoffWaybillId = $('#Id').val();
            if (confirm('Вы уверены, что хотите отменить списание?')) {
                StartButtonProgress($(this));

                $.ajax({
                    type: "POST",
                    url: "/WriteoffWaybill/CancelWriteoff/",
                    data: { writeoffWaybillId: writeoffWaybillId },
                    success: function (result) {
                        RefreshGrid("gridWriteoffWaybillRows", function () {
                            WriteoffWaybill_Details.RefreshMainDetails(result);
                            ShowSuccessMessage("Отмена списания произведена.", "messageWriteoffWaybillEdit");
                        });
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
                    }
                });
            }
        });
    },

    // обновление основной информации о накладной и состояний кнопок
    RefreshMainDetails: function (details) {
        var mainDetails = details.MainDetails;
        
        $("#StateName").text(mainDetails.StateName);
        $("#PurchaseCostSum").text(mainDetails.PurchaseCostSum);
        $("#SenderAccountingPriceSum").text(mainDetails.SenderAccountingPriceSum);
        $("#SenderStorageName").text(mainDetails.SenderStorageName);
        $("#WriteoffReasonName").text(mainDetails.WriteoffReasonName);
        $("#ReceivelessProfitPercent").text(mainDetails.ReceivelessProfitPercent);
        $("#ReceivelessProfitSum").text(mainDetails.ReceivelessProfitSum);
        $("#RowCount").text(mainDetails.RowCount);
        $("#Comment").html(mainDetails.Comment);
        $("#AcceptedByName").text(mainDetails.AcceptedByName);
        $("#AcceptedById").val(mainDetails.AcceptedById);
        $("#AcceptanceDate").text(mainDetails.AcceptanceDate);
        $("#WrittenoffByName").text(mainDetails.WrittenoffByName);
        $("#WrittenoffById").val(mainDetails.WrittenoffById);
        $("#WriteoffDate").text(mainDetails.WriteoffDate);
        $("#TotalWeight").text(mainDetails.TotalWeight);
        $("#TotalVolume").text(mainDetails.TotalVolume);

        $("#AllowToViewAcceptedByDetails").val(mainDetails.AllowToViewAcceptedByDetails);
        $("#AllowToViewWrittenoffByDetails").val(mainDetails.AllowToViewWrittenoffByDetails);

        $("#AcceptedByContainer").css("display", mainDetails.AcceptedById != "" ? "inline" : "none");
        $("#WrittenoffByContainer").css("display", mainDetails.WrittenoffById != "" ? "inline" : "none");

        SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');
        SetEntityDetailsLink('AllowToViewWrittenoffByDetails', 'WrittenoffByName', 'User', 'WrittenoffById');

        UpdateElementVisibility("btnEditWriteoffWaybill", details.AllowToEdit);
        UpdateButtonAvailability("btnEditWriteoffWaybill", details.AllowToEdit);

        UpdateElementVisibility("btnAddRowsByList", details.AllowToEdit);
        UpdateButtonAvailability("btnAddRowsByList", details.AllowToEdit);

        UpdateElementVisibility("btnDeleteWriteoffWaybill", details.AllowToDelete);
        UpdateButtonAvailability("btnDeleteWriteoffWaybill", details.AllowToDelete);

        UpdateButtonAvailability("btnWriteoff", details.AllowToWriteoff);
        UpdateElementVisibility("btnWriteoff", details.IsPossibilityToWriteoff);
        UpdateElementVisibility("btnCancelWriteoff", details.AllowToCancelWriteoff);
        UpdateButtonAvailability("btnCancelWriteoff", details.AllowToCancelWriteoff);

        UpdateElementVisibility("btnPrepareToAccept", details.IsPossibilityToPrepareToAccept);
        UpdateButtonAvailability("btnPrepareToAccept", details.AllowToPrepareToAccept);
        UpdateElementVisibility("btnCancelReadinessToAccept", details.AllowToCancelReadinessToAccept);
        UpdateButtonAvailability("btnCancelReadinessToAccept", details.AllowToCancelReadinessToAccept);

        UpdateElementVisibility("btnAccept", details.IsPossibilityToAccept);
        UpdateButtonAvailability("btnAccept", details.AllowToAccept);
        UpdateElementVisibility("btnCancelAcceptance", details.AllowToCancelAcceptance);
        UpdateButtonAvailability("btnCancelAcceptance", details.AllowToCancelAcceptance);

        UpdateElementVisibility("feature_menu_box", details.AllowToPrintForms);
        UpdateElementVisibility("linkChangeCurator", details.AllowToChangeCurator);
    },
    
    OnSuccessWriteoffWaybillRowEdit: function (ajaxContext) {
        if ($('#writeoffWaybillRowEdit #Id').val() != "00000000-0000-0000-0000-000000000000") {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridWriteoffWaybillRows", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        HideModal(function () {
                            ShowSuccessMessage("Сохранено.", "messageWriteoffWaybillRowList");
                        });
                    });
                });
            });
        }
        else {
            // грид для формы добавления товаров списком
            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                RefreshGrid("gridWriteoffWaybillRows", function () {
                    RefreshGrid("gridArticleGroups", function () {
                        WriteoffWaybill_Shared.ClearForm();
                        ShowSuccessMessage("Сохранено.", "messageWriteoffWaybillRowEdit");
                    });
                });
            });
        }

        WriteoffWaybill_Details.RefreshMainDetails(ajaxContext);
    }
}; ﻿var WriteoffWaybill_Edit = {
    Init: function () {
        Waybill_Edit.Init();

        $(document).ready(function () {

            $("#rbIsAutoNumber_true").click(function () {
                $("#Number").ValidationValid();
                $("#Number").attr("disabled", "disabled").val("");
                $("#IsAutoNumber").val("1");
            });

            $("#rbIsAutoNumber_false").click(function () {
                $("#Number").removeAttr("disabled").focus();
                $("#IsAutoNumber").val("0");
            });

            // при редактировании
            if (!IsTrue($("#AllowToGenerateNumber").val())) {
                $("#rbIsAutoNumber_false").trigger("click");
                $("#rbIsAutoNumber_false").attr("checked", "checked");

                $("#rbIsAutoNumber_true_wrapper").hide();
                $("#rbIsAutoNumber_false_wrapper").hide();
            }
            // при добавлении
            else {
                $("#rbIsAutoNumber_true").attr("checked", "checked");
                $("#rbIsAutoNumber_true").trigger("click");
            }

            // связывание списков отправитель-организация отправителя
            $('#SenderStorageId').FillChildComboBox('SenderId', "/WriteoffWaybill/GetAccountOrganizationsForStorage", 'storageId', "messageWriteoffWaybillEdit");

            $("#CuratorName").click(function () {
                var storageId = $("#SenderStorageId").val();
                if (storageId != "") {
                    Waybill_Edit.ShowCuratorSelectorForm(3/*WaybillTypeId*/, storageId, "", $(this), "messageWriteoffReasonEdit");
                }
                else {
                    $("#SenderStorageId").ValidationError("Укажите место хранения.");
                }
            });
        });

        $("#btnBack").live('click', function () {
            window.location = $('#BackURL').val();
        });

        $('#btnAddWriteoffReason').live("click", function () {
            $.ajax({
                type: "GET",
                url: "/WriteoffReason/Create",
                success: function (result) {
                    $('#writeoffReasonEdit').hide().html(result);
                    $.validator.unobtrusive.parse($("#writeoffReasonEdit"));
                    ShowModal("writeoffReasonEdit");
                    $('#writeoffReasonEdit #Name').focus();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffReasonEdit");
                }
            });
        });
    },

    OnSuccessWriteoffReasonEdit: function (ajaxContext) {
        $.ajax({
            type: "POST",
            url: "/WriteoffReason/GetWriteoffReasons",
            success: function (result) {
                $('#WriteoffReasonId').fillSelect(result);
                $('#WriteoffReasonId').attr('value', ajaxContext.Id);
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillEdit");
            }
        });

        HideModal(function () {
            ShowSuccessMessage("Основание для списания добавлено.", "messageWriteoffWaybillEdit");
        });

    },

    OnSuccessWriteoffWaybillEdit: function (ajaxContext) {
        window.location = "/WriteoffWaybill/Details?id=" + ajaxContext + "&backURL=/WriteoffWaybill/List";
    },

    OnFailWriteoffWaybillEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageWriteoffWaybillEdit");
    }
};﻿var WriteoffWaybill_List_WriteoffPendingGrid = {
    Init: function () {
        $(document).ready(function () {
            
            $("#gridWriteoffPending table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/WriteoffWaybill/Details?id=" + id + GetBackUrl());

                var senderOrganizationId = $(this).find(".SenderOrganizationId").text();
                $(this).find("a.SenderOrganizationName").attr("href", "/AccountOrganization/Details?id=" + senderOrganizationId + GetBackUrl());

                var senderStorageId = $(this).find(".SenderStorageId").text();
                $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + senderStorageId + GetBackUrl());
            });

            $('#btnCreateWriteoffWaybill').click(function () {
                window.location = "/WriteoffWaybill/Create?" + GetBackUrl(true);
            });
        });
    }
};﻿var WriteoffWaybill_List_WrittenoffWaybillGrid = {
    Init: function () {
        $(document).ready(function () {
            
            $("#gridWrittenoff table.grid_table tr").each(function (i, el) {
                var id = $(this).find(".Id").text();
                $(this).find("a.Number").attr("href", "/WriteoffWaybill/Details?id=" + id + GetBackUrl());

                var senderOrganizationId = $(this).find(".SenderOrganizationId").text();
                $(this).find("a.SenderOrganizationName").attr("href", "/AccountOrganization/Details?id=" + senderOrganizationId + GetBackUrl());

                var senderStorageId = $(this).find(".SenderStorageId").text();
                $(this).find("a.SenderStorageName").attr("href", "/Storage/Details?id=" + senderStorageId + GetBackUrl());
            });
        });
    }
};﻿var WriteoffWaybill_MainDetails = {
    Init: function () {
        $(document).ready(function () {
            var currentUrl = $("#currentUrl").val();

            SetEntityDetailsLink('AllowToViewCuratorDetails', 'CuratorName', 'User', 'CuratorId');

            SetEntityDetailsLink('AllowToViewSenderStorageDetails', 'SenderStorageName', 'Storage', 'SenderStorageId');

            SetEntityDetailsLink('AllowToViewCreatedByDetails', 'CreatedByName', 'User', 'CreatedById');

            SetEntityDetailsLink('AllowToViewAcceptedByDetails', 'AcceptedByName', 'User', 'AcceptedById');

            SetEntityDetailsLink('AllowToViewWrittenoffByDetails', 'WrittenoffByName', 'User', 'WrittenoffById');

            SetEntityDetailsLink(null, 'SenderName', 'AccountOrganization', 'SenderId');
        });
    }
}; ﻿var WriteoffWaybill_RowEdit = {
    Init: function () {
        $(document).ready(function () {
            SetFieldScale("#WritingoffCount", 12, $("#MeasureUnitScale").val(), "#writeoffWaybillRowEdit", true);
        });

        $("span#ArticleName.select_link").bind('click', function () {
            var storageId = $('#SenderStorageId').val();
            var senderId = $('#SenderId').val();

            $.ajax({
                type: "GET",
                url: "/Article/SelectArticleFromStorage/",
                data: { storageId: storageId, senderId: senderId },
                success: function (result) {
                    $('#articleSelector').hide().html(result);
                    $.validator.unobtrusive.parse($("#articleSelector"));
                    ShowModal("articleSelector");

                    WriteoffWaybill_RowEdit.BindArticleSelection();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowEdit");
                }
            });
        });

        if ($("#writeoffWaybillRowEdit #ManualSourcesInfo").val() != "") {
            $("#writeoffWaybillRowEdit #WritingoffCount").disableInput();
        }

        $("#BatchLink.select_link").click(function () {
            var currentArticleBatchId = null;
            if ($("#writeoffWaybillRowEdit #CurrentReceiptWaybillRowId").val() != "00000000-0000-0000-0000-000000000000") {
                currentArticleBatchId = $("#writeoffWaybillRowEdit #CurrentReceiptWaybillRowId").val();
            }
            WriteoffWaybill_RowEdit.SelectArticleBatch(currentArticleBatchId);
        });

        $("#ManualSourcesLink.select_link").click(function () {
            WriteoffWaybill_RowEdit.SelectSourceWaybillRows();
        })

        $("#WritingoffCount").bind("keyup change paste cut", function () {
            WriteoffWaybill_Shared.CheckSaveButtonAvailability();
        });

    },

    BindArticleSelection: function () {
        // выбор товара из списка
        $("#gridSelectArticle .article_select_link").die("click");
        $("#gridSelectArticle .article_select_link").live('click', function () {
            $("#ArticleName").text($(this).parent("td").parent("tr").find(".articleFullName").text());
            $("#ArticleId").val($(this).parent("td").parent("tr").find(".articleId").text());
            $("#MeasureUnitName").text($(this).parent("td").parent("tr").find(".MeasureUnitShortName").text());

            if (IsTrue($("#ArticleSelector, #SelectSources").attr('checked'))) {
                HideModal(function () { WriteoffWaybill_RowEdit.SelectSourceWaybillRows(); });
            }
            else {
                HideModal(function () {
                    WriteoffWaybill_RowEdit.SelectArticleBatch();
                });
            }
        });
    },

    BindArticleBatchSelection: function () {
        $("#gridSelectArticleBatch .articleBatch_select_link").die("click");
        $("#gridSelectArticleBatch .articleBatch_select_link").live("click", function () {
            var availableToReserveCount = $(this).parent("td").parent("tr").find(".AvailableToReserveCount").text().replaceAll(' ', '');
            var purchaseCost = $(this).parent("td").parent("tr").find(".purchaseCost").text();
            var senderAccountingPrice = $(this).closest("#articleBatchSelector").find("#SenderAccountingPrice").text();

            $("#writeoffWaybillRowEdit #BatchName").text($(this).parent("td").parent("tr").find(".batchName").text());
            $("#writeoffWaybillRowEdit #AvailableToReserveFromStorageCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromStorageCount").text());
            $("#writeoffWaybillRowEdit #AvailableToReserveCount").text(availableToReserveCount);
            $("#writeoffWaybillRowEdit #AvailableToReserveFromPendingCount").text($(this).parent("td").parent("tr").find(".AvailableToReserveFromPendingCount").text());

            $("#writeoffWaybillRowEdit #SenderAccountingPrice").text(senderAccountingPrice);
            $("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val($(this).parent("td").parent("tr").find(".ReceiptWaybillRowId").text());

            var measureUnitScale = $(this).parent("td").parent("tr").find(".MeasureUnitScale").text();
            SetFieldScale("#WritingoffCount", 12, measureUnitScale, "#writeoffWaybillRowEdit", true);

            var senderAccountingPriceValue = parseFloat(senderAccountingPrice.replaceAll(' ', ''));
            var purchaseCostValue = parseFloat(purchaseCost.replaceAll(' ', ''));

            if (IsTrue($("#AllowToViewPurchaseCost").val())) {
                $("#writeoffWaybillRowEdit #PurchaseCost").text(purchaseCost);
                $("#writeoffWaybillRowEdit #MarkupSum").text(ValueForDisplay(senderAccountingPriceValue - purchaseCostValue, 2));
                $("#writeoffWaybillRowEdit #MarkupPercent").text(purchaseCostValue != 0 ? ValueForDisplay(((senderAccountingPriceValue - purchaseCostValue) / purchaseCostValue) * 100, 2) : "---");
            }
            else {
                $("#writeoffWaybillRowEdit #PurchaseCost").text("---");
                $("#writeoffWaybillRowEdit #MarkupSum").text("---");
                $("#writeoffWaybillRowEdit #MarkupPercent").text("---");
            }

            $("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val($(this).findCell(".ReceiptWaybillRowId").text());

            $("#writeoffWaybillRowEdit #ManualSourcesInfo").val("");

            HideModal(function () {
                $("#BatchLink").show();
                $("#ManualSourcesLink").hide();

                $("#writeoffWaybillRowEdit #WritingoffCount").enableInput().val("").focus().removeAttr("disabled");
            });
        });
    },

    BindManualSourcesSelection: function () {
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").die("click");
        $("#sourceWaybillRowSelector #btnSaveSourcesSelection").live("click", function () {
            StartButtonProgress($(this));
            
            $.ajax({
                type: "GET",
                url: "/WriteoffWaybill/GetRowInfo/",
                data: { waybillId: $("#Id").val(),
                    batchId: $("#sourceWaybillRowSelector #SelectedBatchId").val()
                },
                success: function (result) {
                    $("#ManualSourcesInfo").val($("#sourceWaybillRowSelector #SelectedSources").val());

                    var movingCount = 0;
                    var selectedSourcesInfo = $("#ManualSourcesInfo").val().split(";");
                    $.each(selectedSourcesInfo, function (i, val) {
                        var fields = val.split("_");
                        var count = TryGetDecimal(fields[1]);

                        if (!isNaN(count)) {
                            movingCount += count;
                        }
                    });
                    
                    $("#writeoffWaybillRowEdit #WritingoffCount").disableInput().val(ValueForEdit(movingCount));
                    $("#BatchLink").hide();
                    $("#ManualSourcesLink").show();
                    $("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val($("#SelectedBatchId").val());
                    $("#writeoffWaybillRowEdit #BatchName").text($("#SelectedBatchName").val());

                    WriteoffWaybill_Shared.CheckSaveButtonAvailability();

                    $("#writeoffWaybillRowEdit #PurchaseCost").text(result.PurchaseCost);
                    $("#writeoffWaybillRowEdit #AvailableToReserveFromStorageCount").text(result.AvailableToReserveFromStorageCount);
                    $("#writeoffWaybillRowEdit #AvailableToReserveCount").text(result.AvailableToReserveCount);
                    $("#writeoffWaybillRowEdit #AvailableToReserveFromPendingCount").text(result.AvailableToReserveFromPendingCount);
                    $("#writeoffWaybillRowEdit #MarkupPercent").text(result.MarkupPercent);
                    $("#writeoffWaybillRowEdit #MarkupSum").text(result.MarkupSum);
                    $("#writeoffWaybillRowEdit #SenderAccountingPrice").text(result.SenderAccountingPrice);


                    HideModal();
                },
                error: function (XMLHttpRequest, textStatus, thrownError) {
                    ShowErrorMessage(XMLHttpRequest.responseText, "messageOutgoingWaybillRow");
                }
            });
        });
    },


    OnFailWriteoffWaybillRowEdit: function (ajaxContext) {
        ShowErrorMessage(ajaxContext.responseText, "messageWriteoffWaybillRowEdit");
    },

    SelectArticleBatch: function (articleBatchToExcludeId) {
        $.ajax({
            type: "GET",
            url: "/Article/SelectArticleBatchByStorage/",
            data: { articleId: $("#ArticleId").val(), storageId: $("#SenderStorageId").val(), senderId: $('#SenderId').val(),
                date: $("#WriteoffWaybillDate").val(), articleBatchToExcludeId: articleBatchToExcludeId
            },
            success: function (result) {
                $('#articleBatchSelector').hide().html(result);
                $.validator.unobtrusive.parse($("#articleBatchSelector"));
                ShowModal("articleBatchSelector");

                var availableToReserveCount = 0;

                $("#articleBatchSelector .AvailableToReserveCount").each(function () {
                    availableToReserveCount += parseFloat($(this).text().replaceAll(' ', ''));
                });

                $("#articleBatchSelector #AvailableToMoveTotalCount").text(availableToReserveCount);

                WriteoffWaybill_RowEdit.BindArticleBatchSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                if ($("#writeoffWaybillRowEdit #CurrentReceiptWaybillRowId").val() == "00000000-0000-0000-0000-000000000000") {
                    WriteoffWaybill_Shared.ClearForm();
                }
                ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowEdit");
            }
        });
    },

    SelectSourceWaybillRows: function () {
        $.ajax({
            type: "GET",
            url: "/OutgoingWaybillRow/GetAvailableToReserveWaybillRows/",
            data: { type: "WriteoffWaybill",
                articleId: $("#writeoffWaybillRowEdit #ArticleId").val(),
                storageId: $("#writeoffWaybillRowEdit #SenderStorageId").val(),
                organizationId: $("#writeoffWaybillRowEdit #SenderId").val(),
                selectedSourcesInfo: $("#ManualSourcesInfo").val(),
                waybillRowId: $("#writeoffWaybillRowEdit #Id").val()
            },
            success: function (result) {
                $('#sourceWaybillRowSelector').hide().html(result);

                var selectedBatchId = $("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val();

                if (selectedBatchId != "00000000-0000-0000-0000-000000000000" && $("#ManualSourcesInfo").val() != "") {
                    $("#SelectedBatchId").val($("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val());
                    $("#SelectedBatchName").val($("#writeoffWaybillRowEdit #BatchName").text());
                }

                var selectedBatch = $("#SelectedBatchId").val();
                OutgoingWaybillRow_IncomingWaybillRowGrid.DisableRowsWithAnotherBatches(selectedBatch);

                $.validator.unobtrusive.parse($("#sourceWaybillRowSelector"));
                ShowModal("sourceWaybillRowSelector");

                WriteoffWaybill_RowEdit.BindManualSourcesSelection();
            },
            error: function (XMLHttpRequest, textStatus, thrownError) {
                ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowEdit");
            }
        });
    }
}; ﻿var WriteoffWaybill_RowGrid = {
    Init: function () {
        $(document).ready(function () {
            $("#btnAddWriteoffWaybillRow").click(function () {
                var writeoffWaybillId = $('#Id').val();

                StartButtonProgress($(this));
                $.ajax({
                    type: "GET",
                    url: "/WriteoffWaybill/AddRow",
                    data: { writeoffWaybillId: writeoffWaybillId },
                    success: function (result) {
                        $('#writeoffWaybillRowEdit').hide().html(result);
                        ShowModal("writeoffWaybillRowEdit");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowList");
                    }
                });
            });

            // редактирование позиции накладной
            $("#gridWriteoffWaybillRows .edit_link, #gridWriteoffWaybillRows .details_link").click(function () {
                var writeoffWaybillId = $('#Id').val();
                var writeoffWaybillRowId = $(this).parent("td").parent("tr").find(".writeoffWaybillRowId").text();

                $.ajax({
                    type: "GET",
                    url: "/WriteoffWaybill/EditRow",
                    data: { writeoffWaybillId: writeoffWaybillId, writeoffWaybillRowId: writeoffWaybillRowId },
                    success: function (result) {
                        $('#writeoffWaybillRowEdit').hide().html(result);
                        ShowModal("writeoffWaybillRowEdit");

                        if ($("#writeoffWaybillRowEdit #ManualSourcesInfo").val() == "") {
                            $("#BatchLink").show();
                        }
                        else {
                            $("#ManualSourcesLink").show();
                        }

                        $("#writeoffWaybillRowEdit #WritingoffCount").focus();
                        WriteoffWaybill_Shared.CheckSaveButtonAvailability();
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowList");
                    }
                });
            });

            //просмотр источников позиции накладной
            $("#gridWriteoffWaybillRows .source_link").click(function () {
                var waybillRowId = $(this).parent("td").parent("tr").find(".writeoffWaybillRowId").text();
                var articleName = $(this).parent("td").parent("tr").find(".ArticleName").text();
                var batchName = $(this).parent("td").parent("tr").find(".Batch").text();

                $.ajax({
                    type: "POST",
                    url: "/OutgoingWaybillRow/GetSourceWaybill/",
                    data: { type: "WriteoffWaybill", id: waybillRowId, articleName: articleName, batchName: batchName },
                    success: function (result) {
                        $("#writeoffWaybillSourceLink").hide().html(result);
                        ShowModal("writeoffWaybillSourceLink");
                    },
                    error: function (XMLHttpRequest, textStatus, thrownError) {
                        ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowList");
                    }
                });
            });

            // удаление позиции накладной
            $("#gridWriteoffWaybillRows .delete_link").click(function () {
                if (confirm('Вы уверены?')) {
                    var writeoffWaybillId = $('#Id').val();
                    var writeoffWaybillRowId = $(this).parent("td").parent("tr").find(".writeoffWaybillRowId").text();

                    StartGridProgress($(this).closest(".grid"));
                    $.ajax({
                        type: "POST",
                        url: "/WriteoffWaybill/DeleteRow/",
                        data: { writeoffWaybillId: writeoffWaybillId, writeoffWaybillRowId: writeoffWaybillRowId },
                        success: function (result) {
                            // грид для формы добавления товаров списком
                            RefreshGrid("gridArticlesForWaybillRowsAdditionByList", function () {
                                RefreshGrid("gridWriteoffWaybillRows", function () {
                                    RefreshGrid("gridArticleGroups", function () {
                                        WriteoffWaybill_Details.RefreshMainDetails(result);
                                        ShowSuccessMessage("Позиция удалена.", "messageWriteoffWaybillRowList");
                                    });
                                });
                            });
                        },
                        error: function (XMLHttpRequest, textStatus, thrownError) {
                            ShowErrorMessage(XMLHttpRequest.responseText, "messageWriteoffWaybillRowList");
                        }
                    });
                }
            });
        });
    }
};



﻿var WriteoffWaybill_Shared = {
    CheckSaveButtonAvailability: function () {
        var writingoffCount = TryGetDecimal($("#writeoffWaybillRowEdit #WritingoffCount").val());
        var availableToReserveCount = TryGetDecimal($("#writeoffWaybillRowEdit #AvailableToReserveCount").text().replaceAll(' ', ''));

        var manualSourcesInfo = $("#ManualSourcesInfo").val();
        if (((manualSourcesInfo != "" && manualSourcesInfo != undefined) || (!isNaN(writingoffCount) && !isNaN(availableToReserveCount) && (writingoffCount <= availableToReserveCount))) && (writingoffCount > 0)) {
            EnableButton("btnSaveWriteoffWaybillRow");
        }
        else {
            DisableButton("btnSaveWriteoffWaybillRow");
        }
    },

    ClearForm: function () {
        $("#ArticleName").text("Выберите товар");
        $("#ArticleId").val("");
        $("#writeoffWaybillRowEdit #BatchName").text("не выбрана");
        $("#writeoffWaybillRowEdit #PurchaseCost").text("---");
        $("#writeoffWaybillRowEdit #SenderAccountingPrice").text("---");

        $("#writeoffWaybillRowEdit #AvailableToReserveFromStorageCount").text("---");
        $("#writeoffWaybillRowEdit #AvailableToReserveCount").text("---");
        $("#writeoffWaybillRowEdit #AvailableToReserveFromPendingCount").text("---");
        $("#writeoffWaybillRowEdit #MarkupPercent").text("---");
        $("#writeoffWaybillRowEdit #MarkupSum").text("---");
        $("#writeoffWaybillRowEdit #ReceiptWaybillRowId").val("00000000-0000-0000-0000-000000000000");
        $("#writeoffWaybillRowEdit #MeasureUnitName").text("");

        $("#writeoffWaybillRowEdit #WritingoffCount").val("");
        $("#writeoffWaybillRowEdit #WritingoffCount").removeClass("input-validation-error");
        $("#writeoffWaybillRowEdit #WritingoffCount_validationMessage").hide();
        $("#writeoffWaybillRowEdit #ManualSourcesInfo").val("");
        $("#writeoffWaybillRowEdit #ManualSourcesLink").hide();

        SetFieldScale("#WritingoffCount", 12, 0, "#writeoffWaybillRowEdit", true);

        DisableButton("btnSaveWriteoffWaybillRow");
        $("#BatchLink").hide();
    }
};